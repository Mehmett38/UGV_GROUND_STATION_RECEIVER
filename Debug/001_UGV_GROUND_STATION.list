
001_UGV_GROUND_STATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fe8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08005170  08005170  00015170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051c8  080051c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080051c8  080051c8  000151c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051d0  080051d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051d0  080051d0  000151d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051d4  080051d4  000151d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080051d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000004f0  20000010  20000010  00020010  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000500  20000500  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000e676  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000298d  00000000  00000000  0002e6f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b30  00000000  00000000  00031088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000086e  00000000  00000000  00031bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000206a1  00000000  00000000  00032426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000114b5  00000000  00000000  00052ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bc6e3  00000000  00000000  00063f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002b00  00000000  00000000  00120660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  00123160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005158 	.word	0x08005158

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005158 	.word	0x08005158

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ca:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <MX_DMA_Init+0x38>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	4a0b      	ldr	r2, [pc, #44]	; (80004fc <MX_DMA_Init+0x38>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	6153      	str	r3, [r2, #20]
 80004d6:	4b09      	ldr	r3, [pc, #36]	; (80004fc <MX_DMA_Init+0x38>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2100      	movs	r1, #0
 80004e6:	2011      	movs	r0, #17
 80004e8:	f000 fc59 	bl	8000d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80004ec:	2011      	movs	r0, #17
 80004ee:	f000 fc72 	bl	8000dd6 <HAL_NVIC_EnableIRQ>

}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40021000 	.word	0x40021000

08000500 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	; 0x28
 8000504:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	f107 0314 	add.w	r3, r7, #20
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000516:	4b3f      	ldr	r3, [pc, #252]	; (8000614 <MX_GPIO_Init+0x114>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	4a3e      	ldr	r2, [pc, #248]	; (8000614 <MX_GPIO_Init+0x114>)
 800051c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000520:	6153      	str	r3, [r2, #20]
 8000522:	4b3c      	ldr	r3, [pc, #240]	; (8000614 <MX_GPIO_Init+0x114>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800052a:	613b      	str	r3, [r7, #16]
 800052c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800052e:	4b39      	ldr	r3, [pc, #228]	; (8000614 <MX_GPIO_Init+0x114>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	4a38      	ldr	r2, [pc, #224]	; (8000614 <MX_GPIO_Init+0x114>)
 8000534:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000538:	6153      	str	r3, [r2, #20]
 800053a:	4b36      	ldr	r3, [pc, #216]	; (8000614 <MX_GPIO_Init+0x114>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000546:	4b33      	ldr	r3, [pc, #204]	; (8000614 <MX_GPIO_Init+0x114>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	4a32      	ldr	r2, [pc, #200]	; (8000614 <MX_GPIO_Init+0x114>)
 800054c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000550:	6153      	str	r3, [r2, #20]
 8000552:	4b30      	ldr	r3, [pc, #192]	; (8000614 <MX_GPIO_Init+0x114>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	4b2d      	ldr	r3, [pc, #180]	; (8000614 <MX_GPIO_Init+0x114>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	4a2c      	ldr	r2, [pc, #176]	; (8000614 <MX_GPIO_Init+0x114>)
 8000564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000568:	6153      	str	r3, [r2, #20]
 800056a:	4b2a      	ldr	r3, [pc, #168]	; (8000614 <MX_GPIO_Init+0x114>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8000576:	2201      	movs	r2, #1
 8000578:	2110      	movs	r1, #16
 800057a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057e:	f000 ff4f 	bl	8001420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000582:	2201      	movs	r2, #1
 8000584:	2102      	movs	r1, #2
 8000586:	4824      	ldr	r0, [pc, #144]	; (8000618 <MX_GPIO_Init+0x118>)
 8000588:	f000 ff4a 	bl	8001420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800058c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000592:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4619      	mov	r1, r3
 80005a2:	481e      	ldr	r0, [pc, #120]	; (800061c <MX_GPIO_Init+0x11c>)
 80005a4:	f000 fdb2 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS_Pin;
 80005a8:	2310      	movs	r3, #16
 80005aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ac:	2301      	movs	r3, #1
 80005ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b4:	2303      	movs	r3, #3
 80005b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	4619      	mov	r1, r3
 80005be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c2:	f000 fda3 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 80005c6:	2301      	movs	r3, #1
 80005c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	4619      	mov	r1, r3
 80005da:	480f      	ldr	r0, [pc, #60]	; (8000618 <MX_GPIO_Init+0x118>)
 80005dc:	f000 fd96 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 80005e0:	2302      	movs	r3, #2
 80005e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e4:	2301      	movs	r3, #1
 80005e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ec:	2300      	movs	r3, #0
 80005ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	4619      	mov	r1, r3
 80005f6:	4808      	ldr	r0, [pc, #32]	; (8000618 <MX_GPIO_Init+0x118>)
 80005f8:	f000 fd88 	bl	800110c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2100      	movs	r1, #0
 8000600:	2006      	movs	r0, #6
 8000602:	f000 fbcc 	bl	8000d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000606:	2006      	movs	r0, #6
 8000608:	f000 fbe5 	bl	8000dd6 <HAL_NVIC_EnableIRQ>

}
 800060c:	bf00      	nop
 800060e:	3728      	adds	r7, #40	; 0x28
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40021000 	.word	0x40021000
 8000618:	48000400 	.word	0x48000400
 800061c:	48000800 	.word	0x48000800

08000620 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == DIO0_Pin)
 800062a:	88fb      	ldrh	r3, [r7, #6]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d101      	bne.n	8000634 <HAL_GPIO_EXTI_Callback+0x14>
	{
		loraDioCallBack();
 8000630:	f004 fbf4 	bl	8004e1c <loraDioCallBack>
	}
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <MX_IWDG_Init+0x34>)
 8000642:	4a0c      	ldr	r2, [pc, #48]	; (8000674 <MX_IWDG_Init+0x38>)
 8000644:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <MX_IWDG_Init+0x34>)
 8000648:	2202      	movs	r2, #2
 800064a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4000;
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <MX_IWDG_Init+0x34>)
 800064e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000652:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2000;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_IWDG_Init+0x34>)
 8000656:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800065a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <MX_IWDG_Init+0x34>)
 800065e:	f000 ff0f 	bl	8001480 <HAL_IWDG_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000668:	f000 f863 	bl	8000732 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	2000002c 	.word	0x2000002c
 8000674:	40003000 	.word	0x40003000

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067c:	f000 fa2a 	bl	8000ad4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000680:	f000 f810 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000684:	f7ff ff3c 	bl	8000500 <MX_GPIO_Init>
  MX_DMA_Init();
 8000688:	f7ff ff1c 	bl	80004c4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800068c:	f000 f952 	bl	8000934 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000690:	f000 f854 	bl	800073c <MX_SPI1_Init>
  MX_IWDG_Init();
 8000694:	f7ff ffd2 	bl	800063c <MX_IWDG_Init>
//
//	  tickTime = tick2 - tick1;
//	  HAL_Delay(40);


	  ugvMain();
 8000698:	f004 fb4c 	bl	8004d34 <ugvMain>
	  break;
 800069c:	bf00      	nop
 800069e:	2300      	movs	r3, #0
  }
  /* USER CODE END 3 */
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b090      	sub	sp, #64	; 0x40
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0318 	add.w	r3, r7, #24
 80006ae:	2228      	movs	r2, #40	; 0x28
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f004 fd16 	bl	80050e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80006c6:	2309      	movs	r3, #9
 80006c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006ca:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d4:	2301      	movs	r3, #1
 80006d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006d8:	2301      	movs	r3, #1
 80006da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006dc:	2302      	movs	r3, #2
 80006de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 0318 	add.w	r3, r7, #24
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 ff25 	bl	8001540 <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80006fc:	f000 f819 	bl	8000732 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000704:	2302      	movs	r3, #2
 8000706:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800070c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000710:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2102      	movs	r1, #2
 800071a:	4618      	mov	r0, r3
 800071c:	f001 ff4e 	bl	80025bc <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000726:	f000 f804 	bl	8000732 <Error_Handler>
  }
}
 800072a:	bf00      	nop
 800072c:	3740      	adds	r7, #64	; 0x40
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000736:	b672      	cpsid	i
}
 8000738:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800073a:	e7fe      	b.n	800073a <Error_Handler+0x8>

0800073c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000740:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000742:	4a1c      	ldr	r2, [pc, #112]	; (80007b4 <MX_SPI1_Init+0x78>)
 8000744:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000746:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000748:	f44f 7282 	mov.w	r2, #260	; 0x104
 800074c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000754:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000756:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800075a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_SPI1_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_SPI1_Init+0x74>)
 800076a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800076e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000772:	2218      	movs	r2, #24
 8000774:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_SPI1_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_SPI1_Init+0x74>)
 800078a:	2207      	movs	r2, #7
 800078c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000796:	2208      	movs	r2, #8
 8000798:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_SPI1_Init+0x74>)
 800079c:	f002 f944 	bl	8002a28 <HAL_SPI_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007a6:	f7ff ffc4 	bl	8000732 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	2000003c 	.word	0x2000003c
 80007b4:	40013000 	.word	0x40013000

080007b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	; 0x28
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a17      	ldr	r2, [pc, #92]	; (8000834 <HAL_SPI_MspInit+0x7c>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d128      	bne.n	800082c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <HAL_SPI_MspInit+0x80>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	4a16      	ldr	r2, [pc, #88]	; (8000838 <HAL_SPI_MspInit+0x80>)
 80007e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007e4:	6193      	str	r3, [r2, #24]
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <HAL_SPI_MspInit+0x80>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <HAL_SPI_MspInit+0x80>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	4a10      	ldr	r2, [pc, #64]	; (8000838 <HAL_SPI_MspInit+0x80>)
 80007f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007fc:	6153      	str	r3, [r2, #20]
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <HAL_SPI_MspInit+0x80>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800080a:	23e0      	movs	r3, #224	; 0xe0
 800080c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080e:	2302      	movs	r3, #2
 8000810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000816:	2303      	movs	r3, #3
 8000818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800081a:	2305      	movs	r3, #5
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000828:	f000 fc70 	bl	800110c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800082c:	bf00      	nop
 800082e:	3728      	adds	r7, #40	; 0x28
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40013000 	.word	0x40013000
 8000838:	40021000 	.word	0x40021000

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <HAL_MspInit+0x44>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <HAL_MspInit+0x44>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6193      	str	r3, [r2, #24]
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <HAL_MspInit+0x44>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <HAL_MspInit+0x44>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	4a08      	ldr	r2, [pc, #32]	; (8000880 <HAL_MspInit+0x44>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	61d3      	str	r3, [r2, #28]
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_MspInit+0x44>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000872:	2007      	movs	r0, #7
 8000874:	f000 fa88 	bl	8000d88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40021000 	.word	0x40021000

08000884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000888:	e7fe      	b.n	8000888 <NMI_Handler+0x4>

0800088a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088e:	e7fe      	b.n	800088e <HardFault_Handler+0x4>

08000890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <MemManage_Handler+0x4>

08000896 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <BusFault_Handler+0x4>

0800089c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <UsageFault_Handler+0x4>

080008a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d0:	f000 f946 	bl	8000b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 80008dc:	2001      	movs	r0, #1
 80008de:	f000 fdb7 	bl	8001450 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80008ec:	4802      	ldr	r0, [pc, #8]	; (80008f8 <DMA1_Channel7_IRQHandler+0x10>)
 80008ee:	f000 fb4a 	bl	8000f86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000128 	.word	0x20000128

080008fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000900:	4802      	ldr	r0, [pc, #8]	; (800090c <USART2_IRQHandler+0x10>)
 8000902:	f002 ff15 	bl	8003730 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200000a0 	.word	0x200000a0

08000910 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <SystemInit+0x20>)
 8000916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800091a:	4a05      	ldr	r2, [pc, #20]	; (8000930 <SystemInit+0x20>)
 800091c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <MX_USART2_UART_Init+0x58>)
 800093a:	4a15      	ldr	r2, [pc, #84]	; (8000990 <MX_USART2_UART_Init+0x5c>)
 800093c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800093e:	4b13      	ldr	r3, [pc, #76]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000944:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <MX_USART2_UART_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_USART2_UART_Init+0x58>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_USART2_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000978:	f002 fe02 	bl	8003580 <HAL_UART_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000982:	f7ff fed6 	bl	8000732 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200000a0 	.word	0x200000a0
 8000990:	40004400 	.word	0x40004400

08000994 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	; 0x28
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a2f      	ldr	r2, [pc, #188]	; (8000a70 <HAL_UART_MspInit+0xdc>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d157      	bne.n	8000a66 <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b6:	4b2f      	ldr	r3, [pc, #188]	; (8000a74 <HAL_UART_MspInit+0xe0>)
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	4a2e      	ldr	r2, [pc, #184]	; (8000a74 <HAL_UART_MspInit+0xe0>)
 80009bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c0:	61d3      	str	r3, [r2, #28]
 80009c2:	4b2c      	ldr	r3, [pc, #176]	; (8000a74 <HAL_UART_MspInit+0xe0>)
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	4b29      	ldr	r3, [pc, #164]	; (8000a74 <HAL_UART_MspInit+0xe0>)
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	4a28      	ldr	r2, [pc, #160]	; (8000a74 <HAL_UART_MspInit+0xe0>)
 80009d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d8:	6153      	str	r3, [r2, #20]
 80009da:	4b26      	ldr	r3, [pc, #152]	; (8000a74 <HAL_UART_MspInit+0xe0>)
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009e6:	230c      	movs	r3, #12
 80009e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009f6:	2307      	movs	r3, #7
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a04:	f000 fb82 	bl	800110c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <HAL_UART_MspInit+0xe4>)
 8000a0a:	4a1c      	ldr	r2, [pc, #112]	; (8000a7c <HAL_UART_MspInit+0xe8>)
 8000a0c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <HAL_UART_MspInit+0xe4>)
 8000a10:	2210      	movs	r2, #16
 8000a12:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a14:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <HAL_UART_MspInit+0xe4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a1a:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <HAL_UART_MspInit+0xe4>)
 8000a1c:	2280      	movs	r2, #128	; 0x80
 8000a1e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a20:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <HAL_UART_MspInit+0xe4>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <HAL_UART_MspInit+0xe4>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_UART_MspInit+0xe4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <HAL_UART_MspInit+0xe4>)
 8000a34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a38:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000a3a:	480f      	ldr	r0, [pc, #60]	; (8000a78 <HAL_UART_MspInit+0xe4>)
 8000a3c:	f000 f9e5 	bl	8000e0a <HAL_DMA_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8000a46:	f7ff fe74 	bl	8000732 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <HAL_UART_MspInit+0xe4>)
 8000a4e:	671a      	str	r2, [r3, #112]	; 0x70
 8000a50:	4a09      	ldr	r2, [pc, #36]	; (8000a78 <HAL_UART_MspInit+0xe4>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2026      	movs	r0, #38	; 0x26
 8000a5c:	f000 f99f 	bl	8000d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a60:	2026      	movs	r0, #38	; 0x26
 8000a62:	f000 f9b8 	bl	8000dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a66:	bf00      	nop
 8000a68:	3728      	adds	r7, #40	; 0x28
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40004400 	.word	0x40004400
 8000a74:	40021000 	.word	0x40021000
 8000a78:	20000128 	.word	0x20000128
 8000a7c:	40020080 	.word	0x40020080

08000a80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a84:	f7ff ff44 	bl	8000910 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a88:	480c      	ldr	r0, [pc, #48]	; (8000abc <LoopForever+0x6>)
  ldr r1, =_edata
 8000a8a:	490d      	ldr	r1, [pc, #52]	; (8000ac0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ac4 <LoopForever+0xe>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a90:	e002      	b.n	8000a98 <LoopCopyDataInit>

08000a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a96:	3304      	adds	r3, #4

08000a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a9c:	d3f9      	bcc.n	8000a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ac8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aa0:	4c0a      	ldr	r4, [pc, #40]	; (8000acc <LoopForever+0x16>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa4:	e001      	b.n	8000aaa <LoopFillZerobss>

08000aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa8:	3204      	adds	r2, #4

08000aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aac:	d3fb      	bcc.n	8000aa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aae:	f004 fb21 	bl	80050f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ab2:	f7ff fde1 	bl	8000678 <main>

08000ab6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ab6:	e7fe      	b.n	8000ab6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ab8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ac4:	080051d8 	.word	0x080051d8
  ldr r2, =_sbss
 8000ac8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000acc:	20000500 	.word	0x20000500

08000ad0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ad0:	e7fe      	b.n	8000ad0 <ADC1_2_IRQHandler>
	...

08000ad4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <HAL_Init+0x28>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a07      	ldr	r2, [pc, #28]	; (8000afc <HAL_Init+0x28>)
 8000ade:	f043 0310 	orr.w	r3, r3, #16
 8000ae2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae4:	2003      	movs	r0, #3
 8000ae6:	f000 f94f 	bl	8000d88 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aea:	2000      	movs	r0, #0
 8000aec:	f000 f808 	bl	8000b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af0:	f7ff fea4 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40022000 	.word	0x40022000

08000b00 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <HAL_InitTick+0x54>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <HAL_InitTick+0x58>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	4619      	mov	r1, r3
 8000b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 f967 	bl	8000df2 <HAL_SYSTICK_Config>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e00e      	b.n	8000b4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b0f      	cmp	r3, #15
 8000b32:	d80a      	bhi.n	8000b4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b34:	2200      	movs	r2, #0
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	f000 f92f 	bl	8000d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b40:	4a06      	ldr	r2, [pc, #24]	; (8000b5c <HAL_InitTick+0x5c>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b46:	2300      	movs	r3, #0
 8000b48:	e000      	b.n	8000b4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000000 	.word	0x20000000
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	20000004 	.word	0x20000004

08000b60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_IncTick+0x20>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_IncTick+0x24>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <HAL_IncTick+0x24>)
 8000b72:	6013      	str	r3, [r2, #0]
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000008 	.word	0x20000008
 8000b84:	2000016c 	.word	0x2000016c

08000b88 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b8c:	4b03      	ldr	r3, [pc, #12]	; (8000b9c <HAL_GetTick+0x14>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	2000016c 	.word	0x2000016c

08000ba0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ba8:	f7ff ffee 	bl	8000b88 <HAL_GetTick>
 8000bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bb8:	d005      	beq.n	8000bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bba:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <HAL_Delay+0x44>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000bc6:	bf00      	nop
 8000bc8:	f7ff ffde 	bl	8000b88 <HAL_GetTick>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d8f7      	bhi.n	8000bc8 <HAL_Delay+0x28>
  {
  }
}
 8000bd8:	bf00      	nop
 8000bda:	bf00      	nop
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000008 	.word	0x20000008

08000be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c04:	4013      	ands	r3, r2
 8000c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1a:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	60d3      	str	r3, [r2, #12]
}
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c34:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <__NVIC_GetPriorityGrouping+0x18>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	0a1b      	lsrs	r3, r3, #8
 8000c3a:	f003 0307 	and.w	r3, r3, #7
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	db0b      	blt.n	8000c76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	f003 021f 	and.w	r2, r3, #31
 8000c64:	4907      	ldr	r1, [pc, #28]	; (8000c84 <__NVIC_EnableIRQ+0x38>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	095b      	lsrs	r3, r3, #5
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000e100 	.word	0xe000e100

08000c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	db0a      	blt.n	8000cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	490c      	ldr	r1, [pc, #48]	; (8000cd4 <__NVIC_SetPriority+0x4c>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	0112      	lsls	r2, r2, #4
 8000ca8:	b2d2      	uxtb	r2, r2
 8000caa:	440b      	add	r3, r1
 8000cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb0:	e00a      	b.n	8000cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4908      	ldr	r1, [pc, #32]	; (8000cd8 <__NVIC_SetPriority+0x50>)
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	f003 030f 	and.w	r3, r3, #15
 8000cbe:	3b04      	subs	r3, #4
 8000cc0:	0112      	lsls	r2, r2, #4
 8000cc2:	b2d2      	uxtb	r2, r2
 8000cc4:	440b      	add	r3, r1
 8000cc6:	761a      	strb	r2, [r3, #24]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000e100 	.word	0xe000e100
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b089      	sub	sp, #36	; 0x24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	f1c3 0307 	rsb	r3, r3, #7
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	bf28      	it	cs
 8000cfa:	2304      	movcs	r3, #4
 8000cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3304      	adds	r3, #4
 8000d02:	2b06      	cmp	r3, #6
 8000d04:	d902      	bls.n	8000d0c <NVIC_EncodePriority+0x30>
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3b03      	subs	r3, #3
 8000d0a:	e000      	b.n	8000d0e <NVIC_EncodePriority+0x32>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	f04f 32ff 	mov.w	r2, #4294967295
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	401a      	ands	r2, r3
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d24:	f04f 31ff 	mov.w	r1, #4294967295
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	43d9      	mvns	r1, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	4313      	orrs	r3, r2
         );
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3724      	adds	r7, #36	; 0x24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
	...

08000d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d54:	d301      	bcc.n	8000d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d56:	2301      	movs	r3, #1
 8000d58:	e00f      	b.n	8000d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <SysTick_Config+0x40>)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d62:	210f      	movs	r1, #15
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295
 8000d68:	f7ff ff8e 	bl	8000c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <SysTick_Config+0x40>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d72:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <SysTick_Config+0x40>)
 8000d74:	2207      	movs	r2, #7
 8000d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	e000e010 	.word	0xe000e010

08000d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff ff29 	bl	8000be8 <__NVIC_SetPriorityGrouping>
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b086      	sub	sp, #24
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	4603      	mov	r3, r0
 8000da6:	60b9      	str	r1, [r7, #8]
 8000da8:	607a      	str	r2, [r7, #4]
 8000daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db0:	f7ff ff3e 	bl	8000c30 <__NVIC_GetPriorityGrouping>
 8000db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	68b9      	ldr	r1, [r7, #8]
 8000dba:	6978      	ldr	r0, [r7, #20]
 8000dbc:	f7ff ff8e 	bl	8000cdc <NVIC_EncodePriority>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff5d 	bl	8000c88 <__NVIC_SetPriority>
}
 8000dce:	bf00      	nop
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4603      	mov	r3, r0
 8000dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff31 	bl	8000c4c <__NVIC_EnableIRQ>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff ffa2 	bl	8000d44 <SysTick_Config>
 8000e00:	4603      	mov	r3, r0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b084      	sub	sp, #16
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d101      	bne.n	8000e20 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e037      	b.n	8000e90 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2202      	movs	r2, #2
 8000e24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000e36:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e3a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e64:	68fa      	ldr	r2, [r7, #12]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f000 f92a 	bl	80010cc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2201      	movs	r2, #1
 8000e82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000e8e:	2300      	movs	r3, #0
}  
 8000e90:	4618      	mov	r0, r3
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d008      	beq.n	8000ebc <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2204      	movs	r2, #4
 8000eae:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e020      	b.n	8000efe <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f022 020e 	bic.w	r2, r2, #14
 8000eca:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f022 0201 	bic.w	r2, r2, #1
 8000eda:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eea:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2201      	movs	r2, #1
 8000ef0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b084      	sub	sp, #16
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f12:	2300      	movs	r3, #0
 8000f14:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d005      	beq.n	8000f2c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2204      	movs	r2, #4
 8000f24:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	73fb      	strb	r3, [r7, #15]
 8000f2a:	e027      	b.n	8000f7c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f022 020e 	bic.w	r2, r2, #14
 8000f3a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f022 0201 	bic.w	r2, r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f54:	2101      	movs	r1, #1
 8000f56:	fa01 f202 	lsl.w	r2, r1, r2
 8000f5a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d003      	beq.n	8000f7c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	4798      	blx	r3
    } 
  }
  return status;
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b084      	sub	sp, #16
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	2204      	movs	r2, #4
 8000fa4:	409a      	lsls	r2, r3
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d024      	beq.n	8000ff8 <HAL_DMA_IRQHandler+0x72>
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	f003 0304 	and.w	r3, r3, #4
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d01f      	beq.n	8000ff8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0320 	and.w	r3, r3, #32
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d107      	bne.n	8000fd6 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f022 0204 	bic.w	r2, r2, #4
 8000fd4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fde:	2104      	movs	r1, #4
 8000fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d06a      	beq.n	80010c4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000ff6:	e065      	b.n	80010c4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	409a      	lsls	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4013      	ands	r3, r2
 8001004:	2b00      	cmp	r3, #0
 8001006:	d02c      	beq.n	8001062 <HAL_DMA_IRQHandler+0xdc>
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	2b00      	cmp	r3, #0
 8001010:	d027      	beq.n	8001062 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0320 	and.w	r3, r3, #32
 800101c:	2b00      	cmp	r3, #0
 800101e:	d10b      	bne.n	8001038 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f022 020a 	bic.w	r2, r2, #10
 800102e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2201      	movs	r2, #1
 8001034:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001040:	2102      	movs	r1, #2
 8001042:	fa01 f202 	lsl.w	r2, r1, r2
 8001046:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001054:	2b00      	cmp	r3, #0
 8001056:	d035      	beq.n	80010c4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001060:	e030      	b.n	80010c4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	2208      	movs	r2, #8
 8001068:	409a      	lsls	r2, r3
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4013      	ands	r3, r2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d028      	beq.n	80010c4 <HAL_DMA_IRQHandler+0x13e>
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	f003 0308 	and.w	r3, r3, #8
 8001078:	2b00      	cmp	r3, #0
 800107a:	d023      	beq.n	80010c4 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f022 020e 	bic.w	r2, r2, #14
 800108a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001094:	2101      	movs	r1, #1
 8001096:	fa01 f202 	lsl.w	r2, r1, r2
 800109a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2201      	movs	r2, #1
 80010a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2201      	movs	r2, #1
 80010a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d004      	beq.n	80010c4 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	4798      	blx	r3
    }
  }
}  
 80010c2:	e7ff      	b.n	80010c4 <HAL_DMA_IRQHandler+0x13e>
 80010c4:	bf00      	nop
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <DMA_CalcBaseAndBitshift+0x34>)
 80010dc:	4413      	add	r3, r2
 80010de:	4a09      	ldr	r2, [pc, #36]	; (8001104 <DMA_CalcBaseAndBitshift+0x38>)
 80010e0:	fba2 2303 	umull	r2, r3, r2, r3
 80010e4:	091b      	lsrs	r3, r3, #4
 80010e6:	009a      	lsls	r2, r3, #2
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a06      	ldr	r2, [pc, #24]	; (8001108 <DMA_CalcBaseAndBitshift+0x3c>)
 80010f0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	bffdfff8 	.word	0xbffdfff8
 8001104:	cccccccd 	.word	0xcccccccd
 8001108:	40020000 	.word	0x40020000

0800110c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800110c:	b480      	push	{r7}
 800110e:	b087      	sub	sp, #28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111a:	e14e      	b.n	80013ba <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	2101      	movs	r1, #1
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	fa01 f303 	lsl.w	r3, r1, r3
 8001128:	4013      	ands	r3, r2
 800112a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	f000 8140 	beq.w	80013b4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b01      	cmp	r3, #1
 800113e:	d005      	beq.n	800114c <HAL_GPIO_Init+0x40>
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d130      	bne.n	80011ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	2203      	movs	r2, #3
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001182:	2201      	movs	r2, #1
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	091b      	lsrs	r3, r3, #4
 8001198:	f003 0201 	and.w	r2, r3, #1
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 0303 	and.w	r3, r3, #3
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	d017      	beq.n	80011ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2203      	movs	r2, #3
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	689a      	ldr	r2, [r3, #8]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d123      	bne.n	800123e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	08da      	lsrs	r2, r3, #3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3208      	adds	r2, #8
 80011fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001202:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	220f      	movs	r2, #15
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	691a      	ldr	r2, [r3, #16]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	f003 0307 	and.w	r3, r3, #7
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	08da      	lsrs	r2, r3, #3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3208      	adds	r2, #8
 8001238:	6939      	ldr	r1, [r7, #16]
 800123a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	2203      	movs	r2, #3
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f003 0203 	and.w	r2, r3, #3
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 809a 	beq.w	80013b4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001280:	4b55      	ldr	r3, [pc, #340]	; (80013d8 <HAL_GPIO_Init+0x2cc>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4a54      	ldr	r2, [pc, #336]	; (80013d8 <HAL_GPIO_Init+0x2cc>)
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	6193      	str	r3, [r2, #24]
 800128c:	4b52      	ldr	r3, [pc, #328]	; (80013d8 <HAL_GPIO_Init+0x2cc>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001298:	4a50      	ldr	r2, [pc, #320]	; (80013dc <HAL_GPIO_Init+0x2d0>)
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	089b      	lsrs	r3, r3, #2
 800129e:	3302      	adds	r3, #2
 80012a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	220f      	movs	r2, #15
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012c2:	d013      	beq.n	80012ec <HAL_GPIO_Init+0x1e0>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a46      	ldr	r2, [pc, #280]	; (80013e0 <HAL_GPIO_Init+0x2d4>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d00d      	beq.n	80012e8 <HAL_GPIO_Init+0x1dc>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a45      	ldr	r2, [pc, #276]	; (80013e4 <HAL_GPIO_Init+0x2d8>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d007      	beq.n	80012e4 <HAL_GPIO_Init+0x1d8>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a44      	ldr	r2, [pc, #272]	; (80013e8 <HAL_GPIO_Init+0x2dc>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d101      	bne.n	80012e0 <HAL_GPIO_Init+0x1d4>
 80012dc:	2303      	movs	r3, #3
 80012de:	e006      	b.n	80012ee <HAL_GPIO_Init+0x1e2>
 80012e0:	2305      	movs	r3, #5
 80012e2:	e004      	b.n	80012ee <HAL_GPIO_Init+0x1e2>
 80012e4:	2302      	movs	r3, #2
 80012e6:	e002      	b.n	80012ee <HAL_GPIO_Init+0x1e2>
 80012e8:	2301      	movs	r3, #1
 80012ea:	e000      	b.n	80012ee <HAL_GPIO_Init+0x1e2>
 80012ec:	2300      	movs	r3, #0
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	f002 0203 	and.w	r2, r2, #3
 80012f4:	0092      	lsls	r2, r2, #2
 80012f6:	4093      	lsls	r3, r2
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012fe:	4937      	ldr	r1, [pc, #220]	; (80013dc <HAL_GPIO_Init+0x2d0>)
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	089b      	lsrs	r3, r3, #2
 8001304:	3302      	adds	r3, #2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800130c:	4b37      	ldr	r3, [pc, #220]	; (80013ec <HAL_GPIO_Init+0x2e0>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	43db      	mvns	r3, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001330:	4a2e      	ldr	r2, [pc, #184]	; (80013ec <HAL_GPIO_Init+0x2e0>)
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001336:	4b2d      	ldr	r3, [pc, #180]	; (80013ec <HAL_GPIO_Init+0x2e0>)
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	43db      	mvns	r3, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4313      	orrs	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800135a:	4a24      	ldr	r2, [pc, #144]	; (80013ec <HAL_GPIO_Init+0x2e0>)
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001360:	4b22      	ldr	r3, [pc, #136]	; (80013ec <HAL_GPIO_Init+0x2e0>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	43db      	mvns	r3, r3
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4013      	ands	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d003      	beq.n	8001384 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	4313      	orrs	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001384:	4a19      	ldr	r2, [pc, #100]	; (80013ec <HAL_GPIO_Init+0x2e0>)
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800138a:	4b18      	ldr	r3, [pc, #96]	; (80013ec <HAL_GPIO_Init+0x2e0>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	43db      	mvns	r3, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013ae:	4a0f      	ldr	r2, [pc, #60]	; (80013ec <HAL_GPIO_Init+0x2e0>)
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	3301      	adds	r3, #1
 80013b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	fa22 f303 	lsr.w	r3, r2, r3
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f47f aea9 	bne.w	800111c <HAL_GPIO_Init+0x10>
  }
}
 80013ca:	bf00      	nop
 80013cc:	bf00      	nop
 80013ce:	371c      	adds	r7, #28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40010000 	.word	0x40010000
 80013e0:	48000400 	.word	0x48000400
 80013e4:	48000800 	.word	0x48000800
 80013e8:	48000c00 	.word	0x48000c00
 80013ec:	40010400 	.word	0x40010400

080013f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	691a      	ldr	r2, [r3, #16]
 8001400:	887b      	ldrh	r3, [r7, #2]
 8001402:	4013      	ands	r3, r2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d002      	beq.n	800140e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001408:	2301      	movs	r3, #1
 800140a:	73fb      	strb	r3, [r7, #15]
 800140c:	e001      	b.n	8001412 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800140e:	2300      	movs	r3, #0
 8001410:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001412:	7bfb      	ldrb	r3, [r7, #15]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	807b      	strh	r3, [r7, #2]
 800142c:	4613      	mov	r3, r2
 800142e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001430:	787b      	ldrb	r3, [r7, #1]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001436:	887a      	ldrh	r2, [r7, #2]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800143c:	e002      	b.n	8001444 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800143e:	887a      	ldrh	r2, [r7, #2]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800145c:	695a      	ldr	r2, [r3, #20]
 800145e:	88fb      	ldrh	r3, [r7, #6]
 8001460:	4013      	ands	r3, r2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d006      	beq.n	8001474 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001466:	4a05      	ldr	r2, [pc, #20]	; (800147c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001468:	88fb      	ldrh	r3, [r7, #6]
 800146a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800146c:	88fb      	ldrh	r3, [r7, #6]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f8d6 	bl	8000620 <HAL_GPIO_EXTI_Callback>
  }
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40010400 	.word	0x40010400

08001480 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e041      	b.n	8001516 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800149a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f245 5255 	movw	r2, #21845	; 0x5555
 80014a4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6852      	ldr	r2, [r2, #4]
 80014ae:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	6892      	ldr	r2, [r2, #8]
 80014b8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80014ba:	f7ff fb65 	bl	8000b88 <HAL_GetTick>
 80014be:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80014c0:	e00f      	b.n	80014e2 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80014c2:	f7ff fb61 	bl	8000b88 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b27      	cmp	r3, #39	; 0x27
 80014ce:	d908      	bls.n	80014e2 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e019      	b.n	8001516 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	f003 0307 	and.w	r3, r3, #7
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1e8      	bne.n	80014c2 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	691a      	ldr	r2, [r3, #16]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d005      	beq.n	800150a <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	68d2      	ldr	r2, [r2, #12]
 8001506:	611a      	str	r2, [r3, #16]
 8001508:	e004      	b.n	8001514 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001512:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800152e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001546:	af00      	add	r7, sp, #0
 8001548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800154c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001550:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001556:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d102      	bne.n	8001566 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	f001 b823 	b.w	80025ac <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800156a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 817d 	beq.w	8001876 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800157c:	4bbc      	ldr	r3, [pc, #752]	; (8001870 <HAL_RCC_OscConfig+0x330>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 030c 	and.w	r3, r3, #12
 8001584:	2b04      	cmp	r3, #4
 8001586:	d00c      	beq.n	80015a2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001588:	4bb9      	ldr	r3, [pc, #740]	; (8001870 <HAL_RCC_OscConfig+0x330>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 030c 	and.w	r3, r3, #12
 8001590:	2b08      	cmp	r3, #8
 8001592:	d15c      	bne.n	800164e <HAL_RCC_OscConfig+0x10e>
 8001594:	4bb6      	ldr	r3, [pc, #728]	; (8001870 <HAL_RCC_OscConfig+0x330>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800159c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a0:	d155      	bne.n	800164e <HAL_RCC_OscConfig+0x10e>
 80015a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015a6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015aa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80015ae:	fa93 f3a3 	rbit	r3, r3
 80015b2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015b6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ba:	fab3 f383 	clz	r3, r3
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	095b      	lsrs	r3, r3, #5
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d102      	bne.n	80015d4 <HAL_RCC_OscConfig+0x94>
 80015ce:	4ba8      	ldr	r3, [pc, #672]	; (8001870 <HAL_RCC_OscConfig+0x330>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	e015      	b.n	8001600 <HAL_RCC_OscConfig+0xc0>
 80015d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015d8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015dc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80015e0:	fa93 f3a3 	rbit	r3, r3
 80015e4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80015e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015ec:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80015f0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80015f4:	fa93 f3a3 	rbit	r3, r3
 80015f8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80015fc:	4b9c      	ldr	r3, [pc, #624]	; (8001870 <HAL_RCC_OscConfig+0x330>)
 80015fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001600:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001604:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001608:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800160c:	fa92 f2a2 	rbit	r2, r2
 8001610:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001614:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001618:	fab2 f282 	clz	r2, r2
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	f042 0220 	orr.w	r2, r2, #32
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	f002 021f 	and.w	r2, r2, #31
 8001628:	2101      	movs	r1, #1
 800162a:	fa01 f202 	lsl.w	r2, r1, r2
 800162e:	4013      	ands	r3, r2
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 811f 	beq.w	8001874 <HAL_RCC_OscConfig+0x334>
 8001636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800163a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	f040 8116 	bne.w	8001874 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	f000 bfaf 	b.w	80025ac <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800164e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001652:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800165e:	d106      	bne.n	800166e <HAL_RCC_OscConfig+0x12e>
 8001660:	4b83      	ldr	r3, [pc, #524]	; (8001870 <HAL_RCC_OscConfig+0x330>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a82      	ldr	r2, [pc, #520]	; (8001870 <HAL_RCC_OscConfig+0x330>)
 8001666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	e036      	b.n	80016dc <HAL_RCC_OscConfig+0x19c>
 800166e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001672:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10c      	bne.n	8001698 <HAL_RCC_OscConfig+0x158>
 800167e:	4b7c      	ldr	r3, [pc, #496]	; (8001870 <HAL_RCC_OscConfig+0x330>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a7b      	ldr	r2, [pc, #492]	; (8001870 <HAL_RCC_OscConfig+0x330>)
 8001684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	4b79      	ldr	r3, [pc, #484]	; (8001870 <HAL_RCC_OscConfig+0x330>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a78      	ldr	r2, [pc, #480]	; (8001870 <HAL_RCC_OscConfig+0x330>)
 8001690:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	e021      	b.n	80016dc <HAL_RCC_OscConfig+0x19c>
 8001698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016a8:	d10c      	bne.n	80016c4 <HAL_RCC_OscConfig+0x184>
 80016aa:	4b71      	ldr	r3, [pc, #452]	; (8001870 <HAL_RCC_OscConfig+0x330>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a70      	ldr	r2, [pc, #448]	; (8001870 <HAL_RCC_OscConfig+0x330>)
 80016b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	4b6e      	ldr	r3, [pc, #440]	; (8001870 <HAL_RCC_OscConfig+0x330>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a6d      	ldr	r2, [pc, #436]	; (8001870 <HAL_RCC_OscConfig+0x330>)
 80016bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	e00b      	b.n	80016dc <HAL_RCC_OscConfig+0x19c>
 80016c4:	4b6a      	ldr	r3, [pc, #424]	; (8001870 <HAL_RCC_OscConfig+0x330>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a69      	ldr	r2, [pc, #420]	; (8001870 <HAL_RCC_OscConfig+0x330>)
 80016ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	4b67      	ldr	r3, [pc, #412]	; (8001870 <HAL_RCC_OscConfig+0x330>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a66      	ldr	r2, [pc, #408]	; (8001870 <HAL_RCC_OscConfig+0x330>)
 80016d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016da:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016dc:	4b64      	ldr	r3, [pc, #400]	; (8001870 <HAL_RCC_OscConfig+0x330>)
 80016de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e0:	f023 020f 	bic.w	r2, r3, #15
 80016e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	495f      	ldr	r1, [pc, #380]	; (8001870 <HAL_RCC_OscConfig+0x330>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d059      	beq.n	80017ba <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001706:	f7ff fa3f 	bl	8000b88 <HAL_GetTick>
 800170a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170e:	e00a      	b.n	8001726 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001710:	f7ff fa3a 	bl	8000b88 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b64      	cmp	r3, #100	; 0x64
 800171e:	d902      	bls.n	8001726 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	f000 bf43 	b.w	80025ac <HAL_RCC_OscConfig+0x106c>
 8001726:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800172a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001732:	fa93 f3a3 	rbit	r3, r3
 8001736:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800173a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173e:	fab3 f383 	clz	r3, r3
 8001742:	b2db      	uxtb	r3, r3
 8001744:	095b      	lsrs	r3, r3, #5
 8001746:	b2db      	uxtb	r3, r3
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b01      	cmp	r3, #1
 8001750:	d102      	bne.n	8001758 <HAL_RCC_OscConfig+0x218>
 8001752:	4b47      	ldr	r3, [pc, #284]	; (8001870 <HAL_RCC_OscConfig+0x330>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	e015      	b.n	8001784 <HAL_RCC_OscConfig+0x244>
 8001758:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800175c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001760:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001764:	fa93 f3a3 	rbit	r3, r3
 8001768:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800176c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001770:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001774:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001778:	fa93 f3a3 	rbit	r3, r3
 800177c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001780:	4b3b      	ldr	r3, [pc, #236]	; (8001870 <HAL_RCC_OscConfig+0x330>)
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001788:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800178c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001790:	fa92 f2a2 	rbit	r2, r2
 8001794:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001798:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800179c:	fab2 f282 	clz	r2, r2
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	f042 0220 	orr.w	r2, r2, #32
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	f002 021f 	and.w	r2, r2, #31
 80017ac:	2101      	movs	r1, #1
 80017ae:	fa01 f202 	lsl.w	r2, r1, r2
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0ab      	beq.n	8001710 <HAL_RCC_OscConfig+0x1d0>
 80017b8:	e05d      	b.n	8001876 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ba:	f7ff f9e5 	bl	8000b88 <HAL_GetTick>
 80017be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017c2:	e00a      	b.n	80017da <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017c4:	f7ff f9e0 	bl	8000b88 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b64      	cmp	r3, #100	; 0x64
 80017d2:	d902      	bls.n	80017da <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	f000 bee9 	b.w	80025ac <HAL_RCC_OscConfig+0x106c>
 80017da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017de:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80017e6:	fa93 f3a3 	rbit	r3, r3
 80017ea:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80017ee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f2:	fab3 f383 	clz	r3, r3
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	095b      	lsrs	r3, r3, #5
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b01      	cmp	r3, #1
 8001804:	d102      	bne.n	800180c <HAL_RCC_OscConfig+0x2cc>
 8001806:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <HAL_RCC_OscConfig+0x330>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	e015      	b.n	8001838 <HAL_RCC_OscConfig+0x2f8>
 800180c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001810:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001814:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001818:	fa93 f3a3 	rbit	r3, r3
 800181c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001820:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001824:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001828:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800182c:	fa93 f3a3 	rbit	r3, r3
 8001830:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001834:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <HAL_RCC_OscConfig+0x330>)
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800183c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001840:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001844:	fa92 f2a2 	rbit	r2, r2
 8001848:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800184c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001850:	fab2 f282 	clz	r2, r2
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	f042 0220 	orr.w	r2, r2, #32
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	f002 021f 	and.w	r2, r2, #31
 8001860:	2101      	movs	r1, #1
 8001862:	fa01 f202 	lsl.w	r2, r1, r2
 8001866:	4013      	ands	r3, r2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1ab      	bne.n	80017c4 <HAL_RCC_OscConfig+0x284>
 800186c:	e003      	b.n	8001876 <HAL_RCC_OscConfig+0x336>
 800186e:	bf00      	nop
 8001870:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 817d 	beq.w	8001b86 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800188c:	4ba6      	ldr	r3, [pc, #664]	; (8001b28 <HAL_RCC_OscConfig+0x5e8>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 030c 	and.w	r3, r3, #12
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00b      	beq.n	80018b0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001898:	4ba3      	ldr	r3, [pc, #652]	; (8001b28 <HAL_RCC_OscConfig+0x5e8>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 030c 	and.w	r3, r3, #12
 80018a0:	2b08      	cmp	r3, #8
 80018a2:	d172      	bne.n	800198a <HAL_RCC_OscConfig+0x44a>
 80018a4:	4ba0      	ldr	r3, [pc, #640]	; (8001b28 <HAL_RCC_OscConfig+0x5e8>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d16c      	bne.n	800198a <HAL_RCC_OscConfig+0x44a>
 80018b0:	2302      	movs	r3, #2
 80018b2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80018ba:	fa93 f3a3 	rbit	r3, r3
 80018be:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80018c2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c6:	fab3 f383 	clz	r3, r3
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	095b      	lsrs	r3, r3, #5
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d102      	bne.n	80018e0 <HAL_RCC_OscConfig+0x3a0>
 80018da:	4b93      	ldr	r3, [pc, #588]	; (8001b28 <HAL_RCC_OscConfig+0x5e8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	e013      	b.n	8001908 <HAL_RCC_OscConfig+0x3c8>
 80018e0:	2302      	movs	r3, #2
 80018e2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80018ea:	fa93 f3a3 	rbit	r3, r3
 80018ee:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80018f2:	2302      	movs	r3, #2
 80018f4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80018f8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80018fc:	fa93 f3a3 	rbit	r3, r3
 8001900:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001904:	4b88      	ldr	r3, [pc, #544]	; (8001b28 <HAL_RCC_OscConfig+0x5e8>)
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	2202      	movs	r2, #2
 800190a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800190e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001912:	fa92 f2a2 	rbit	r2, r2
 8001916:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800191a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800191e:	fab2 f282 	clz	r2, r2
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	f042 0220 	orr.w	r2, r2, #32
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	f002 021f 	and.w	r2, r2, #31
 800192e:	2101      	movs	r1, #1
 8001930:	fa01 f202 	lsl.w	r2, r1, r2
 8001934:	4013      	ands	r3, r2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00a      	beq.n	8001950 <HAL_RCC_OscConfig+0x410>
 800193a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d002      	beq.n	8001950 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	f000 be2e 	b.w	80025ac <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001950:	4b75      	ldr	r3, [pc, #468]	; (8001b28 <HAL_RCC_OscConfig+0x5e8>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800195c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	21f8      	movs	r1, #248	; 0xf8
 8001966:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800196e:	fa91 f1a1 	rbit	r1, r1
 8001972:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001976:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800197a:	fab1 f181 	clz	r1, r1
 800197e:	b2c9      	uxtb	r1, r1
 8001980:	408b      	lsls	r3, r1
 8001982:	4969      	ldr	r1, [pc, #420]	; (8001b28 <HAL_RCC_OscConfig+0x5e8>)
 8001984:	4313      	orrs	r3, r2
 8001986:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001988:	e0fd      	b.n	8001b86 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800198a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 8088 	beq.w	8001aac <HAL_RCC_OscConfig+0x56c>
 800199c:	2301      	movs	r3, #1
 800199e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80019a6:	fa93 f3a3 	rbit	r3, r3
 80019aa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80019ae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019b2:	fab3 f383 	clz	r3, r3
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	461a      	mov	r2, r3
 80019c4:	2301      	movs	r3, #1
 80019c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7ff f8de 	bl	8000b88 <HAL_GetTick>
 80019cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d0:	e00a      	b.n	80019e8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d2:	f7ff f8d9 	bl	8000b88 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d902      	bls.n	80019e8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	f000 bde2 	b.w	80025ac <HAL_RCC_OscConfig+0x106c>
 80019e8:	2302      	movs	r3, #2
 80019ea:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80019f2:	fa93 f3a3 	rbit	r3, r3
 80019f6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80019fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fe:	fab3 f383 	clz	r3, r3
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	095b      	lsrs	r3, r3, #5
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d102      	bne.n	8001a18 <HAL_RCC_OscConfig+0x4d8>
 8001a12:	4b45      	ldr	r3, [pc, #276]	; (8001b28 <HAL_RCC_OscConfig+0x5e8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	e013      	b.n	8001a40 <HAL_RCC_OscConfig+0x500>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001a22:	fa93 f3a3 	rbit	r3, r3
 8001a26:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001a30:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001a34:	fa93 f3a3 	rbit	r3, r3
 8001a38:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001a3c:	4b3a      	ldr	r3, [pc, #232]	; (8001b28 <HAL_RCC_OscConfig+0x5e8>)
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a40:	2202      	movs	r2, #2
 8001a42:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001a46:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001a4a:	fa92 f2a2 	rbit	r2, r2
 8001a4e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001a52:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001a56:	fab2 f282 	clz	r2, r2
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	f042 0220 	orr.w	r2, r2, #32
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	f002 021f 	and.w	r2, r2, #31
 8001a66:	2101      	movs	r1, #1
 8001a68:	fa01 f202 	lsl.w	r2, r1, r2
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0af      	beq.n	80019d2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a72:	4b2d      	ldr	r3, [pc, #180]	; (8001b28 <HAL_RCC_OscConfig+0x5e8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	21f8      	movs	r1, #248	; 0xf8
 8001a88:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001a90:	fa91 f1a1 	rbit	r1, r1
 8001a94:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001a98:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001a9c:	fab1 f181 	clz	r1, r1
 8001aa0:	b2c9      	uxtb	r1, r1
 8001aa2:	408b      	lsls	r3, r1
 8001aa4:	4920      	ldr	r1, [pc, #128]	; (8001b28 <HAL_RCC_OscConfig+0x5e8>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]
 8001aaa:	e06c      	b.n	8001b86 <HAL_RCC_OscConfig+0x646>
 8001aac:	2301      	movs	r3, #1
 8001aae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001ab6:	fa93 f3a3 	rbit	r3, r3
 8001aba:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001abe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ac2:	fab3 f383 	clz	r3, r3
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001acc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad8:	f7ff f856 	bl	8000b88 <HAL_GetTick>
 8001adc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ae0:	e00a      	b.n	8001af8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ae2:	f7ff f851 	bl	8000b88 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d902      	bls.n	8001af8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	f000 bd5a 	b.w	80025ac <HAL_RCC_OscConfig+0x106c>
 8001af8:	2302      	movs	r3, #2
 8001afa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001b02:	fa93 f3a3 	rbit	r3, r3
 8001b06:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001b0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0e:	fab3 f383 	clz	r3, r3
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	095b      	lsrs	r3, r3, #5
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d104      	bne.n	8001b2c <HAL_RCC_OscConfig+0x5ec>
 8001b22:	4b01      	ldr	r3, [pc, #4]	; (8001b28 <HAL_RCC_OscConfig+0x5e8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	e015      	b.n	8001b54 <HAL_RCC_OscConfig+0x614>
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001b36:	fa93 f3a3 	rbit	r3, r3
 8001b3a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001b3e:	2302      	movs	r3, #2
 8001b40:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001b44:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001b48:	fa93 f3a3 	rbit	r3, r3
 8001b4c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001b50:	4bc8      	ldr	r3, [pc, #800]	; (8001e74 <HAL_RCC_OscConfig+0x934>)
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	2202      	movs	r2, #2
 8001b56:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001b5a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001b5e:	fa92 f2a2 	rbit	r2, r2
 8001b62:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001b66:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001b6a:	fab2 f282 	clz	r2, r2
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	f042 0220 	orr.w	r2, r2, #32
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	f002 021f 	and.w	r2, r2, #31
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b80:	4013      	ands	r3, r2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1ad      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 8110 	beq.w	8001dbc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d079      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x760>
 8001bac:	2301      	movs	r3, #1
 8001bae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001bb6:	fa93 f3a3 	rbit	r3, r3
 8001bba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001bbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bc2:	fab3 f383 	clz	r3, r3
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4bab      	ldr	r3, [pc, #684]	; (8001e78 <HAL_RCC_OscConfig+0x938>)
 8001bcc:	4413      	add	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd6:	f7fe ffd7 	bl	8000b88 <HAL_GetTick>
 8001bda:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bde:	e00a      	b.n	8001bf6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001be0:	f7fe ffd2 	bl	8000b88 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d902      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	f000 bcdb 	b.w	80025ac <HAL_RCC_OscConfig+0x106c>
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001c00:	fa93 f3a3 	rbit	r3, r3
 8001c04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c10:	2202      	movs	r2, #2
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c18:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	fa93 f2a3 	rbit	r2, r3
 8001c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c34:	2202      	movs	r2, #2
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	fa93 f2a3 	rbit	r2, r3
 8001c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c4e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c50:	4b88      	ldr	r3, [pc, #544]	; (8001e74 <HAL_RCC_OscConfig+0x934>)
 8001c52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c58:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001c5c:	2102      	movs	r1, #2
 8001c5e:	6019      	str	r1, [r3, #0]
 8001c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c64:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	fa93 f1a3 	rbit	r1, r3
 8001c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c72:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c76:	6019      	str	r1, [r3, #0]
  return result;
 8001c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	fab3 f383 	clz	r3, r3
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	f003 031f 	and.w	r3, r3, #31
 8001c92:	2101      	movs	r1, #1
 8001c94:	fa01 f303 	lsl.w	r3, r1, r3
 8001c98:	4013      	ands	r3, r2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0a0      	beq.n	8001be0 <HAL_RCC_OscConfig+0x6a0>
 8001c9e:	e08d      	b.n	8001dbc <HAL_RCC_OscConfig+0x87c>
 8001ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001ca8:	2201      	movs	r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	fa93 f2a3 	rbit	r2, r3
 8001cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cbe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001cc2:	601a      	str	r2, [r3, #0]
  return result;
 8001cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ccc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cce:	fab3 f383 	clz	r3, r3
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4b68      	ldr	r3, [pc, #416]	; (8001e78 <HAL_RCC_OscConfig+0x938>)
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	461a      	mov	r2, r3
 8001cde:	2300      	movs	r3, #0
 8001ce0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce2:	f7fe ff51 	bl	8000b88 <HAL_GetTick>
 8001ce6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cea:	e00a      	b.n	8001d02 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cec:	f7fe ff4c 	bl	8000b88 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d902      	bls.n	8001d02 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	f000 bc55 	b.w	80025ac <HAL_RCC_OscConfig+0x106c>
 8001d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d06:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d12:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	fa93 f2a3 	rbit	r2, r3
 8001d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d20:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001d2e:	2202      	movs	r2, #2
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d36:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	fa93 f2a3 	rbit	r2, r3
 8001d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001d52:	2202      	movs	r2, #2
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	fa93 f2a3 	rbit	r2, r3
 8001d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d68:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001d6c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d6e:	4b41      	ldr	r3, [pc, #260]	; (8001e74 <HAL_RCC_OscConfig+0x934>)
 8001d70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d76:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001d7a:	2102      	movs	r1, #2
 8001d7c:	6019      	str	r1, [r3, #0]
 8001d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d82:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	fa93 f1a3 	rbit	r1, r3
 8001d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d90:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001d94:	6019      	str	r1, [r3, #0]
  return result;
 8001d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	fab3 f383 	clz	r3, r3
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	f003 031f 	and.w	r3, r3, #31
 8001db0:	2101      	movs	r1, #1
 8001db2:	fa01 f303 	lsl.w	r3, r1, r3
 8001db6:	4013      	ands	r3, r2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d197      	bne.n	8001cec <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 81a1 	beq.w	8002114 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dd8:	4b26      	ldr	r3, [pc, #152]	; (8001e74 <HAL_RCC_OscConfig+0x934>)
 8001dda:	69db      	ldr	r3, [r3, #28]
 8001ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d116      	bne.n	8001e12 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001de4:	4b23      	ldr	r3, [pc, #140]	; (8001e74 <HAL_RCC_OscConfig+0x934>)
 8001de6:	69db      	ldr	r3, [r3, #28]
 8001de8:	4a22      	ldr	r2, [pc, #136]	; (8001e74 <HAL_RCC_OscConfig+0x934>)
 8001dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dee:	61d3      	str	r3, [r2, #28]
 8001df0:	4b20      	ldr	r3, [pc, #128]	; (8001e74 <HAL_RCC_OscConfig+0x934>)
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e06:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001e0a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e12:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <HAL_RCC_OscConfig+0x93c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d11a      	bne.n	8001e54 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e1e:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <HAL_RCC_OscConfig+0x93c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a16      	ldr	r2, [pc, #88]	; (8001e7c <HAL_RCC_OscConfig+0x93c>)
 8001e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e28:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e2a:	f7fe fead 	bl	8000b88 <HAL_GetTick>
 8001e2e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e32:	e009      	b.n	8001e48 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e34:	f7fe fea8 	bl	8000b88 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b64      	cmp	r3, #100	; 0x64
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e3b1      	b.n	80025ac <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e48:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <HAL_RCC_OscConfig+0x93c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0ef      	beq.n	8001e34 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d10d      	bne.n	8001e80 <HAL_RCC_OscConfig+0x940>
 8001e64:	4b03      	ldr	r3, [pc, #12]	; (8001e74 <HAL_RCC_OscConfig+0x934>)
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	4a02      	ldr	r2, [pc, #8]	; (8001e74 <HAL_RCC_OscConfig+0x934>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	6213      	str	r3, [r2, #32]
 8001e70:	e03c      	b.n	8001eec <HAL_RCC_OscConfig+0x9ac>
 8001e72:	bf00      	nop
 8001e74:	40021000 	.word	0x40021000
 8001e78:	10908120 	.word	0x10908120
 8001e7c:	40007000 	.word	0x40007000
 8001e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10c      	bne.n	8001eaa <HAL_RCC_OscConfig+0x96a>
 8001e90:	4bc1      	ldr	r3, [pc, #772]	; (8002198 <HAL_RCC_OscConfig+0xc58>)
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	4ac0      	ldr	r2, [pc, #768]	; (8002198 <HAL_RCC_OscConfig+0xc58>)
 8001e96:	f023 0301 	bic.w	r3, r3, #1
 8001e9a:	6213      	str	r3, [r2, #32]
 8001e9c:	4bbe      	ldr	r3, [pc, #760]	; (8002198 <HAL_RCC_OscConfig+0xc58>)
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	4abd      	ldr	r2, [pc, #756]	; (8002198 <HAL_RCC_OscConfig+0xc58>)
 8001ea2:	f023 0304 	bic.w	r3, r3, #4
 8001ea6:	6213      	str	r3, [r2, #32]
 8001ea8:	e020      	b.n	8001eec <HAL_RCC_OscConfig+0x9ac>
 8001eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	2b05      	cmp	r3, #5
 8001eb8:	d10c      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x994>
 8001eba:	4bb7      	ldr	r3, [pc, #732]	; (8002198 <HAL_RCC_OscConfig+0xc58>)
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	4ab6      	ldr	r2, [pc, #728]	; (8002198 <HAL_RCC_OscConfig+0xc58>)
 8001ec0:	f043 0304 	orr.w	r3, r3, #4
 8001ec4:	6213      	str	r3, [r2, #32]
 8001ec6:	4bb4      	ldr	r3, [pc, #720]	; (8002198 <HAL_RCC_OscConfig+0xc58>)
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	4ab3      	ldr	r2, [pc, #716]	; (8002198 <HAL_RCC_OscConfig+0xc58>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6213      	str	r3, [r2, #32]
 8001ed2:	e00b      	b.n	8001eec <HAL_RCC_OscConfig+0x9ac>
 8001ed4:	4bb0      	ldr	r3, [pc, #704]	; (8002198 <HAL_RCC_OscConfig+0xc58>)
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	4aaf      	ldr	r2, [pc, #700]	; (8002198 <HAL_RCC_OscConfig+0xc58>)
 8001eda:	f023 0301 	bic.w	r3, r3, #1
 8001ede:	6213      	str	r3, [r2, #32]
 8001ee0:	4bad      	ldr	r3, [pc, #692]	; (8002198 <HAL_RCC_OscConfig+0xc58>)
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4aac      	ldr	r2, [pc, #688]	; (8002198 <HAL_RCC_OscConfig+0xc58>)
 8001ee6:	f023 0304 	bic.w	r3, r3, #4
 8001eea:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 8081 	beq.w	8002000 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efe:	f7fe fe43 	bl	8000b88 <HAL_GetTick>
 8001f02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f06:	e00b      	b.n	8001f20 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f08:	f7fe fe3e 	bl	8000b88 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e345      	b.n	80025ac <HAL_RCC_OscConfig+0x106c>
 8001f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f24:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001f28:	2202      	movs	r2, #2
 8001f2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f30:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	fa93 f2a3 	rbit	r2, r3
 8001f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f3e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f48:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f54:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	fa93 f2a3 	rbit	r2, r3
 8001f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f62:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001f66:	601a      	str	r2, [r3, #0]
  return result;
 8001f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001f70:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f72:	fab3 f383 	clz	r3, r3
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	095b      	lsrs	r3, r3, #5
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	f043 0302 	orr.w	r3, r3, #2
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d102      	bne.n	8001f8c <HAL_RCC_OscConfig+0xa4c>
 8001f86:	4b84      	ldr	r3, [pc, #528]	; (8002198 <HAL_RCC_OscConfig+0xc58>)
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	e013      	b.n	8001fb4 <HAL_RCC_OscConfig+0xa74>
 8001f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f90:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001f94:	2202      	movs	r2, #2
 8001f96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	fa93 f2a3 	rbit	r2, r3
 8001fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001faa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	4b79      	ldr	r3, [pc, #484]	; (8002198 <HAL_RCC_OscConfig+0xc58>)
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fb8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001fbc:	2102      	movs	r1, #2
 8001fbe:	6011      	str	r1, [r2, #0]
 8001fc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fc4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001fc8:	6812      	ldr	r2, [r2, #0]
 8001fca:	fa92 f1a2 	rbit	r1, r2
 8001fce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fd2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001fd6:	6011      	str	r1, [r2, #0]
  return result;
 8001fd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fdc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001fe0:	6812      	ldr	r2, [r2, #0]
 8001fe2:	fab2 f282 	clz	r2, r2
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	f002 021f 	and.w	r2, r2, #31
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d084      	beq.n	8001f08 <HAL_RCC_OscConfig+0x9c8>
 8001ffe:	e07f      	b.n	8002100 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002000:	f7fe fdc2 	bl	8000b88 <HAL_GetTick>
 8002004:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002008:	e00b      	b.n	8002022 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800200a:	f7fe fdbd 	bl	8000b88 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	f241 3288 	movw	r2, #5000	; 0x1388
 800201a:	4293      	cmp	r3, r2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e2c4      	b.n	80025ac <HAL_RCC_OscConfig+0x106c>
 8002022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002026:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800202a:	2202      	movs	r2, #2
 800202c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002032:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	fa93 f2a3 	rbit	r2, r3
 800203c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002040:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800204a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800204e:	2202      	movs	r2, #2
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002056:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	fa93 f2a3 	rbit	r2, r3
 8002060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002064:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002068:	601a      	str	r2, [r3, #0]
  return result;
 800206a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002072:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002074:	fab3 f383 	clz	r3, r3
 8002078:	b2db      	uxtb	r3, r3
 800207a:	095b      	lsrs	r3, r3, #5
 800207c:	b2db      	uxtb	r3, r3
 800207e:	f043 0302 	orr.w	r3, r3, #2
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d102      	bne.n	800208e <HAL_RCC_OscConfig+0xb4e>
 8002088:	4b43      	ldr	r3, [pc, #268]	; (8002198 <HAL_RCC_OscConfig+0xc58>)
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	e013      	b.n	80020b6 <HAL_RCC_OscConfig+0xb76>
 800208e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002092:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002096:	2202      	movs	r2, #2
 8002098:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	fa93 f2a3 	rbit	r2, r3
 80020a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ac:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	4b39      	ldr	r3, [pc, #228]	; (8002198 <HAL_RCC_OscConfig+0xc58>)
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020ba:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80020be:	2102      	movs	r1, #2
 80020c0:	6011      	str	r1, [r2, #0]
 80020c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020c6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	fa92 f1a2 	rbit	r1, r2
 80020d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020d4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80020d8:	6011      	str	r1, [r2, #0]
  return result;
 80020da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020de:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	fab2 f282 	clz	r2, r2
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	f002 021f 	and.w	r2, r2, #31
 80020f4:	2101      	movs	r1, #1
 80020f6:	fa01 f202 	lsl.w	r2, r1, r2
 80020fa:	4013      	ands	r3, r2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d184      	bne.n	800200a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002100:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002104:	2b01      	cmp	r3, #1
 8002106:	d105      	bne.n	8002114 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002108:	4b23      	ldr	r3, [pc, #140]	; (8002198 <HAL_RCC_OscConfig+0xc58>)
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	4a22      	ldr	r2, [pc, #136]	; (8002198 <HAL_RCC_OscConfig+0xc58>)
 800210e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002112:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002114:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002118:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 8242 	beq.w	80025aa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002126:	4b1c      	ldr	r3, [pc, #112]	; (8002198 <HAL_RCC_OscConfig+0xc58>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 030c 	and.w	r3, r3, #12
 800212e:	2b08      	cmp	r3, #8
 8002130:	f000 8213 	beq.w	800255a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002138:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	2b02      	cmp	r3, #2
 8002142:	f040 8162 	bne.w	800240a <HAL_RCC_OscConfig+0xeca>
 8002146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800214e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002152:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002158:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	fa93 f2a3 	rbit	r2, r3
 8002162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002166:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800216a:	601a      	str	r2, [r3, #0]
  return result;
 800216c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002170:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002174:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002176:	fab3 f383 	clz	r3, r3
 800217a:	b2db      	uxtb	r3, r3
 800217c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002180:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	461a      	mov	r2, r3
 8002188:	2300      	movs	r3, #0
 800218a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218c:	f7fe fcfc 	bl	8000b88 <HAL_GetTick>
 8002190:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002194:	e00c      	b.n	80021b0 <HAL_RCC_OscConfig+0xc70>
 8002196:	bf00      	nop
 8002198:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800219c:	f7fe fcf4 	bl	8000b88 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e1fd      	b.n	80025ac <HAL_RCC_OscConfig+0x106c>
 80021b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80021b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	fa93 f2a3 	rbit	r2, r3
 80021cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80021d4:	601a      	str	r2, [r3, #0]
  return result;
 80021d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021da:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80021de:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e0:	fab3 f383 	clz	r3, r3
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	095b      	lsrs	r3, r3, #5
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d102      	bne.n	80021fa <HAL_RCC_OscConfig+0xcba>
 80021f4:	4bb0      	ldr	r3, [pc, #704]	; (80024b8 <HAL_RCC_OscConfig+0xf78>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	e027      	b.n	800224a <HAL_RCC_OscConfig+0xd0a>
 80021fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002202:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002206:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	fa93 f2a3 	rbit	r2, r3
 8002216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002224:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002228:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002232:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	fa93 f2a3 	rbit	r2, r3
 800223c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002240:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	4b9c      	ldr	r3, [pc, #624]	; (80024b8 <HAL_RCC_OscConfig+0xf78>)
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800224e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002252:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002256:	6011      	str	r1, [r2, #0]
 8002258:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800225c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002260:	6812      	ldr	r2, [r2, #0]
 8002262:	fa92 f1a2 	rbit	r1, r2
 8002266:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800226a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800226e:	6011      	str	r1, [r2, #0]
  return result;
 8002270:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002274:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002278:	6812      	ldr	r2, [r2, #0]
 800227a:	fab2 f282 	clz	r2, r2
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	f042 0220 	orr.w	r2, r2, #32
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	f002 021f 	and.w	r2, r2, #31
 800228a:	2101      	movs	r1, #1
 800228c:	fa01 f202 	lsl.w	r2, r1, r2
 8002290:	4013      	ands	r3, r2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d182      	bne.n	800219c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002296:	4b88      	ldr	r3, [pc, #544]	; (80024b8 <HAL_RCC_OscConfig+0xf78>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800229e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80022aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	430b      	orrs	r3, r1
 80022b8:	497f      	ldr	r1, [pc, #508]	; (80024b8 <HAL_RCC_OscConfig+0xf78>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	604b      	str	r3, [r1, #4]
 80022be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80022c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	fa93 f2a3 	rbit	r2, r3
 80022da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022de:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80022e2:	601a      	str	r2, [r3, #0]
  return result;
 80022e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80022ec:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022ee:	fab3 f383 	clz	r3, r3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	461a      	mov	r2, r3
 8002300:	2301      	movs	r3, #1
 8002302:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002304:	f7fe fc40 	bl	8000b88 <HAL_GetTick>
 8002308:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800230c:	e009      	b.n	8002322 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800230e:	f7fe fc3b 	bl	8000b88 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e144      	b.n	80025ac <HAL_RCC_OscConfig+0x106c>
 8002322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002326:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800232a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800232e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002334:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	fa93 f2a3 	rbit	r2, r3
 800233e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002342:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002346:	601a      	str	r2, [r3, #0]
  return result;
 8002348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002350:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002352:	fab3 f383 	clz	r3, r3
 8002356:	b2db      	uxtb	r3, r3
 8002358:	095b      	lsrs	r3, r3, #5
 800235a:	b2db      	uxtb	r3, r3
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b01      	cmp	r3, #1
 8002364:	d102      	bne.n	800236c <HAL_RCC_OscConfig+0xe2c>
 8002366:	4b54      	ldr	r3, [pc, #336]	; (80024b8 <HAL_RCC_OscConfig+0xf78>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	e027      	b.n	80023bc <HAL_RCC_OscConfig+0xe7c>
 800236c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002370:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002374:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002378:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	fa93 f2a3 	rbit	r2, r3
 8002388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002396:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800239a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	fa93 f2a3 	rbit	r2, r3
 80023ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	4b3f      	ldr	r3, [pc, #252]	; (80024b8 <HAL_RCC_OscConfig+0xf78>)
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023c0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80023c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023c8:	6011      	str	r1, [r2, #0]
 80023ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023ce:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80023d2:	6812      	ldr	r2, [r2, #0]
 80023d4:	fa92 f1a2 	rbit	r1, r2
 80023d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023dc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80023e0:	6011      	str	r1, [r2, #0]
  return result;
 80023e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023e6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	fab2 f282 	clz	r2, r2
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	f042 0220 	orr.w	r2, r2, #32
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	f002 021f 	and.w	r2, r2, #31
 80023fc:	2101      	movs	r1, #1
 80023fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002402:	4013      	ands	r3, r2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d082      	beq.n	800230e <HAL_RCC_OscConfig+0xdce>
 8002408:	e0cf      	b.n	80025aa <HAL_RCC_OscConfig+0x106a>
 800240a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002412:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002416:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	fa93 f2a3 	rbit	r2, r3
 8002426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800242e:	601a      	str	r2, [r3, #0]
  return result;
 8002430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002434:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002438:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243a:	fab3 f383 	clz	r3, r3
 800243e:	b2db      	uxtb	r3, r3
 8002440:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002444:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	461a      	mov	r2, r3
 800244c:	2300      	movs	r3, #0
 800244e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002450:	f7fe fb9a 	bl	8000b88 <HAL_GetTick>
 8002454:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002458:	e009      	b.n	800246e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800245a:	f7fe fb95 	bl	8000b88 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e09e      	b.n	80025ac <HAL_RCC_OscConfig+0x106c>
 800246e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002472:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002476:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800247a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002480:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	fa93 f2a3 	rbit	r2, r3
 800248a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002492:	601a      	str	r2, [r3, #0]
  return result;
 8002494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002498:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800249c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800249e:	fab3 f383 	clz	r3, r3
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	095b      	lsrs	r3, r3, #5
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d104      	bne.n	80024bc <HAL_RCC_OscConfig+0xf7c>
 80024b2:	4b01      	ldr	r3, [pc, #4]	; (80024b8 <HAL_RCC_OscConfig+0xf78>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	e029      	b.n	800250c <HAL_RCC_OscConfig+0xfcc>
 80024b8:	40021000 	.word	0x40021000
 80024bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80024c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ce:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	fa93 f2a3 	rbit	r2, r3
 80024d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024dc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80024ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	fa93 f2a3 	rbit	r2, r3
 80024fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002502:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	4b2b      	ldr	r3, [pc, #172]	; (80025b8 <HAL_RCC_OscConfig+0x1078>)
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002510:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002514:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002518:	6011      	str	r1, [r2, #0]
 800251a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800251e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	fa92 f1a2 	rbit	r1, r2
 8002528:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800252c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002530:	6011      	str	r1, [r2, #0]
  return result;
 8002532:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002536:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800253a:	6812      	ldr	r2, [r2, #0]
 800253c:	fab2 f282 	clz	r2, r2
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	f042 0220 	orr.w	r2, r2, #32
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	f002 021f 	and.w	r2, r2, #31
 800254c:	2101      	movs	r1, #1
 800254e:	fa01 f202 	lsl.w	r2, r1, r2
 8002552:	4013      	ands	r3, r2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d180      	bne.n	800245a <HAL_RCC_OscConfig+0xf1a>
 8002558:	e027      	b.n	80025aa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800255a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d101      	bne.n	800256e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e01e      	b.n	80025ac <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800256e:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <HAL_RCC_OscConfig+0x1078>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002576:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800257a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800257e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002582:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	429a      	cmp	r2, r3
 800258c:	d10b      	bne.n	80025a6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800258e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002592:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d001      	beq.n	80025aa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000

080025bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b09e      	sub	sp, #120	; 0x78
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e162      	b.n	800289a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025d4:	4b90      	ldr	r3, [pc, #576]	; (8002818 <HAL_RCC_ClockConfig+0x25c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d910      	bls.n	8002604 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e2:	4b8d      	ldr	r3, [pc, #564]	; (8002818 <HAL_RCC_ClockConfig+0x25c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 0207 	bic.w	r2, r3, #7
 80025ea:	498b      	ldr	r1, [pc, #556]	; (8002818 <HAL_RCC_ClockConfig+0x25c>)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f2:	4b89      	ldr	r3, [pc, #548]	; (8002818 <HAL_RCC_ClockConfig+0x25c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e14a      	b.n	800289a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d008      	beq.n	8002622 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002610:	4b82      	ldr	r3, [pc, #520]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	497f      	ldr	r1, [pc, #508]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 800261e:	4313      	orrs	r3, r2
 8002620:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 80dc 	beq.w	80027e8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d13c      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xf6>
 8002638:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800263c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002640:	fa93 f3a3 	rbit	r3, r3
 8002644:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002648:	fab3 f383 	clz	r3, r3
 800264c:	b2db      	uxtb	r3, r3
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	b2db      	uxtb	r3, r3
 8002652:	f043 0301 	orr.w	r3, r3, #1
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b01      	cmp	r3, #1
 800265a:	d102      	bne.n	8002662 <HAL_RCC_ClockConfig+0xa6>
 800265c:	4b6f      	ldr	r3, [pc, #444]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	e00f      	b.n	8002682 <HAL_RCC_ClockConfig+0xc6>
 8002662:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002666:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002668:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800266a:	fa93 f3a3 	rbit	r3, r3
 800266e:	667b      	str	r3, [r7, #100]	; 0x64
 8002670:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002674:	663b      	str	r3, [r7, #96]	; 0x60
 8002676:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002678:	fa93 f3a3 	rbit	r3, r3
 800267c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800267e:	4b67      	ldr	r3, [pc, #412]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002686:	65ba      	str	r2, [r7, #88]	; 0x58
 8002688:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800268a:	fa92 f2a2 	rbit	r2, r2
 800268e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002690:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002692:	fab2 f282 	clz	r2, r2
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	f042 0220 	orr.w	r2, r2, #32
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	f002 021f 	and.w	r2, r2, #31
 80026a2:	2101      	movs	r1, #1
 80026a4:	fa01 f202 	lsl.w	r2, r1, r2
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d17b      	bne.n	80027a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e0f3      	b.n	800289a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d13c      	bne.n	8002734 <HAL_RCC_ClockConfig+0x178>
 80026ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026c2:	fa93 f3a3 	rbit	r3, r3
 80026c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80026c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ca:	fab3 f383 	clz	r3, r3
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	095b      	lsrs	r3, r3, #5
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d102      	bne.n	80026e4 <HAL_RCC_ClockConfig+0x128>
 80026de:	4b4f      	ldr	r3, [pc, #316]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	e00f      	b.n	8002704 <HAL_RCC_ClockConfig+0x148>
 80026e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026ec:	fa93 f3a3 	rbit	r3, r3
 80026f0:	647b      	str	r3, [r7, #68]	; 0x44
 80026f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026f6:	643b      	str	r3, [r7, #64]	; 0x40
 80026f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026fa:	fa93 f3a3 	rbit	r3, r3
 80026fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002700:	4b46      	ldr	r3, [pc, #280]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002708:	63ba      	str	r2, [r7, #56]	; 0x38
 800270a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800270c:	fa92 f2a2 	rbit	r2, r2
 8002710:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002712:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002714:	fab2 f282 	clz	r2, r2
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	f042 0220 	orr.w	r2, r2, #32
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	f002 021f 	and.w	r2, r2, #31
 8002724:	2101      	movs	r1, #1
 8002726:	fa01 f202 	lsl.w	r2, r1, r2
 800272a:	4013      	ands	r3, r2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d13a      	bne.n	80027a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e0b2      	b.n	800289a <HAL_RCC_ClockConfig+0x2de>
 8002734:	2302      	movs	r3, #2
 8002736:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273a:	fa93 f3a3 	rbit	r3, r3
 800273e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002742:	fab3 f383 	clz	r3, r3
 8002746:	b2db      	uxtb	r3, r3
 8002748:	095b      	lsrs	r3, r3, #5
 800274a:	b2db      	uxtb	r3, r3
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b01      	cmp	r3, #1
 8002754:	d102      	bne.n	800275c <HAL_RCC_ClockConfig+0x1a0>
 8002756:	4b31      	ldr	r3, [pc, #196]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	e00d      	b.n	8002778 <HAL_RCC_ClockConfig+0x1bc>
 800275c:	2302      	movs	r3, #2
 800275e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002762:	fa93 f3a3 	rbit	r3, r3
 8002766:	627b      	str	r3, [r7, #36]	; 0x24
 8002768:	2302      	movs	r3, #2
 800276a:	623b      	str	r3, [r7, #32]
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	fa93 f3a3 	rbit	r3, r3
 8002772:	61fb      	str	r3, [r7, #28]
 8002774:	4b29      	ldr	r3, [pc, #164]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	2202      	movs	r2, #2
 800277a:	61ba      	str	r2, [r7, #24]
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	fa92 f2a2 	rbit	r2, r2
 8002782:	617a      	str	r2, [r7, #20]
  return result;
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	fab2 f282 	clz	r2, r2
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	f042 0220 	orr.w	r2, r2, #32
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	f002 021f 	and.w	r2, r2, #31
 8002796:	2101      	movs	r1, #1
 8002798:	fa01 f202 	lsl.w	r2, r1, r2
 800279c:	4013      	ands	r3, r2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e079      	b.n	800289a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027a6:	4b1d      	ldr	r3, [pc, #116]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f023 0203 	bic.w	r2, r3, #3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	491a      	ldr	r1, [pc, #104]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027b8:	f7fe f9e6 	bl	8000b88 <HAL_GetTick>
 80027bc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027be:	e00a      	b.n	80027d6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c0:	f7fe f9e2 	bl	8000b88 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e061      	b.n	800289a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d6:	4b11      	ldr	r3, [pc, #68]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 020c 	and.w	r2, r3, #12
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d1eb      	bne.n	80027c0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027e8:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <HAL_RCC_ClockConfig+0x25c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d214      	bcs.n	8002820 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f6:	4b08      	ldr	r3, [pc, #32]	; (8002818 <HAL_RCC_ClockConfig+0x25c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 0207 	bic.w	r2, r3, #7
 80027fe:	4906      	ldr	r1, [pc, #24]	; (8002818 <HAL_RCC_ClockConfig+0x25c>)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	4313      	orrs	r3, r2
 8002804:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	4b04      	ldr	r3, [pc, #16]	; (8002818 <HAL_RCC_ClockConfig+0x25c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d005      	beq.n	8002820 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e040      	b.n	800289a <HAL_RCC_ClockConfig+0x2de>
 8002818:	40022000 	.word	0x40022000
 800281c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d008      	beq.n	800283e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800282c:	4b1d      	ldr	r3, [pc, #116]	; (80028a4 <HAL_RCC_ClockConfig+0x2e8>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	491a      	ldr	r1, [pc, #104]	; (80028a4 <HAL_RCC_ClockConfig+0x2e8>)
 800283a:	4313      	orrs	r3, r2
 800283c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	2b00      	cmp	r3, #0
 8002848:	d009      	beq.n	800285e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800284a:	4b16      	ldr	r3, [pc, #88]	; (80028a4 <HAL_RCC_ClockConfig+0x2e8>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	4912      	ldr	r1, [pc, #72]	; (80028a4 <HAL_RCC_ClockConfig+0x2e8>)
 800285a:	4313      	orrs	r3, r2
 800285c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800285e:	f000 f829 	bl	80028b4 <HAL_RCC_GetSysClockFreq>
 8002862:	4601      	mov	r1, r0
 8002864:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <HAL_RCC_ClockConfig+0x2e8>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800286c:	22f0      	movs	r2, #240	; 0xf0
 800286e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	fa92 f2a2 	rbit	r2, r2
 8002876:	60fa      	str	r2, [r7, #12]
  return result;
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	fab2 f282 	clz	r2, r2
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	40d3      	lsrs	r3, r2
 8002882:	4a09      	ldr	r2, [pc, #36]	; (80028a8 <HAL_RCC_ClockConfig+0x2ec>)
 8002884:	5cd3      	ldrb	r3, [r2, r3]
 8002886:	fa21 f303 	lsr.w	r3, r1, r3
 800288a:	4a08      	ldr	r2, [pc, #32]	; (80028ac <HAL_RCC_ClockConfig+0x2f0>)
 800288c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800288e:	4b08      	ldr	r3, [pc, #32]	; (80028b0 <HAL_RCC_ClockConfig+0x2f4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe f934 	bl	8000b00 <HAL_InitTick>
  
  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3778      	adds	r7, #120	; 0x78
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40021000 	.word	0x40021000
 80028a8:	08005170 	.word	0x08005170
 80028ac:	20000000 	.word	0x20000000
 80028b0:	20000004 	.word	0x20000004

080028b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b08b      	sub	sp, #44	; 0x2c
 80028b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	61fb      	str	r3, [r7, #28]
 80028be:	2300      	movs	r3, #0
 80028c0:	61bb      	str	r3, [r7, #24]
 80028c2:	2300      	movs	r3, #0
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80028ce:	4b29      	ldr	r3, [pc, #164]	; (8002974 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f003 030c 	and.w	r3, r3, #12
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d002      	beq.n	80028e4 <HAL_RCC_GetSysClockFreq+0x30>
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d003      	beq.n	80028ea <HAL_RCC_GetSysClockFreq+0x36>
 80028e2:	e03c      	b.n	800295e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028e4:	4b24      	ldr	r3, [pc, #144]	; (8002978 <HAL_RCC_GetSysClockFreq+0xc4>)
 80028e6:	623b      	str	r3, [r7, #32]
      break;
 80028e8:	e03c      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80028f0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80028f4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	fa92 f2a2 	rbit	r2, r2
 80028fc:	607a      	str	r2, [r7, #4]
  return result;
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	fab2 f282 	clz	r2, r2
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	40d3      	lsrs	r3, r2
 8002908:	4a1c      	ldr	r2, [pc, #112]	; (800297c <HAL_RCC_GetSysClockFreq+0xc8>)
 800290a:	5cd3      	ldrb	r3, [r2, r3]
 800290c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800290e:	4b19      	ldr	r3, [pc, #100]	; (8002974 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	220f      	movs	r2, #15
 8002918:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	fa92 f2a2 	rbit	r2, r2
 8002920:	60fa      	str	r2, [r7, #12]
  return result;
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	fab2 f282 	clz	r2, r2
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	40d3      	lsrs	r3, r2
 800292c:	4a14      	ldr	r2, [pc, #80]	; (8002980 <HAL_RCC_GetSysClockFreq+0xcc>)
 800292e:	5cd3      	ldrb	r3, [r2, r3]
 8002930:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d008      	beq.n	800294e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800293c:	4a0e      	ldr	r2, [pc, #56]	; (8002978 <HAL_RCC_GetSysClockFreq+0xc4>)
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	fbb2 f2f3 	udiv	r2, r2, r3
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	fb02 f303 	mul.w	r3, r2, r3
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
 800294c:	e004      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	4a0c      	ldr	r2, [pc, #48]	; (8002984 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002952:	fb02 f303 	mul.w	r3, r2, r3
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	623b      	str	r3, [r7, #32]
      break;
 800295c:	e002      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002960:	623b      	str	r3, [r7, #32]
      break;
 8002962:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002964:	6a3b      	ldr	r3, [r7, #32]
}
 8002966:	4618      	mov	r0, r3
 8002968:	372c      	adds	r7, #44	; 0x2c
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	40021000 	.word	0x40021000
 8002978:	007a1200 	.word	0x007a1200
 800297c:	08005188 	.word	0x08005188
 8002980:	08005198 	.word	0x08005198
 8002984:	003d0900 	.word	0x003d0900

08002988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800298c:	4b03      	ldr	r3, [pc, #12]	; (800299c <HAL_RCC_GetHCLKFreq+0x14>)
 800298e:	681b      	ldr	r3, [r3, #0]
}
 8002990:	4618      	mov	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	20000000 	.word	0x20000000

080029a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80029a6:	f7ff ffef 	bl	8002988 <HAL_RCC_GetHCLKFreq>
 80029aa:	4601      	mov	r1, r0
 80029ac:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029b4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80029b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	fa92 f2a2 	rbit	r2, r2
 80029c0:	603a      	str	r2, [r7, #0]
  return result;
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	fab2 f282 	clz	r2, r2
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	40d3      	lsrs	r3, r2
 80029cc:	4a04      	ldr	r2, [pc, #16]	; (80029e0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80029ce:	5cd3      	ldrb	r3, [r2, r3]
 80029d0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80029d4:	4618      	mov	r0, r3
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40021000 	.word	0x40021000
 80029e0:	08005180 	.word	0x08005180

080029e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80029ea:	f7ff ffcd 	bl	8002988 <HAL_RCC_GetHCLKFreq>
 80029ee:	4601      	mov	r1, r0
 80029f0:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80029f8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80029fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	fa92 f2a2 	rbit	r2, r2
 8002a04:	603a      	str	r2, [r7, #0]
  return result;
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	fab2 f282 	clz	r2, r2
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	40d3      	lsrs	r3, r2
 8002a10:	4a04      	ldr	r2, [pc, #16]	; (8002a24 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002a12:	5cd3      	ldrb	r3, [r2, r3]
 8002a14:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40021000 	.word	0x40021000
 8002a24:	08005180 	.word	0x08005180

08002a28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e095      	b.n	8002b66 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d108      	bne.n	8002a54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a4a:	d009      	beq.n	8002a60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	61da      	str	r2, [r3, #28]
 8002a52:	e005      	b.n	8002a60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d106      	bne.n	8002a80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7fd fe9c 	bl	80007b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a96:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002aa0:	d902      	bls.n	8002aa8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	e002      	b.n	8002aae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002ab6:	d007      	beq.n	8002ac8 <HAL_SPI_Init+0xa0>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ac0:	d002      	beq.n	8002ac8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	431a      	orrs	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b00:	431a      	orrs	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0a:	ea42 0103 	orr.w	r1, r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b12:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	0c1b      	lsrs	r3, r3, #16
 8002b24:	f003 0204 	and.w	r2, r3, #4
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	f003 0310 	and.w	r3, r3, #16
 8002b30:	431a      	orrs	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002b44:	ea42 0103 	orr.w	r1, r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b088      	sub	sp, #32
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	603b      	str	r3, [r7, #0]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_SPI_Transmit+0x22>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e15f      	b.n	8002e50 <HAL_SPI_Transmit+0x2e2>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b98:	f7fd fff6 	bl	8000b88 <HAL_GetTick>
 8002b9c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002b9e:	88fb      	ldrh	r3, [r7, #6]
 8002ba0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d002      	beq.n	8002bb4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002bb2:	e148      	b.n	8002e46 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d002      	beq.n	8002bc0 <HAL_SPI_Transmit+0x52>
 8002bba:	88fb      	ldrh	r3, [r7, #6]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d102      	bne.n	8002bc6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002bc4:	e13f      	b.n	8002e46 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2203      	movs	r2, #3
 8002bca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	88fa      	ldrh	r2, [r7, #6]
 8002bde:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	88fa      	ldrh	r2, [r7, #6]
 8002be4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c10:	d10f      	bne.n	8002c32 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c30:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3c:	2b40      	cmp	r3, #64	; 0x40
 8002c3e:	d007      	beq.n	8002c50 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c58:	d94f      	bls.n	8002cfa <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d002      	beq.n	8002c68 <HAL_SPI_Transmit+0xfa>
 8002c62:	8afb      	ldrh	r3, [r7, #22]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d142      	bne.n	8002cee <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6c:	881a      	ldrh	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c78:	1c9a      	adds	r2, r3, #2
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c8c:	e02f      	b.n	8002cee <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d112      	bne.n	8002cc2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca0:	881a      	ldrh	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cac:	1c9a      	adds	r2, r3, #2
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cc0:	e015      	b.n	8002cee <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cc2:	f7fd ff61 	bl	8000b88 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d803      	bhi.n	8002cda <HAL_SPI_Transmit+0x16c>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd8:	d102      	bne.n	8002ce0 <HAL_SPI_Transmit+0x172>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d106      	bne.n	8002cee <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002cec:	e0ab      	b.n	8002e46 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1ca      	bne.n	8002c8e <HAL_SPI_Transmit+0x120>
 8002cf8:	e080      	b.n	8002dfc <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <HAL_SPI_Transmit+0x19a>
 8002d02:	8afb      	ldrh	r3, [r7, #22]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d174      	bne.n	8002df2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d912      	bls.n	8002d38 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d16:	881a      	ldrh	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d22:	1c9a      	adds	r2, r3, #2
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3b02      	subs	r3, #2
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d36:	e05c      	b.n	8002df2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	330c      	adds	r3, #12
 8002d42:	7812      	ldrb	r2, [r2, #0]
 8002d44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4a:	1c5a      	adds	r2, r3, #1
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	3b01      	subs	r3, #1
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002d5e:	e048      	b.n	8002df2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d12b      	bne.n	8002dc6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d912      	bls.n	8002d9e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7c:	881a      	ldrh	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d88:	1c9a      	adds	r2, r3, #2
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	3b02      	subs	r3, #2
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d9c:	e029      	b.n	8002df2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	330c      	adds	r3, #12
 8002da8:	7812      	ldrb	r2, [r2, #0]
 8002daa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db0:	1c5a      	adds	r2, r3, #1
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002dc4:	e015      	b.n	8002df2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dc6:	f7fd fedf 	bl	8000b88 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d803      	bhi.n	8002dde <HAL_SPI_Transmit+0x270>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ddc:	d102      	bne.n	8002de4 <HAL_SPI_Transmit+0x276>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d106      	bne.n	8002df2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002df0:	e029      	b.n	8002e46 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1b1      	bne.n	8002d60 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	6839      	ldr	r1, [r7, #0]
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 fb77 	bl	80034f4 <SPI_EndRxTxTransaction>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d002      	beq.n	8002e12 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10a      	bne.n	8002e30 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	613b      	str	r3, [r7, #16]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d002      	beq.n	8002e3e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	77fb      	strb	r3, [r7, #31]
 8002e3c:	e003      	b.n	8002e46 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002e4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3720      	adds	r7, #32
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08a      	sub	sp, #40	; 0x28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
 8002e64:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e66:	2301      	movs	r3, #1
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_SPI_TransmitReceive+0x26>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e20a      	b.n	8003294 <HAL_SPI_TransmitReceive+0x43c>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e86:	f7fd fe7f 	bl	8000b88 <HAL_GetTick>
 8002e8a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e92:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002e9a:	887b      	ldrh	r3, [r7, #2]
 8002e9c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002e9e:	887b      	ldrh	r3, [r7, #2]
 8002ea0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ea2:	7efb      	ldrb	r3, [r7, #27]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d00e      	beq.n	8002ec6 <HAL_SPI_TransmitReceive+0x6e>
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eae:	d106      	bne.n	8002ebe <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d102      	bne.n	8002ebe <HAL_SPI_TransmitReceive+0x66>
 8002eb8:	7efb      	ldrb	r3, [r7, #27]
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d003      	beq.n	8002ec6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002ec4:	e1e0      	b.n	8003288 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d005      	beq.n	8002ed8 <HAL_SPI_TransmitReceive+0x80>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <HAL_SPI_TransmitReceive+0x80>
 8002ed2:	887b      	ldrh	r3, [r7, #2]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d103      	bne.n	8002ee0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002ede:	e1d3      	b.n	8003288 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d003      	beq.n	8002ef4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2205      	movs	r2, #5
 8002ef0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	887a      	ldrh	r2, [r7, #2]
 8002f04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	887a      	ldrh	r2, [r7, #2]
 8002f0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	887a      	ldrh	r2, [r7, #2]
 8002f1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	887a      	ldrh	r2, [r7, #2]
 8002f20:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f36:	d802      	bhi.n	8002f3e <HAL_SPI_TransmitReceive+0xe6>
 8002f38:	8a3b      	ldrh	r3, [r7, #16]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d908      	bls.n	8002f50 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	e007      	b.n	8002f60 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f5e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6a:	2b40      	cmp	r3, #64	; 0x40
 8002f6c:	d007      	beq.n	8002f7e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f86:	f240 8081 	bls.w	800308c <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <HAL_SPI_TransmitReceive+0x140>
 8002f92:	8a7b      	ldrh	r3, [r7, #18]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d16d      	bne.n	8003074 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9c:	881a      	ldrh	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa8:	1c9a      	adds	r2, r3, #2
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fbc:	e05a      	b.n	8003074 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d11b      	bne.n	8003004 <HAL_SPI_TransmitReceive+0x1ac>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d016      	beq.n	8003004 <HAL_SPI_TransmitReceive+0x1ac>
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d113      	bne.n	8003004 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe0:	881a      	ldrh	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fec:	1c9a      	adds	r2, r3, #2
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b01      	cmp	r3, #1
 8003010:	d11c      	bne.n	800304c <HAL_SPI_TransmitReceive+0x1f4>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003018:	b29b      	uxth	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d016      	beq.n	800304c <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	b292      	uxth	r2, r2
 800302a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	1c9a      	adds	r2, r3, #2
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800303c:	b29b      	uxth	r3, r3
 800303e:	3b01      	subs	r3, #1
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003048:	2301      	movs	r3, #1
 800304a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800304c:	f7fd fd9c 	bl	8000b88 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003058:	429a      	cmp	r2, r3
 800305a:	d80b      	bhi.n	8003074 <HAL_SPI_TransmitReceive+0x21c>
 800305c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003062:	d007      	beq.n	8003074 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003072:	e109      	b.n	8003288 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003078:	b29b      	uxth	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d19f      	bne.n	8002fbe <HAL_SPI_TransmitReceive+0x166>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003084:	b29b      	uxth	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d199      	bne.n	8002fbe <HAL_SPI_TransmitReceive+0x166>
 800308a:	e0e3      	b.n	8003254 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_SPI_TransmitReceive+0x244>
 8003094:	8a7b      	ldrh	r3, [r7, #18]
 8003096:	2b01      	cmp	r3, #1
 8003098:	f040 80cf 	bne.w	800323a <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d912      	bls.n	80030cc <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030aa:	881a      	ldrh	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b6:	1c9a      	adds	r2, r3, #2
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	3b02      	subs	r3, #2
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030ca:	e0b6      	b.n	800323a <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	330c      	adds	r3, #12
 80030d6:	7812      	ldrb	r2, [r2, #0]
 80030d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030f2:	e0a2      	b.n	800323a <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d134      	bne.n	800316c <HAL_SPI_TransmitReceive+0x314>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003106:	b29b      	uxth	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	d02f      	beq.n	800316c <HAL_SPI_TransmitReceive+0x314>
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	2b01      	cmp	r3, #1
 8003110:	d12c      	bne.n	800316c <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003116:	b29b      	uxth	r3, r3
 8003118:	2b01      	cmp	r3, #1
 800311a:	d912      	bls.n	8003142 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003120:	881a      	ldrh	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312c:	1c9a      	adds	r2, r3, #2
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003136:	b29b      	uxth	r3, r3
 8003138:	3b02      	subs	r3, #2
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003140:	e012      	b.n	8003168 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	330c      	adds	r3, #12
 800314c:	7812      	ldrb	r2, [r2, #0]
 800314e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800315e:	b29b      	uxth	r3, r3
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b01      	cmp	r3, #1
 8003178:	d148      	bne.n	800320c <HAL_SPI_TransmitReceive+0x3b4>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d042      	beq.n	800320c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800318c:	b29b      	uxth	r3, r3
 800318e:	2b01      	cmp	r3, #1
 8003190:	d923      	bls.n	80031da <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	b292      	uxth	r2, r2
 800319e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	1c9a      	adds	r2, r3, #2
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	3b02      	subs	r3, #2
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d81f      	bhi.n	8003208 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031d6:	605a      	str	r2, [r3, #4]
 80031d8:	e016      	b.n	8003208 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f103 020c 	add.w	r2, r3, #12
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	7812      	ldrb	r2, [r2, #0]
 80031e8:	b2d2      	uxtb	r2, r2
 80031ea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003208:	2301      	movs	r3, #1
 800320a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800320c:	f7fd fcbc 	bl	8000b88 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003218:	429a      	cmp	r2, r3
 800321a:	d803      	bhi.n	8003224 <HAL_SPI_TransmitReceive+0x3cc>
 800321c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003222:	d102      	bne.n	800322a <HAL_SPI_TransmitReceive+0x3d2>
 8003224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003226:	2b00      	cmp	r3, #0
 8003228:	d107      	bne.n	800323a <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003238:	e026      	b.n	8003288 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800323e:	b29b      	uxth	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	f47f af57 	bne.w	80030f4 <HAL_SPI_TransmitReceive+0x29c>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800324c:	b29b      	uxth	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	f47f af50 	bne.w	80030f4 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003254:	69fa      	ldr	r2, [r7, #28]
 8003256:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 f94b 	bl	80034f4 <SPI_EndRxTxTransaction>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d005      	beq.n	8003270 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2220      	movs	r2, #32
 800326e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800327e:	e003      	b.n	8003288 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003290:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003294:	4618      	mov	r0, r3
 8003296:	3728      	adds	r7, #40	; 0x28
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032aa:	b2db      	uxtb	r3, r3
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	603b      	str	r3, [r7, #0]
 80032c4:	4613      	mov	r3, r2
 80032c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032c8:	f7fd fc5e 	bl	8000b88 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d0:	1a9b      	subs	r3, r3, r2
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	4413      	add	r3, r2
 80032d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032d8:	f7fd fc56 	bl	8000b88 <HAL_GetTick>
 80032dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032de:	4b39      	ldr	r3, [pc, #228]	; (80033c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	015b      	lsls	r3, r3, #5
 80032e4:	0d1b      	lsrs	r3, r3, #20
 80032e6:	69fa      	ldr	r2, [r7, #28]
 80032e8:	fb02 f303 	mul.w	r3, r2, r3
 80032ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032ee:	e054      	b.n	800339a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f6:	d050      	beq.n	800339a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032f8:	f7fd fc46 	bl	8000b88 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	69fa      	ldr	r2, [r7, #28]
 8003304:	429a      	cmp	r2, r3
 8003306:	d902      	bls.n	800330e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d13d      	bne.n	800338a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800331c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003326:	d111      	bne.n	800334c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003330:	d004      	beq.n	800333c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800333a:	d107      	bne.n	800334c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800334a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003354:	d10f      	bne.n	8003376 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003374:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e017      	b.n	80033ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	3b01      	subs	r3, #1
 8003398:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	4013      	ands	r3, r2
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	bf0c      	ite	eq
 80033aa:	2301      	moveq	r3, #1
 80033ac:	2300      	movne	r3, #0
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	461a      	mov	r2, r3
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d19b      	bne.n	80032f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3720      	adds	r7, #32
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	20000000 	.word	0x20000000

080033c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08a      	sub	sp, #40	; 0x28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80033d6:	2300      	movs	r3, #0
 80033d8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80033da:	f7fd fbd5 	bl	8000b88 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	4413      	add	r3, r2
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80033ea:	f7fd fbcd 	bl	8000b88 <HAL_GetTick>
 80033ee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	330c      	adds	r3, #12
 80033f6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80033f8:	4b3d      	ldr	r3, [pc, #244]	; (80034f0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4613      	mov	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	00da      	lsls	r2, r3, #3
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	0d1b      	lsrs	r3, r3, #20
 8003408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340a:	fb02 f303 	mul.w	r3, r2, r3
 800340e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003410:	e060      	b.n	80034d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003418:	d107      	bne.n	800342a <SPI_WaitFifoStateUntilTimeout+0x62>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d104      	bne.n	800342a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	b2db      	uxtb	r3, r3
 8003426:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003428:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003430:	d050      	beq.n	80034d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003432:	f7fd fba9 	bl	8000b88 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800343e:	429a      	cmp	r2, r3
 8003440:	d902      	bls.n	8003448 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	2b00      	cmp	r3, #0
 8003446:	d13d      	bne.n	80034c4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003456:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003460:	d111      	bne.n	8003486 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800346a:	d004      	beq.n	8003476 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003474:	d107      	bne.n	8003486 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003484:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800348e:	d10f      	bne.n	80034b0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e010      	b.n	80034e6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	3b01      	subs	r3, #1
 80034d2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	4013      	ands	r3, r2
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d196      	bne.n	8003412 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3728      	adds	r7, #40	; 0x28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	20000000 	.word	0x20000000

080034f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af02      	add	r7, sp, #8
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	2200      	movs	r2, #0
 8003508:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f7ff ff5b 	bl	80033c8 <SPI_WaitFifoStateUntilTimeout>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d007      	beq.n	8003528 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800351c:	f043 0220 	orr.w	r2, r3, #32
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e027      	b.n	8003578 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2200      	movs	r2, #0
 8003530:	2180      	movs	r1, #128	; 0x80
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f7ff fec0 	bl	80032b8 <SPI_WaitFlagStateUntilTimeout>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d007      	beq.n	800354e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003542:	f043 0220 	orr.w	r2, r3, #32
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e014      	b.n	8003578 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	2200      	movs	r2, #0
 8003556:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f7ff ff34 	bl	80033c8 <SPI_WaitFifoStateUntilTimeout>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d007      	beq.n	8003576 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800356a:	f043 0220 	orr.w	r2, r3, #32
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e000      	b.n	8003578 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e040      	b.n	8003614 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003596:	2b00      	cmp	r3, #0
 8003598:	d106      	bne.n	80035a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fd f9f6 	bl	8000994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2224      	movs	r2, #36	; 0x24
 80035ac:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0201 	bic.w	r2, r2, #1
 80035bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 fbbc 	bl	8003d3c <UART_SetConfig>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d101      	bne.n	80035ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e022      	b.n	8003614 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 fce6 	bl	8003fa8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0201 	orr.w	r2, r2, #1
 800360a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 fd6d 	bl	80040ec <UART_CheckIdleState>
 8003612:	4603      	mov	r3, r0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08a      	sub	sp, #40	; 0x28
 8003620:	af02      	add	r7, sp, #8
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	4613      	mov	r3, r2
 800362a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003630:	2b20      	cmp	r3, #32
 8003632:	d178      	bne.n	8003726 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <HAL_UART_Transmit+0x24>
 800363a:	88fb      	ldrh	r3, [r7, #6]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e071      	b.n	8003728 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2221      	movs	r2, #33	; 0x21
 8003650:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003652:	f7fd fa99 	bl	8000b88 <HAL_GetTick>
 8003656:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	88fa      	ldrh	r2, [r7, #6]
 800365c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	88fa      	ldrh	r2, [r7, #6]
 8003664:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003670:	d108      	bne.n	8003684 <HAL_UART_Transmit+0x68>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d104      	bne.n	8003684 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800367a:	2300      	movs	r3, #0
 800367c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	61bb      	str	r3, [r7, #24]
 8003682:	e003      	b.n	800368c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003688:	2300      	movs	r3, #0
 800368a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800368c:	e030      	b.n	80036f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2200      	movs	r2, #0
 8003696:	2180      	movs	r1, #128	; 0x80
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 fdcf 	bl	800423c <UART_WaitOnFlagUntilTimeout>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d004      	beq.n	80036ae <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2220      	movs	r2, #32
 80036a8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e03c      	b.n	8003728 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10b      	bne.n	80036cc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	881a      	ldrh	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036c0:	b292      	uxth	r2, r2
 80036c2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	3302      	adds	r3, #2
 80036c8:	61bb      	str	r3, [r7, #24]
 80036ca:	e008      	b.n	80036de <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	781a      	ldrb	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	b292      	uxth	r2, r2
 80036d6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	3301      	adds	r3, #1
 80036dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	3b01      	subs	r3, #1
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1c8      	bne.n	800368e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	2200      	movs	r2, #0
 8003704:	2140      	movs	r1, #64	; 0x40
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 fd98 	bl	800423c <UART_WaitOnFlagUntilTimeout>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d004      	beq.n	800371c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2220      	movs	r2, #32
 8003716:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e005      	b.n	8003728 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2220      	movs	r2, #32
 8003720:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003722:	2300      	movs	r3, #0
 8003724:	e000      	b.n	8003728 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003726:	2302      	movs	r3, #2
  }
}
 8003728:	4618      	mov	r0, r3
 800372a:	3720      	adds	r7, #32
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b0ba      	sub	sp, #232	; 0xe8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003756:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800375a:	f640 030f 	movw	r3, #2063	; 0x80f
 800375e:	4013      	ands	r3, r2
 8003760:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003764:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003768:	2b00      	cmp	r3, #0
 800376a:	d115      	bne.n	8003798 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800376c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003770:	f003 0320 	and.w	r3, r3, #32
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00f      	beq.n	8003798 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800377c:	f003 0320 	and.w	r3, r3, #32
 8003780:	2b00      	cmp	r3, #0
 8003782:	d009      	beq.n	8003798 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 82ab 	beq.w	8003ce4 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	4798      	blx	r3
      }
      return;
 8003796:	e2a5      	b.n	8003ce4 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003798:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 8117 	beq.w	80039d0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80037a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d106      	bne.n	80037bc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80037ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80037b2:	4b85      	ldr	r3, [pc, #532]	; (80039c8 <HAL_UART_IRQHandler+0x298>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 810a 	beq.w	80039d0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d011      	beq.n	80037ec <HAL_UART_IRQHandler+0xbc>
 80037c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00b      	beq.n	80037ec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2201      	movs	r2, #1
 80037da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037e2:	f043 0201 	orr.w	r2, r3, #1
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d011      	beq.n	800381c <HAL_UART_IRQHandler+0xec>
 80037f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00b      	beq.n	800381c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2202      	movs	r2, #2
 800380a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003812:	f043 0204 	orr.w	r2, r3, #4
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800381c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	d011      	beq.n	800384c <HAL_UART_IRQHandler+0x11c>
 8003828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00b      	beq.n	800384c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2204      	movs	r2, #4
 800383a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003842:	f043 0202 	orr.w	r2, r3, #2
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800384c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003850:	f003 0308 	and.w	r3, r3, #8
 8003854:	2b00      	cmp	r3, #0
 8003856:	d017      	beq.n	8003888 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800385c:	f003 0320 	and.w	r3, r3, #32
 8003860:	2b00      	cmp	r3, #0
 8003862:	d105      	bne.n	8003870 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003868:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00b      	beq.n	8003888 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2208      	movs	r2, #8
 8003876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800387e:	f043 0208 	orr.w	r2, r3, #8
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800388c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003890:	2b00      	cmp	r3, #0
 8003892:	d012      	beq.n	80038ba <HAL_UART_IRQHandler+0x18a>
 8003894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003898:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00c      	beq.n	80038ba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038b0:	f043 0220 	orr.w	r2, r3, #32
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 8211 	beq.w	8003ce8 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80038c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ca:	f003 0320 	and.w	r3, r3, #32
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00d      	beq.n	80038ee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80038d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038d6:	f003 0320 	and.w	r3, r3, #32
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d007      	beq.n	80038ee <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003902:	2b40      	cmp	r3, #64	; 0x40
 8003904:	d005      	beq.n	8003912 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003906:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800390a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800390e:	2b00      	cmp	r3, #0
 8003910:	d04f      	beq.n	80039b2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 fcf9 	bl	800430a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003922:	2b40      	cmp	r3, #64	; 0x40
 8003924:	d141      	bne.n	80039aa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	3308      	adds	r3, #8
 800392c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003930:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003934:	e853 3f00 	ldrex	r3, [r3]
 8003938:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800393c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003940:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003944:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	3308      	adds	r3, #8
 800394e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003952:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003956:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800395e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003962:	e841 2300 	strex	r3, r2, [r1]
 8003966:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800396a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1d9      	bne.n	8003926 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003976:	2b00      	cmp	r3, #0
 8003978:	d013      	beq.n	80039a2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800397e:	4a13      	ldr	r2, [pc, #76]	; (80039cc <HAL_UART_IRQHandler+0x29c>)
 8003980:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003986:	4618      	mov	r0, r3
 8003988:	f7fd fabf 	bl	8000f0a <HAL_DMA_Abort_IT>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d017      	beq.n	80039c2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800399c:	4610      	mov	r0, r2
 800399e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a0:	e00f      	b.n	80039c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f9b4 	bl	8003d10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a8:	e00b      	b.n	80039c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f9b0 	bl	8003d10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b0:	e007      	b.n	80039c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f9ac 	bl	8003d10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80039c0:	e192      	b.n	8003ce8 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c2:	bf00      	nop
    return;
 80039c4:	e190      	b.n	8003ce8 <HAL_UART_IRQHandler+0x5b8>
 80039c6:	bf00      	nop
 80039c8:	04000120 	.word	0x04000120
 80039cc:	080043d3 	.word	0x080043d3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	f040 814b 	bne.w	8003c70 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80039da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039de:	f003 0310 	and.w	r3, r3, #16
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 8144 	beq.w	8003c70 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80039e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ec:	f003 0310 	and.w	r3, r3, #16
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 813d 	beq.w	8003c70 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2210      	movs	r2, #16
 80039fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a08:	2b40      	cmp	r3, #64	; 0x40
 8003a0a:	f040 80b5 	bne.w	8003b78 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a1a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 8164 	beq.w	8003cec <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003a2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	f080 815c 	bcs.w	8003cec <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	2b20      	cmp	r3, #32
 8003a46:	f000 8086 	beq.w	8003b56 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a56:	e853 3f00 	ldrex	r3, [r3]
 8003a5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003a5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003a74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a78:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003a80:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003a84:	e841 2300 	strex	r3, r2, [r1]
 8003a88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003a8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1da      	bne.n	8003a4a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	3308      	adds	r3, #8
 8003a9a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a9e:	e853 3f00 	ldrex	r3, [r3]
 8003aa2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003aa4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003aa6:	f023 0301 	bic.w	r3, r3, #1
 8003aaa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	3308      	adds	r3, #8
 8003ab4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ab8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003abc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ac0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ac4:	e841 2300 	strex	r3, r2, [r1]
 8003ac8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003aca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1e1      	bne.n	8003a94 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3308      	adds	r3, #8
 8003ad6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ada:	e853 3f00 	ldrex	r3, [r3]
 8003ade:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ae6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	3308      	adds	r3, #8
 8003af0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003af4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003af6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003afa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003afc:	e841 2300 	strex	r3, r2, [r1]
 8003b00:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1e3      	bne.n	8003ad0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b1e:	e853 3f00 	ldrex	r3, [r3]
 8003b22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b26:	f023 0310 	bic.w	r3, r3, #16
 8003b2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	461a      	mov	r2, r3
 8003b34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b38:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b3a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b40:	e841 2300 	strex	r3, r2, [r1]
 8003b44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1e4      	bne.n	8003b16 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7fd f9a1 	bl	8000e98 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2202      	movs	r2, #2
 8003b5a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	4619      	mov	r1, r3
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f8d7 	bl	8003d24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b76:	e0b9      	b.n	8003cec <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 80ab 	beq.w	8003cf0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003b9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 80a6 	beq.w	8003cf0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bac:	e853 3f00 	ldrex	r3, [r3]
 8003bb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003bc6:	647b      	str	r3, [r7, #68]	; 0x44
 8003bc8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003bcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bce:	e841 2300 	strex	r3, r2, [r1]
 8003bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1e4      	bne.n	8003ba4 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	3308      	adds	r3, #8
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	e853 3f00 	ldrex	r3, [r3]
 8003be8:	623b      	str	r3, [r7, #32]
   return(result);
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	f023 0301 	bic.w	r3, r3, #1
 8003bf0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	3308      	adds	r3, #8
 8003bfa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003bfe:	633a      	str	r2, [r7, #48]	; 0x30
 8003c00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c06:	e841 2300 	strex	r3, r2, [r1]
 8003c0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1e3      	bne.n	8003bda <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2220      	movs	r2, #32
 8003c16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	e853 3f00 	ldrex	r3, [r3]
 8003c32:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f023 0310 	bic.w	r3, r3, #16
 8003c3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c48:	61fb      	str	r3, [r7, #28]
 8003c4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4c:	69b9      	ldr	r1, [r7, #24]
 8003c4e:	69fa      	ldr	r2, [r7, #28]
 8003c50:	e841 2300 	strex	r3, r2, [r1]
 8003c54:	617b      	str	r3, [r7, #20]
   return(result);
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1e4      	bne.n	8003c26 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c66:	4619      	mov	r1, r3
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f85b 	bl	8003d24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c6e:	e03f      	b.n	8003cf0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00e      	beq.n	8003c9a <HAL_UART_IRQHandler+0x56a>
 8003c7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003c90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 fbdd 	bl	8004452 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c98:	e02d      	b.n	8003cf6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00e      	beq.n	8003cc4 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d008      	beq.n	8003cc4 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d01c      	beq.n	8003cf4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	4798      	blx	r3
    }
    return;
 8003cc2:	e017      	b.n	8003cf4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d012      	beq.n	8003cf6 <HAL_UART_IRQHandler+0x5c6>
 8003cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00c      	beq.n	8003cf6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 fb8e 	bl	80043fe <UART_EndTransmit_IT>
    return;
 8003ce2:	e008      	b.n	8003cf6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003ce4:	bf00      	nop
 8003ce6:	e006      	b.n	8003cf6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003ce8:	bf00      	nop
 8003cea:	e004      	b.n	8003cf6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003cec:	bf00      	nop
 8003cee:	e002      	b.n	8003cf6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003cf0:	bf00      	nop
 8003cf2:	e000      	b.n	8003cf6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003cf4:	bf00      	nop
  }

}
 8003cf6:	37e8      	adds	r7, #232	; 0xe8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d44:	2300      	movs	r3, #0
 8003d46:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	4b8a      	ldr	r3, [pc, #552]	; (8003f90 <UART_SetConfig+0x254>)
 8003d68:	4013      	ands	r3, r2
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6812      	ldr	r2, [r2, #0]
 8003d6e:	6979      	ldr	r1, [r7, #20]
 8003d70:	430b      	orrs	r3, r1
 8003d72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a78      	ldr	r2, [pc, #480]	; (8003f94 <UART_SetConfig+0x258>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d120      	bne.n	8003dfa <UART_SetConfig+0xbe>
 8003db8:	4b77      	ldr	r3, [pc, #476]	; (8003f98 <UART_SetConfig+0x25c>)
 8003dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbc:	f003 0303 	and.w	r3, r3, #3
 8003dc0:	2b03      	cmp	r3, #3
 8003dc2:	d817      	bhi.n	8003df4 <UART_SetConfig+0xb8>
 8003dc4:	a201      	add	r2, pc, #4	; (adr r2, 8003dcc <UART_SetConfig+0x90>)
 8003dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dca:	bf00      	nop
 8003dcc:	08003ddd 	.word	0x08003ddd
 8003dd0:	08003de9 	.word	0x08003de9
 8003dd4:	08003def 	.word	0x08003def
 8003dd8:	08003de3 	.word	0x08003de3
 8003ddc:	2300      	movs	r3, #0
 8003dde:	77fb      	strb	r3, [r7, #31]
 8003de0:	e01d      	b.n	8003e1e <UART_SetConfig+0xe2>
 8003de2:	2302      	movs	r3, #2
 8003de4:	77fb      	strb	r3, [r7, #31]
 8003de6:	e01a      	b.n	8003e1e <UART_SetConfig+0xe2>
 8003de8:	2304      	movs	r3, #4
 8003dea:	77fb      	strb	r3, [r7, #31]
 8003dec:	e017      	b.n	8003e1e <UART_SetConfig+0xe2>
 8003dee:	2308      	movs	r3, #8
 8003df0:	77fb      	strb	r3, [r7, #31]
 8003df2:	e014      	b.n	8003e1e <UART_SetConfig+0xe2>
 8003df4:	2310      	movs	r3, #16
 8003df6:	77fb      	strb	r3, [r7, #31]
 8003df8:	e011      	b.n	8003e1e <UART_SetConfig+0xe2>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a67      	ldr	r2, [pc, #412]	; (8003f9c <UART_SetConfig+0x260>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d102      	bne.n	8003e0a <UART_SetConfig+0xce>
 8003e04:	2300      	movs	r3, #0
 8003e06:	77fb      	strb	r3, [r7, #31]
 8003e08:	e009      	b.n	8003e1e <UART_SetConfig+0xe2>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a64      	ldr	r2, [pc, #400]	; (8003fa0 <UART_SetConfig+0x264>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d102      	bne.n	8003e1a <UART_SetConfig+0xde>
 8003e14:	2300      	movs	r3, #0
 8003e16:	77fb      	strb	r3, [r7, #31]
 8003e18:	e001      	b.n	8003e1e <UART_SetConfig+0xe2>
 8003e1a:	2310      	movs	r3, #16
 8003e1c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e26:	d15a      	bne.n	8003ede <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003e28:	7ffb      	ldrb	r3, [r7, #31]
 8003e2a:	2b08      	cmp	r3, #8
 8003e2c:	d827      	bhi.n	8003e7e <UART_SetConfig+0x142>
 8003e2e:	a201      	add	r2, pc, #4	; (adr r2, 8003e34 <UART_SetConfig+0xf8>)
 8003e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e34:	08003e59 	.word	0x08003e59
 8003e38:	08003e61 	.word	0x08003e61
 8003e3c:	08003e69 	.word	0x08003e69
 8003e40:	08003e7f 	.word	0x08003e7f
 8003e44:	08003e6f 	.word	0x08003e6f
 8003e48:	08003e7f 	.word	0x08003e7f
 8003e4c:	08003e7f 	.word	0x08003e7f
 8003e50:	08003e7f 	.word	0x08003e7f
 8003e54:	08003e77 	.word	0x08003e77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e58:	f7fe fda2 	bl	80029a0 <HAL_RCC_GetPCLK1Freq>
 8003e5c:	61b8      	str	r0, [r7, #24]
        break;
 8003e5e:	e013      	b.n	8003e88 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e60:	f7fe fdc0 	bl	80029e4 <HAL_RCC_GetPCLK2Freq>
 8003e64:	61b8      	str	r0, [r7, #24]
        break;
 8003e66:	e00f      	b.n	8003e88 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e68:	4b4e      	ldr	r3, [pc, #312]	; (8003fa4 <UART_SetConfig+0x268>)
 8003e6a:	61bb      	str	r3, [r7, #24]
        break;
 8003e6c:	e00c      	b.n	8003e88 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e6e:	f7fe fd21 	bl	80028b4 <HAL_RCC_GetSysClockFreq>
 8003e72:	61b8      	str	r0, [r7, #24]
        break;
 8003e74:	e008      	b.n	8003e88 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e7a:	61bb      	str	r3, [r7, #24]
        break;
 8003e7c:	e004      	b.n	8003e88 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	77bb      	strb	r3, [r7, #30]
        break;
 8003e86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d074      	beq.n	8003f78 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	005a      	lsls	r2, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	085b      	lsrs	r3, r3, #1
 8003e98:	441a      	add	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	2b0f      	cmp	r3, #15
 8003ea8:	d916      	bls.n	8003ed8 <UART_SetConfig+0x19c>
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb0:	d212      	bcs.n	8003ed8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	f023 030f 	bic.w	r3, r3, #15
 8003eba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	085b      	lsrs	r3, r3, #1
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	89fb      	ldrh	r3, [r7, #14]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	89fa      	ldrh	r2, [r7, #14]
 8003ed4:	60da      	str	r2, [r3, #12]
 8003ed6:	e04f      	b.n	8003f78 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	77bb      	strb	r3, [r7, #30]
 8003edc:	e04c      	b.n	8003f78 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ede:	7ffb      	ldrb	r3, [r7, #31]
 8003ee0:	2b08      	cmp	r3, #8
 8003ee2:	d828      	bhi.n	8003f36 <UART_SetConfig+0x1fa>
 8003ee4:	a201      	add	r2, pc, #4	; (adr r2, 8003eec <UART_SetConfig+0x1b0>)
 8003ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eea:	bf00      	nop
 8003eec:	08003f11 	.word	0x08003f11
 8003ef0:	08003f19 	.word	0x08003f19
 8003ef4:	08003f21 	.word	0x08003f21
 8003ef8:	08003f37 	.word	0x08003f37
 8003efc:	08003f27 	.word	0x08003f27
 8003f00:	08003f37 	.word	0x08003f37
 8003f04:	08003f37 	.word	0x08003f37
 8003f08:	08003f37 	.word	0x08003f37
 8003f0c:	08003f2f 	.word	0x08003f2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f10:	f7fe fd46 	bl	80029a0 <HAL_RCC_GetPCLK1Freq>
 8003f14:	61b8      	str	r0, [r7, #24]
        break;
 8003f16:	e013      	b.n	8003f40 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f18:	f7fe fd64 	bl	80029e4 <HAL_RCC_GetPCLK2Freq>
 8003f1c:	61b8      	str	r0, [r7, #24]
        break;
 8003f1e:	e00f      	b.n	8003f40 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f20:	4b20      	ldr	r3, [pc, #128]	; (8003fa4 <UART_SetConfig+0x268>)
 8003f22:	61bb      	str	r3, [r7, #24]
        break;
 8003f24:	e00c      	b.n	8003f40 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f26:	f7fe fcc5 	bl	80028b4 <HAL_RCC_GetSysClockFreq>
 8003f2a:	61b8      	str	r0, [r7, #24]
        break;
 8003f2c:	e008      	b.n	8003f40 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f32:	61bb      	str	r3, [r7, #24]
        break;
 8003f34:	e004      	b.n	8003f40 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	77bb      	strb	r3, [r7, #30]
        break;
 8003f3e:	bf00      	nop
    }

    if (pclk != 0U)
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d018      	beq.n	8003f78 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	085a      	lsrs	r2, r3, #1
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	441a      	add	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f58:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	2b0f      	cmp	r3, #15
 8003f5e:	d909      	bls.n	8003f74 <UART_SetConfig+0x238>
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f66:	d205      	bcs.n	8003f74 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	60da      	str	r2, [r3, #12]
 8003f72:	e001      	b.n	8003f78 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003f84:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3720      	adds	r7, #32
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	efff69f3 	.word	0xefff69f3
 8003f94:	40013800 	.word	0x40013800
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	40004400 	.word	0x40004400
 8003fa0:	40004800 	.word	0x40004800
 8003fa4:	007a1200 	.word	0x007a1200

08003fa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00a      	beq.n	8004016 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403c:	f003 0310 	and.w	r3, r3, #16
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00a      	beq.n	800405a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405e:	f003 0320 	and.w	r3, r3, #32
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	430a      	orrs	r2, r1
 800407a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004084:	2b00      	cmp	r3, #0
 8004086:	d01a      	beq.n	80040be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040a6:	d10a      	bne.n	80040be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00a      	beq.n	80040e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	605a      	str	r2, [r3, #4]
  }
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b098      	sub	sp, #96	; 0x60
 80040f0:	af02      	add	r7, sp, #8
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040fc:	f7fc fd44 	bl	8000b88 <HAL_GetTick>
 8004100:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0308 	and.w	r3, r3, #8
 800410c:	2b08      	cmp	r3, #8
 800410e:	d12e      	bne.n	800416e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004110:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004118:	2200      	movs	r2, #0
 800411a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f88c 	bl	800423c <UART_WaitOnFlagUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d021      	beq.n	800416e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004132:	e853 3f00 	ldrex	r3, [r3]
 8004136:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800413a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800413e:	653b      	str	r3, [r7, #80]	; 0x50
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	461a      	mov	r2, r3
 8004146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004148:	647b      	str	r3, [r7, #68]	; 0x44
 800414a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800414e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004150:	e841 2300 	strex	r3, r2, [r1]
 8004154:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1e6      	bne.n	800412a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2220      	movs	r2, #32
 8004160:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e062      	b.n	8004234 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b04      	cmp	r3, #4
 800417a:	d149      	bne.n	8004210 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800417c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004184:	2200      	movs	r2, #0
 8004186:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f856 	bl	800423c <UART_WaitOnFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d03c      	beq.n	8004210 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	e853 3f00 	ldrex	r3, [r3]
 80041a2:	623b      	str	r3, [r7, #32]
   return(result);
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041b4:	633b      	str	r3, [r7, #48]	; 0x30
 80041b6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041bc:	e841 2300 	strex	r3, r2, [r1]
 80041c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1e6      	bne.n	8004196 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	3308      	adds	r3, #8
 80041ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	e853 3f00 	ldrex	r3, [r3]
 80041d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0301 	bic.w	r3, r3, #1
 80041de:	64bb      	str	r3, [r7, #72]	; 0x48
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3308      	adds	r3, #8
 80041e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041e8:	61fa      	str	r2, [r7, #28]
 80041ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ec:	69b9      	ldr	r1, [r7, #24]
 80041ee:	69fa      	ldr	r2, [r7, #28]
 80041f0:	e841 2300 	strex	r3, r2, [r1]
 80041f4:	617b      	str	r3, [r7, #20]
   return(result);
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1e5      	bne.n	80041c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2220      	movs	r2, #32
 8004200:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e011      	b.n	8004234 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2220      	movs	r2, #32
 8004214:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2220      	movs	r2, #32
 800421a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3758      	adds	r7, #88	; 0x58
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	603b      	str	r3, [r7, #0]
 8004248:	4613      	mov	r3, r2
 800424a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800424c:	e049      	b.n	80042e2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004254:	d045      	beq.n	80042e2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004256:	f7fc fc97 	bl	8000b88 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	429a      	cmp	r2, r3
 8004264:	d302      	bcc.n	800426c <UART_WaitOnFlagUntilTimeout+0x30>
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e048      	b.n	8004302 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0304 	and.w	r3, r3, #4
 800427a:	2b00      	cmp	r3, #0
 800427c:	d031      	beq.n	80042e2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	2b08      	cmp	r3, #8
 800428a:	d110      	bne.n	80042ae <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2208      	movs	r2, #8
 8004292:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 f838 	bl	800430a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2208      	movs	r2, #8
 800429e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e029      	b.n	8004302 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	69db      	ldr	r3, [r3, #28]
 80042b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042bc:	d111      	bne.n	80042e2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 f81e 	bl	800430a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e00f      	b.n	8004302 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	69da      	ldr	r2, [r3, #28]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	4013      	ands	r3, r2
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	bf0c      	ite	eq
 80042f2:	2301      	moveq	r3, #1
 80042f4:	2300      	movne	r3, #0
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	461a      	mov	r2, r3
 80042fa:	79fb      	ldrb	r3, [r7, #7]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d0a6      	beq.n	800424e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800430a:	b480      	push	{r7}
 800430c:	b095      	sub	sp, #84	; 0x54
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800431a:	e853 3f00 	ldrex	r3, [r3]
 800431e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004322:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004326:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	461a      	mov	r2, r3
 800432e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004330:	643b      	str	r3, [r7, #64]	; 0x40
 8004332:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004334:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004336:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004338:	e841 2300 	strex	r3, r2, [r1]
 800433c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800433e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e6      	bne.n	8004312 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3308      	adds	r3, #8
 800434a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	e853 3f00 	ldrex	r3, [r3]
 8004352:	61fb      	str	r3, [r7, #28]
   return(result);
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	f023 0301 	bic.w	r3, r3, #1
 800435a:	64bb      	str	r3, [r7, #72]	; 0x48
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	3308      	adds	r3, #8
 8004362:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004364:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004366:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004368:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800436a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800436c:	e841 2300 	strex	r3, r2, [r1]
 8004370:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1e5      	bne.n	8004344 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800437c:	2b01      	cmp	r3, #1
 800437e:	d118      	bne.n	80043b2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	e853 3f00 	ldrex	r3, [r3]
 800438c:	60bb      	str	r3, [r7, #8]
   return(result);
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	f023 0310 	bic.w	r3, r3, #16
 8004394:	647b      	str	r3, [r7, #68]	; 0x44
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	461a      	mov	r2, r3
 800439c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800439e:	61bb      	str	r3, [r7, #24]
 80043a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a2:	6979      	ldr	r1, [r7, #20]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	e841 2300 	strex	r3, r2, [r1]
 80043aa:	613b      	str	r3, [r7, #16]
   return(result);
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1e6      	bne.n	8004380 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2220      	movs	r2, #32
 80043b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80043c6:	bf00      	nop
 80043c8:	3754      	adds	r7, #84	; 0x54
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b084      	sub	sp, #16
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f7ff fc8d 	bl	8003d10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043f6:	bf00      	nop
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b088      	sub	sp, #32
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	e853 3f00 	ldrex	r3, [r3]
 8004412:	60bb      	str	r3, [r7, #8]
   return(result);
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800441a:	61fb      	str	r3, [r7, #28]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	461a      	mov	r2, r3
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	61bb      	str	r3, [r7, #24]
 8004426:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004428:	6979      	ldr	r1, [r7, #20]
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	e841 2300 	strex	r3, r2, [r1]
 8004430:	613b      	str	r3, [r7, #16]
   return(result);
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1e6      	bne.n	8004406 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2220      	movs	r2, #32
 800443c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7ff fc59 	bl	8003cfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800444a:	bf00      	nop
 800444c:	3720      	adds	r7, #32
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8004466:	b580      	push	{r7, lr}
 8004468:	b084      	sub	sp, #16
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	460b      	mov	r3, r1
 8004470:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	78fa      	ldrb	r2, [r7, #3]
 8004478:	4611      	mov	r1, r2
 800447a:	4618      	mov	r0, r3
 800447c:	f000 fb85 	bl	8004b8a <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f000 fba0 	bl	8004bca <SX1278_hw_SPIReadByte>
 800448a:	4603      	mov	r3, r0
 800448c:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2101      	movs	r1, #1
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fb3d 	bl	8004b14 <SX1278_hw_SetNSS>
	return tmp;
 800449a:	7bfb      	ldrb	r3, [r7, #15]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	460b      	mov	r3, r1
 80044ae:	70fb      	strb	r3, [r7, #3]
 80044b0:	4613      	mov	r3, r2
 80044b2:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2100      	movs	r1, #0
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 fb2a 	bl	8004b14 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	78fb      	ldrb	r3, [r7, #3]
 80044c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	4619      	mov	r1, r3
 80044ce:	4610      	mov	r0, r2
 80044d0:	f000 fb5b 	bl	8004b8a <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	78ba      	ldrb	r2, [r7, #2]
 80044da:	4611      	mov	r1, r2
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 fb54 	bl	8004b8a <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2101      	movs	r1, #1
 80044e8:	4618      	mov	r0, r3
 80044ea:	f000 fb13 	bl	8004b14 <SX1278_hw_SetNSS>
}
 80044ee:	bf00      	nop
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 80044f6:	b590      	push	{r4, r7, lr}
 80044f8:	b087      	sub	sp, #28
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	60f8      	str	r0, [r7, #12]
 80044fe:	607a      	str	r2, [r7, #4]
 8004500:	461a      	mov	r2, r3
 8004502:	460b      	mov	r3, r1
 8004504:	72fb      	strb	r3, [r7, #11]
 8004506:	4613      	mov	r3, r2
 8004508:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 800450a:	7abb      	ldrb	r3, [r7, #10]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d927      	bls.n	8004560 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2100      	movs	r1, #0
 8004516:	4618      	mov	r0, r3
 8004518:	f000 fafc 	bl	8004b14 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	7afa      	ldrb	r2, [r7, #11]
 8004522:	4611      	mov	r1, r2
 8004524:	4618      	mov	r0, r3
 8004526:	f000 fb30 	bl	8004b8a <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800452a:	2300      	movs	r3, #0
 800452c:	75fb      	strb	r3, [r7, #23]
 800452e:	e00c      	b.n	800454a <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6819      	ldr	r1, [r3, #0]
 8004534:	7dfb      	ldrb	r3, [r7, #23]
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	18d4      	adds	r4, r2, r3
 800453a:	4608      	mov	r0, r1
 800453c:	f000 fb45 	bl	8004bca <SX1278_hw_SPIReadByte>
 8004540:	4603      	mov	r3, r0
 8004542:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8004544:	7dfb      	ldrb	r3, [r7, #23]
 8004546:	3301      	adds	r3, #1
 8004548:	75fb      	strb	r3, [r7, #23]
 800454a:	7dfa      	ldrb	r2, [r7, #23]
 800454c:	7abb      	ldrb	r3, [r7, #10]
 800454e:	429a      	cmp	r2, r3
 8004550:	d3ee      	bcc.n	8004530 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2101      	movs	r1, #1
 8004558:	4618      	mov	r0, r3
 800455a:	f000 fadb 	bl	8004b14 <SX1278_hw_SetNSS>
 800455e:	e000      	b.n	8004562 <SX1278_SPIBurstRead+0x6c>
		return;
 8004560:	bf00      	nop
	}
}
 8004562:	371c      	adds	r7, #28
 8004564:	46bd      	mov	sp, r7
 8004566:	bd90      	pop	{r4, r7, pc}

08004568 <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	607a      	str	r2, [r7, #4]
 8004572:	461a      	mov	r2, r3
 8004574:	460b      	mov	r3, r1
 8004576:	72fb      	strb	r3, [r7, #11]
 8004578:	4613      	mov	r3, r2
 800457a:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 800457c:	7abb      	ldrb	r3, [r7, #10]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d929      	bls.n	80045d6 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2100      	movs	r1, #0
 8004588:	4618      	mov	r0, r3
 800458a:	f000 fac3 	bl	8004b14 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	7afb      	ldrb	r3, [r7, #11]
 8004594:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004598:	b2db      	uxtb	r3, r3
 800459a:	4619      	mov	r1, r3
 800459c:	4610      	mov	r0, r2
 800459e:	f000 faf4 	bl	8004b8a <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80045a2:	2300      	movs	r3, #0
 80045a4:	75fb      	strb	r3, [r7, #23]
 80045a6:	e00b      	b.n	80045c0 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6818      	ldr	r0, [r3, #0]
 80045ac:	7dfb      	ldrb	r3, [r7, #23]
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	4413      	add	r3, r2
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	4619      	mov	r1, r3
 80045b6:	f000 fae8 	bl	8004b8a <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80045ba:	7dfb      	ldrb	r3, [r7, #23]
 80045bc:	3301      	adds	r3, #1
 80045be:	75fb      	strb	r3, [r7, #23]
 80045c0:	7dfa      	ldrb	r2, [r7, #23]
 80045c2:	7abb      	ldrb	r3, [r7, #10]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d3ef      	bcc.n	80045a8 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2101      	movs	r1, #1
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 faa0 	bl	8004b14 <SX1278_hw_SetNSS>
 80045d4:	e000      	b.n	80045d8 <SX1278_SPIBurstWrite+0x70>
		return;
 80045d6:	bf00      	nop
	}
}
 80045d8:	3718      	adds	r7, #24
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
	...

080045e0 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 f90d 	bl	8004808 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 80045ee:	200f      	movs	r0, #15
 80045f0:	f000 fb11 	bl	8004c16 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f917 	bl	8004828 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004600:	f04f 0000 	mov.w	r0, #0
 8004604:	f04f 0100 	mov.w	r1, #0
 8004608:	04d9      	lsls	r1, r3, #19
 800460a:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 800460e:	04d0      	lsls	r0, r2, #19
 8004610:	4a6f      	ldr	r2, [pc, #444]	; (80047d0 <SX1278_config+0x1f0>)
 8004612:	f04f 0300 	mov.w	r3, #0
 8004616:	f7fb fdd7 	bl	80001c8 <__aeabi_uldivmod>
 800461a:	4602      	mov	r2, r0
 800461c:	460b      	mov	r3, r1
 800461e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8004622:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004626:	f04f 0200 	mov.w	r2, #0
 800462a:	f04f 0300 	mov.w	r3, #0
 800462e:	0c02      	lsrs	r2, r0, #16
 8004630:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004634:	0c0b      	lsrs	r3, r1, #16
 8004636:	b2d3      	uxtb	r3, r2
 8004638:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 800463a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	f04f 0300 	mov.w	r3, #0
 8004646:	0a02      	lsrs	r2, r0, #8
 8004648:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800464c:	0a0b      	lsrs	r3, r1, #8
 800464e:	b2d3      	uxtb	r3, r2
 8004650:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8004652:	7c3b      	ldrb	r3, [r7, #16]
 8004654:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 8004656:	f107 020c 	add.w	r2, r7, #12
 800465a:	2303      	movs	r3, #3
 800465c:	2106      	movs	r1, #6
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7ff ff82 	bl	8004568 <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8004664:	2234      	movs	r2, #52	; 0x34
 8004666:	2139      	movs	r1, #57	; 0x39
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f7ff ff1b 	bl	80044a4 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	7c1b      	ldrb	r3, [r3, #16]
 8004672:	461a      	mov	r2, r3
 8004674:	4b57      	ldr	r3, [pc, #348]	; (80047d4 <SX1278_config+0x1f4>)
 8004676:	5c9b      	ldrb	r3, [r3, r2]
 8004678:	461a      	mov	r2, r3
 800467a:	2109      	movs	r1, #9
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f7ff ff11 	bl	80044a4 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8004682:	220b      	movs	r2, #11
 8004684:	210b      	movs	r1, #11
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7ff ff0c 	bl	80044a4 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 800468c:	2223      	movs	r2, #35	; 0x23
 800468e:	210c      	movs	r1, #12
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f7ff ff07 	bl	80044a4 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	7c5b      	ldrb	r3, [r3, #17]
 800469a:	461a      	mov	r2, r3
 800469c:	4b4e      	ldr	r3, [pc, #312]	; (80047d8 <SX1278_config+0x1f8>)
 800469e:	5c9b      	ldrb	r3, [r3, r2]
 80046a0:	2b06      	cmp	r3, #6
 80046a2:	d147      	bne.n	8004734 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	7c9b      	ldrb	r3, [r3, #18]
 80046a8:	461a      	mov	r2, r3
 80046aa:	4b4c      	ldr	r3, [pc, #304]	; (80047dc <SX1278_config+0x1fc>)
 80046ac:	5c9b      	ldrb	r3, [r3, r2]
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	7cdb      	ldrb	r3, [r3, #19]
 80046b6:	4619      	mov	r1, r3
 80046b8:	4b49      	ldr	r3, [pc, #292]	; (80047e0 <SX1278_config+0x200>)
 80046ba:	5c5b      	ldrb	r3, [r3, r1]
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	4413      	add	r3, r2
 80046c2:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80046c4:	3301      	adds	r3, #1
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	461a      	mov	r2, r3
 80046ca:	211d      	movs	r1, #29
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f7ff fee9 	bl	80044a4 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	7c5b      	ldrb	r3, [r3, #17]
 80046d6:	461a      	mov	r2, r3
 80046d8:	4b3f      	ldr	r3, [pc, #252]	; (80047d8 <SX1278_config+0x1f8>)
 80046da:	5c9b      	ldrb	r3, [r3, r2]
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	7d1b      	ldrb	r3, [r3, #20]
 80046e4:	4619      	mov	r1, r3
 80046e6:	4b3f      	ldr	r3, [pc, #252]	; (80047e4 <SX1278_config+0x204>)
 80046e8:	5c5b      	ldrb	r3, [r3, r1]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	4413      	add	r3, r2
 80046f0:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80046f2:	3303      	adds	r3, #3
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	461a      	mov	r2, r3
 80046f8:	211e      	movs	r1, #30
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7ff fed2 	bl	80044a4 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 8004700:	2131      	movs	r1, #49	; 0x31
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7ff feaf 	bl	8004466 <SX1278_SPIRead>
 8004708:	4603      	mov	r3, r0
 800470a:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 800470c:	7bfb      	ldrb	r3, [r7, #15]
 800470e:	f023 0307 	bic.w	r3, r3, #7
 8004712:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8004714:	7bfb      	ldrb	r3, [r7, #15]
 8004716:	f043 0305 	orr.w	r3, r3, #5
 800471a:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 800471c:	7bfb      	ldrb	r3, [r7, #15]
 800471e:	461a      	mov	r2, r3
 8004720:	2131      	movs	r1, #49	; 0x31
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7ff febe 	bl	80044a4 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8004728:	220c      	movs	r2, #12
 800472a:	2137      	movs	r1, #55	; 0x37
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f7ff feb9 	bl	80044a4 <SX1278_SPIWrite>
 8004732:	e029      	b.n	8004788 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	7c9b      	ldrb	r3, [r3, #18]
 8004738:	461a      	mov	r2, r3
 800473a:	4b28      	ldr	r3, [pc, #160]	; (80047dc <SX1278_config+0x1fc>)
 800473c:	5c9b      	ldrb	r3, [r3, r2]
 800473e:	011b      	lsls	r3, r3, #4
 8004740:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	7cdb      	ldrb	r3, [r3, #19]
 8004746:	4619      	mov	r1, r3
 8004748:	4b25      	ldr	r3, [pc, #148]	; (80047e0 <SX1278_config+0x200>)
 800474a:	5c5b      	ldrb	r3, [r3, r1]
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8004750:	4413      	add	r3, r2
 8004752:	b2db      	uxtb	r3, r3
 8004754:	461a      	mov	r2, r3
 8004756:	211d      	movs	r1, #29
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7ff fea3 	bl	80044a4 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	7c5b      	ldrb	r3, [r3, #17]
 8004762:	461a      	mov	r2, r3
 8004764:	4b1c      	ldr	r3, [pc, #112]	; (80047d8 <SX1278_config+0x1f8>)
 8004766:	5c9b      	ldrb	r3, [r3, r2]
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	7d1b      	ldrb	r3, [r3, #20]
 8004770:	4619      	mov	r1, r3
 8004772:	4b1c      	ldr	r3, [pc, #112]	; (80047e4 <SX1278_config+0x204>)
 8004774:	5c5b      	ldrb	r3, [r3, r1]
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800477a:	4413      	add	r3, r2
 800477c:	b2db      	uxtb	r3, r3
 800477e:	461a      	mov	r2, r3
 8004780:	211e      	movs	r1, #30
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7ff fe8e 	bl	80044a4 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8004788:	2204      	movs	r2, #4
 800478a:	2126      	movs	r1, #38	; 0x26
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff fe89 	bl	80044a4 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8004792:	2208      	movs	r2, #8
 8004794:	211f      	movs	r1, #31
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7ff fe84 	bl	80044a4 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 800479c:	2200      	movs	r2, #0
 800479e:	2120      	movs	r1, #32
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7ff fe7f 	bl	80044a4 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 80047a6:	2208      	movs	r2, #8
 80047a8:	2121      	movs	r1, #33	; 0x21
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7ff fe7a 	bl	80044a4 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 80047b0:	2201      	movs	r2, #1
 80047b2:	2141      	movs	r1, #65	; 0x41
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7ff fe75 	bl	80044a4 <SX1278_SPIWrite>
	module->readBytes = 0;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	SX1278_standby(module); //Entry standby mode
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f810 	bl	80047e8 <SX1278_standby>
}
 80047c8:	bf00      	nop
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	01e84800 	.word	0x01e84800
 80047d4:	080051a8 	.word	0x080051a8
 80047d8:	080051ac 	.word	0x080051ac
 80047dc:	080051b4 	.word	0x080051b4
 80047e0:	080051c0 	.word	0x080051c0
 80047e4:	080051c4 	.word	0x080051c4

080047e8 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80047f0:	2209      	movs	r2, #9
 80047f2:	2101      	movs	r1, #1
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7ff fe55 	bl	80044a4 <SX1278_SPIWrite>
	module->status = STANDBY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	759a      	strb	r2, [r3, #22]
}
 8004800:	bf00      	nop
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8004810:	2208      	movs	r2, #8
 8004812:	2101      	movs	r1, #1
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f7ff fe45 	bl	80044a4 <SX1278_SPIWrite>
	module->status = SLEEP;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	759a      	strb	r2, [r3, #22]
}
 8004820:	bf00      	nop
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8004830:	2288      	movs	r2, #136	; 0x88
 8004832:	2101      	movs	r1, #1
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f7ff fe35 	bl	80044a4 <SX1278_SPIWrite>
}
 800483a:	bf00      	nop
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 8004842:	b580      	push	{r7, lr}
 8004844:	b082      	sub	sp, #8
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 800484a:	22ff      	movs	r2, #255	; 0xff
 800484c:	2112      	movs	r1, #18
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7ff fe28 	bl	80044a4 <SX1278_SPIWrite>
}
 8004854:	bf00      	nop
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	460b      	mov	r3, r1
 8004866:	607a      	str	r2, [r7, #4]
 8004868:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	7afa      	ldrb	r2, [r7, #11]
 800486e:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f7ff feb5 	bl	80045e0 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8004876:	2284      	movs	r2, #132	; 0x84
 8004878:	214d      	movs	r1, #77	; 0x4d
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f7ff fe12 	bl	80044a4 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8004880:	22ff      	movs	r2, #255	; 0xff
 8004882:	2124      	movs	r1, #36	; 0x24
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f7ff fe0d 	bl	80044a4 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 800488a:	2201      	movs	r2, #1
 800488c:	2140      	movs	r1, #64	; 0x40
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f7ff fe08 	bl	80044a4 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8004894:	223f      	movs	r2, #63	; 0x3f
 8004896:	2111      	movs	r1, #17
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f7ff fe03 	bl	80044a4 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f7ff ffcf 	bl	8004842 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 80048a4:	7afb      	ldrb	r3, [r7, #11]
 80048a6:	461a      	mov	r2, r3
 80048a8:	2122      	movs	r1, #34	; 0x22
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f7ff fdfa 	bl	80044a4 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 80048b0:	210f      	movs	r1, #15
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f7ff fdd7 	bl	8004466 <SX1278_SPIRead>
 80048b8:	4603      	mov	r3, r0
 80048ba:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 80048bc:	7dfb      	ldrb	r3, [r7, #23]
 80048be:	461a      	mov	r2, r3
 80048c0:	210d      	movs	r1, #13
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f7ff fdee 	bl	80044a4 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 80048c8:	228d      	movs	r2, #141	; 0x8d
 80048ca:	2101      	movs	r1, #1
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f7ff fde9 	bl	80044a4 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80048da:	2118      	movs	r1, #24
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f7ff fdc2 	bl	8004466 <SX1278_SPIRead>
 80048e2:	4603      	mov	r3, r0
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b04      	cmp	r3, #4
 80048ea:	d104      	bne.n	80048f6 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2203      	movs	r2, #3
 80048f0:	759a      	strb	r2, [r3, #22]
			return 1;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e013      	b.n	800491e <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	3b01      	subs	r3, #1
 80048fa:	607b      	str	r3, [r7, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d109      	bne.n	8004916 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f000 f91b 	bl	8004b42 <SX1278_hw_Reset>
			SX1278_config(module);
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f7ff fe67 	bl	80045e0 <SX1278_config>
			return 0;
 8004912:	2300      	movs	r3, #0
 8004914:	e003      	b.n	800491e <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8004916:	2001      	movs	r0, #1
 8004918:	f000 f97d 	bl	8004c16 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 800491c:	e7dd      	b.n	80048da <SX1278_LoRaEntryRx+0x7e>
	}
}
 800491e:	4618      	mov	r0, r3
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 8004926:	b580      	push	{r7, lr}
 8004928:	b084      	sub	sp, #16
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f000 f97a 	bl	8004c2c <SX1278_hw_GetDIO0>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d030      	beq.n	80049a0 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	3317      	adds	r3, #23
 8004942:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004946:	2100      	movs	r1, #0
 8004948:	4618      	mov	r0, r3
 800494a:	f000 fbcb 	bl	80050e4 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 800494e:	2110      	movs	r1, #16
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f7ff fd88 	bl	8004466 <SX1278_SPIRead>
 8004956:	4603      	mov	r3, r0
 8004958:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 800495a:	7bbb      	ldrb	r3, [r7, #14]
 800495c:	461a      	mov	r2, r3
 800495e:	210d      	movs	r1, #13
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f7ff fd9f 	bl	80044a4 <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	7c5b      	ldrb	r3, [r3, #17]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d103      	bne.n	8004976 <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	7d5b      	ldrb	r3, [r3, #21]
 8004972:	73fb      	strb	r3, [r7, #15]
 8004974:	e005      	b.n	8004982 <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8004976:	2113      	movs	r1, #19
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f7ff fd74 	bl	8004466 <SX1278_SPIRead>
 800497e:	4603      	mov	r3, r0
 8004980:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f103 0217 	add.w	r2, r3, #23
 8004988:	7bfb      	ldrb	r3, [r7, #15]
 800498a:	2100      	movs	r1, #0
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7ff fdb2 	bl	80044f6 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	7bfa      	ldrb	r2, [r7, #15]
 8004996:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
		SX1278_clearLoRaIrq(module);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7ff ff51 	bl	8004842 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <SX1278_LoRaTxPacket>:
		}
	}
}

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b084      	sub	sp, #16
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	60f8      	str	r0, [r7, #12]
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	603b      	str	r3, [r7, #0]
 80049ba:	4613      	mov	r3, r2
 80049bc:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 80049be:	79fb      	ldrb	r3, [r7, #7]
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	2100      	movs	r1, #0
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f7ff fdcf 	bl	8004568 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 80049ca:	228b      	movs	r2, #139	; 0x8b
 80049cc:	2101      	movs	r1, #1
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f7ff fd68 	bl	80044a4 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 f927 	bl	8004c2c <SX1278_hw_GetDIO0>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00b      	beq.n	80049fc <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 80049e4:	2112      	movs	r1, #18
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f7ff fd3d 	bl	8004466 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f7ff ff28 	bl	8004842 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f7ff fef8 	bl	80047e8 <SX1278_standby>
			return 1;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e013      	b.n	8004a24 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	603b      	str	r3, [r7, #0]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d109      	bne.n	8004a1c <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 f898 	bl	8004b42 <SX1278_hw_Reset>
			SX1278_config(module);
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f7ff fde4 	bl	80045e0 <SX1278_config>
			return 0;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	e003      	b.n	8004a24 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8004a1c:	2001      	movs	r0, #1
 8004a1e:	f000 f8fa 	bl	8004c16 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8004a22:	e7d7      	b.n	80049d4 <SX1278_LoRaTxPacket+0x26>
	}
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f000 f854 	bl	8004aea <SX1278_hw_init>
	module->frequency = frequency;
 8004a42:	68f9      	ldr	r1, [r7, #12]
 8004a44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a48:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	7e3a      	ldrb	r2, [r7, #24]
 8004a50:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	7f3a      	ldrb	r2, [r7, #28]
 8004a56:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004a5e:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004a66:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004a6e:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8004a76:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f7ff fdb1 	bl	80045e0 <SX1278_config>
}
 8004a7e:	bf00      	nop
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <SX1278_available>:

int SX1278_receive(SX1278_t *module, uint8_t length, uint32_t timeout) {
	return SX1278_LoRaEntryRx(module, length, timeout);
}

uint8_t SX1278_available(SX1278_t *module) {
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b082      	sub	sp, #8
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
	return SX1278_LoRaRxPacket(module);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7ff ff49 	bl	8004926 <SX1278_LoRaRxPacket>
 8004a94:	4603      	mov	r3, r0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <SX1278_read>:

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b084      	sub	sp, #16
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	60f8      	str	r0, [r7, #12]
 8004aa6:	60b9      	str	r1, [r7, #8]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8004ab2:	79fa      	ldrb	r2, [r7, #7]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d003      	beq.n	8004ac0 <SX1278_read+0x22>
		length = module->readBytes;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8004abe:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	3317      	adds	r3, #23
 8004ac4:	79fa      	ldrb	r2, [r7, #7]
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	68b8      	ldr	r0, [r7, #8]
 8004aca:	f000 fb37 	bl	800513c <memcpy>
	rxBuf[length] = '\0';
 8004ace:	79fb      	ldrb	r3, [r7, #7]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	return length;
 8004ae0:	79fb      	ldrb	r3, [r7, #7]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <SX1278_hw_init>:
#include <string.h>

#include "gpio.h"
#include "spi.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b082      	sub	sp, #8
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8004af2:	2101      	movs	r1, #1
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f80d 	bl	8004b14 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6858      	ldr	r0, [r3, #4]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	2201      	movs	r2, #1
 8004b06:	4619      	mov	r1, r3
 8004b08:	f7fc fc8a 	bl	8001420 <HAL_GPIO_WritePin>
}
 8004b0c:	bf00      	nop
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6958      	ldr	r0, [r3, #20]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	b299      	uxth	r1, r3
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	bf0c      	ite	eq
 8004b2e:	2301      	moveq	r3, #1
 8004b30:	2300      	movne	r3, #0
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	461a      	mov	r2, r3
 8004b36:	f7fc fc73 	bl	8001420 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8004b3a:	bf00      	nop
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b082      	sub	sp, #8
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7ff ffe1 	bl	8004b14 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6858      	ldr	r0, [r3, #4]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	4619      	mov	r1, r3
 8004b60:	f7fc fc5e 	bl	8001420 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8004b64:	2001      	movs	r0, #1
 8004b66:	f000 f856 	bl	8004c16 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6858      	ldr	r0, [r3, #4]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	2201      	movs	r2, #1
 8004b76:	4619      	mov	r1, r3
 8004b78:	f7fc fc52 	bl	8001420 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8004b7c:	2064      	movs	r0, #100	; 0x64
 8004b7e:	f000 f84a 	bl	8004c16 <SX1278_hw_DelayMs>
}
 8004b82:	bf00      	nop
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b082      	sub	sp, #8
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
 8004b92:	460b      	mov	r3, r1
 8004b94:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8004b96:	2100      	movs	r1, #0
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7ff ffbb 	bl	8004b14 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6998      	ldr	r0, [r3, #24]
 8004ba2:	1cf9      	adds	r1, r7, #3
 8004ba4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f7fd ffe0 	bl	8002b6e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8004bae:	bf00      	nop
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7fe fb71 	bl	800329c <HAL_SPI_GetState>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d1f7      	bne.n	8004bb0 <SX1278_hw_SPICommand+0x26>
		;
}
 8004bc0:	bf00      	nop
 8004bc2:	bf00      	nop
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b086      	sub	sp, #24
 8004bce:	af02      	add	r7, sp, #8
 8004bd0:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8004bda:	2100      	movs	r1, #0
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7ff ff99 	bl	8004b14 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6998      	ldr	r0, [r3, #24]
 8004be6:	f107 020e 	add.w	r2, r7, #14
 8004bea:	f107 010f 	add.w	r1, r7, #15
 8004bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	f7fe f92f 	bl	8002e58 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8004bfa:	bf00      	nop
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7fe fb4b 	bl	800329c <HAL_SPI_GetState>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d1f7      	bne.n	8004bfc <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8004c0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b082      	sub	sp, #8
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7fb ffbe 	bl	8000ba0 <HAL_Delay>
}
 8004c24:	bf00      	nop
 8004c26:	3708      	adds	r7, #8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68da      	ldr	r2, [r3, #12]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4610      	mov	r0, r2
 8004c42:	f7fc fbd5 	bl	80013f0 <HAL_GPIO_ReadPin>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	bf0c      	ite	eq
 8004c4c:	2301      	moveq	r3, #1
 8004c4e:	2300      	movne	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <init_PEC15_Table>:

uint16_t pec15Table[256];


void init_PEC15_Table()
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
    uint16_t remainder;
    uint16_t i;
    uint16_t bit;
    for (i = 0; i < 256; i++)
 8004c62:	2300      	movs	r3, #0
 8004c64:	80bb      	strh	r3, [r7, #4]
 8004c66:	e025      	b.n	8004cb4 <init_PEC15_Table+0x58>
    {
        remainder = i << 7;
 8004c68:	88bb      	ldrh	r3, [r7, #4]
 8004c6a:	01db      	lsls	r3, r3, #7
 8004c6c:	80fb      	strh	r3, [r7, #6]
        for (bit = 8; bit > 0; --bit)
 8004c6e:	2308      	movs	r3, #8
 8004c70:	807b      	strh	r3, [r7, #2]
 8004c72:	e014      	b.n	8004c9e <init_PEC15_Table+0x42>
        {
            if (remainder & 0x4000)
 8004c74:	88fb      	ldrh	r3, [r7, #6]
 8004c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d009      	beq.n	8004c92 <init_PEC15_Table+0x36>
            {
                remainder = ((remainder << 1));
 8004c7e:	88fb      	ldrh	r3, [r7, #6]
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	80fb      	strh	r3, [r7, #6]
                remainder = (remainder ^ CRC15_POLY);
 8004c84:	88fb      	ldrh	r3, [r7, #6]
 8004c86:	f483 438b 	eor.w	r3, r3, #17792	; 0x4580
 8004c8a:	f083 0319 	eor.w	r3, r3, #25
 8004c8e:	80fb      	strh	r3, [r7, #6]
 8004c90:	e002      	b.n	8004c98 <init_PEC15_Table+0x3c>
            }
            else
            {
                remainder = ((remainder << 1));
 8004c92:	88fb      	ldrh	r3, [r7, #6]
 8004c94:	005b      	lsls	r3, r3, #1
 8004c96:	80fb      	strh	r3, [r7, #6]
        for (bit = 8; bit > 0; --bit)
 8004c98:	887b      	ldrh	r3, [r7, #2]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	807b      	strh	r3, [r7, #2]
 8004c9e:	887b      	ldrh	r3, [r7, #2]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e7      	bne.n	8004c74 <init_PEC15_Table+0x18>
            }
        }
        pec15Table[i] = remainder & 0xFFFF;
 8004ca4:	88bb      	ldrh	r3, [r7, #4]
 8004ca6:	4908      	ldr	r1, [pc, #32]	; (8004cc8 <init_PEC15_Table+0x6c>)
 8004ca8:	88fa      	ldrh	r2, [r7, #6]
 8004caa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (i = 0; i < 256; i++)
 8004cae:	88bb      	ldrh	r3, [r7, #4]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	80bb      	strh	r3, [r7, #4]
 8004cb4:	88bb      	ldrh	r3, [r7, #4]
 8004cb6:	2bff      	cmp	r3, #255	; 0xff
 8004cb8:	d9d6      	bls.n	8004c68 <init_PEC15_Table+0xc>
    }
}
 8004cba:	bf00      	nop
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr
 8004cc8:	20000170 	.word	0x20000170

08004ccc <AE_pec15>:

uint16_t AE_pec15(uint8_t* data, uint16_t len)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b087      	sub	sp, #28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	807b      	strh	r3, [r7, #2]
    uint16_t remainder, address;
    remainder = 16;//PEC seed
 8004cd8:	2310      	movs	r3, #16
 8004cda:	82fb      	strh	r3, [r7, #22]
    int i;
    for (i= 0; i < len; i++)
 8004cdc:	2300      	movs	r3, #0
 8004cde:	613b      	str	r3, [r7, #16]
 8004ce0:	e019      	b.n	8004d16 <AE_pec15+0x4a>
         * @brief history of data[i*2 + 1]
         * @NOTE TMS570Ls spi working with 16bit variables so we need to
         * @Note cast to uint8_t so we take the 2 offset but
         * @Note TMS570 use big endien memory layout so we have to add +1
         */
        address = ((remainder >> 7) ^ data[i]) & 0xff;//calculate PEC table address remainder = (remainder << 8 ) ^ pec15Table[address];
 8004ce2:	8afb      	ldrh	r3, [r7, #22]
 8004ce4:	09db      	lsrs	r3, r3, #7
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	6879      	ldr	r1, [r7, #4]
 8004cec:	440b      	add	r3, r1
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	4053      	eors	r3, r2
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	81fb      	strh	r3, [r7, #14]
        remainder = (remainder << 8) ^ pec15Table[address];
 8004cfa:	8afb      	ldrh	r3, [r7, #22]
 8004cfc:	021b      	lsls	r3, r3, #8
 8004cfe:	b21a      	sxth	r2, r3
 8004d00:	89fb      	ldrh	r3, [r7, #14]
 8004d02:	490b      	ldr	r1, [pc, #44]	; (8004d30 <AE_pec15+0x64>)
 8004d04:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004d08:	b21b      	sxth	r3, r3
 8004d0a:	4053      	eors	r3, r2
 8004d0c:	b21b      	sxth	r3, r3
 8004d0e:	82fb      	strh	r3, [r7, #22]
    for (i= 0; i < len; i++)
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	3301      	adds	r3, #1
 8004d14:	613b      	str	r3, [r7, #16]
 8004d16:	887b      	ldrh	r3, [r7, #2]
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	dbe1      	blt.n	8004ce2 <AE_pec15+0x16>
    }
    return (remainder * 2);//The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 8004d1e:	8afb      	ldrh	r3, [r7, #22]
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	b29b      	uxth	r3, r3
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	371c      	adds	r7, #28
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	20000170 	.word	0x20000170

08004d34 <ugvMain>:
/**
 * @brief system main function
 * @return none
 */
void ugvMain(void)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
	systemInitialize();
 8004d38:	f000 f816 	bl	8004d68 <systemInitialize>
//		loreRxTxMutex = LORA_TX_STATUS;
//		ret = SX1278_LoRaEntryTx(&SX1278, 8, 2000);
//		ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) txMsg,
//								  8, LORA_TIMEOUT);

		loreRxTxMutex = LORA_RX_STATUS;
 8004d3c:	4b07      	ldr	r3, [pc, #28]	; (8004d5c <ugvMain+0x28>)
 8004d3e:	2201      	movs	r2, #1
 8004d40:	701a      	strb	r2, [r3, #0]
		ret = SX1278_LoRaEntryRx(&SX1278, sizeof(loraRx), LORA_TIMEOUT);
 8004d42:	2203      	movs	r2, #3
 8004d44:	211c      	movs	r1, #28
 8004d46:	4806      	ldr	r0, [pc, #24]	; (8004d60 <ugvMain+0x2c>)
 8004d48:	f7ff fd88 	bl	800485c <SX1278_LoRaEntryRx>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	4a05      	ldr	r2, [pc, #20]	; (8004d64 <ugvMain+0x30>)
 8004d50:	6013      	str	r3, [r2, #0]
//		{
//			transtmitPackage(&loraDataRx);
//			loraSendFlag = 0;
//		}

		HAL_Delay(1000);
 8004d52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d56:	f7fb ff23 	bl	8000ba0 <HAL_Delay>
		loreRxTxMutex = LORA_RX_STATUS;
 8004d5a:	e7ef      	b.n	8004d3c <ugvMain+0x8>
 8004d5c:	20000370 	.word	0x20000370
 8004d60:	20000398 	.word	0x20000398
 8004d64:	20000374 	.word	0x20000374

08004d68 <systemInitialize>:
/**
 * @brief initialize peripheral and drivers
 * @return none
 */
static void systemInitialize()
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
	init_PEC15_Table();
 8004d6c:	f7ff ff76 	bl	8004c5c <init_PEC15_Table>
	loraInit(&SX1278_hw, &SX1278);
 8004d70:	4904      	ldr	r1, [pc, #16]	; (8004d84 <systemInitialize+0x1c>)
 8004d72:	4805      	ldr	r0, [pc, #20]	; (8004d88 <systemInitialize+0x20>)
 8004d74:	f000 f80c 	bl	8004d90 <loraInit>
	HAL_IWDG_Init(&hiwdg);
 8004d78:	4804      	ldr	r0, [pc, #16]	; (8004d8c <systemInitialize+0x24>)
 8004d7a:	f7fc fb81 	bl	8001480 <HAL_IWDG_Init>
}
 8004d7e:	bf00      	nop
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	20000398 	.word	0x20000398
 8004d88:	20000378 	.word	0x20000378
 8004d8c:	2000002c 	.word	0x2000002c

08004d90 <loraInit>:
 * @param[in] lora hardware global variable
 * @param[in] lora global variable
 * @return 1 if success else 0(timeout)
 */
static int loraInit(SX1278_hw_t *sx1278Hw, SX1278_t *sx1278)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b08a      	sub	sp, #40	; 0x28
 8004d94:	af06      	add	r7, sp, #24
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
	int ret;

	sx1278Hw->dio0.port = DIO0_GPIO_Port;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a1c      	ldr	r2, [pc, #112]	; (8004e10 <loraInit+0x80>)
 8004d9e:	60da      	str	r2, [r3, #12]
	sx1278Hw->dio0.pin = DIO0_Pin;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	609a      	str	r2, [r3, #8]
	sx1278Hw->nss.port = NSS_GPIO_Port;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004dac:	615a      	str	r2, [r3, #20]
	sx1278Hw->nss.pin = NSS_Pin;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2210      	movs	r2, #16
 8004db2:	611a      	str	r2, [r3, #16]
	sx1278Hw->reset.port = GPIOB;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a16      	ldr	r2, [pc, #88]	; (8004e10 <loraInit+0x80>)
 8004db8:	605a      	str	r2, [r3, #4]
	sx1278Hw->reset.pin = GPIO_PIN_1;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2202      	movs	r2, #2
 8004dbe:	601a      	str	r2, [r3, #0]
	sx1278Hw->spi = &hspi1;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a14      	ldr	r2, [pc, #80]	; (8004e14 <loraInit+0x84>)
 8004dc4:	619a      	str	r2, [r3, #24]

	sx1278->hw = sx1278Hw;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	601a      	str	r2, [r3, #0]

	SX1278_init(sx1278, 434000000, SX1278_POWER_11DBM, SX1278_LORA_SF_7,
 8004dcc:	230a      	movs	r3, #10
 8004dce:	9305      	str	r3, [sp, #20]
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	9304      	str	r3, [sp, #16]
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	9303      	str	r3, [sp, #12]
 8004dd8:	2307      	movs	r3, #7
 8004dda:	9302      	str	r3, [sp, #8]
 8004ddc:	2301      	movs	r3, #1
 8004dde:	9301      	str	r3, [sp, #4]
 8004de0:	2303      	movs	r3, #3
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	a308      	add	r3, pc, #32	; (adr r3, 8004e08 <loraInit+0x78>)
 8004de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dea:	6838      	ldr	r0, [r7, #0]
 8004dec:	f7ff fe1e 	bl	8004a2c <SX1278_init>
	SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);

	ret = SX1278_LoRaTxPacket(sx1278, loraTx,
 8004df0:	2303      	movs	r3, #3
 8004df2:	2208      	movs	r2, #8
 8004df4:	4908      	ldr	r1, [pc, #32]	; (8004e18 <loraInit+0x88>)
 8004df6:	6838      	ldr	r0, [r7, #0]
 8004df8:	f7ff fdd9 	bl	80049ae <SX1278_LoRaTxPacket>
 8004dfc:	60f8      	str	r0, [r7, #12]
			8, LORA_TIMEOUT);

	return ret;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	19de5080 	.word	0x19de5080
 8004e0c:	00000000 	.word	0x00000000
 8004e10:	48000400 	.word	0x48000400
 8004e14:	2000003c 	.word	0x2000003c
 8004e18:	200004b0 	.word	0x200004b0

08004e1c <loraDioCallBack>:
/**
 * @brief lora transmit and receive callback
 * @return none
 */
void loraDioCallBack()
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
	if(loreRxTxMutex == LORA_TX_STATUS)
 8004e22:	4b1b      	ldr	r3, [pc, #108]	; (8004e90 <loraDioCallBack+0x74>)
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d02e      	beq.n	8004e88 <loraDioCallBack+0x6c>
		//		ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) txMsg,
		//								  8, LORA_TIMEOUT);
	}
	else
	{
		ret = SX1278_available(&SX1278);
 8004e2a:	481a      	ldr	r0, [pc, #104]	; (8004e94 <loraDioCallBack+0x78>)
 8004e2c:	f7ff fe2b 	bl	8004a86 <SX1278_available>
 8004e30:	4603      	mov	r3, r0
 8004e32:	461a      	mov	r2, r3
 8004e34:	4b18      	ldr	r3, [pc, #96]	; (8004e98 <loraDioCallBack+0x7c>)
 8004e36:	601a      	str	r2, [r3, #0]

		SX1278_read(&SX1278, (uint8_t*)&loraDataRx, ret);
 8004e38:	4b17      	ldr	r3, [pc, #92]	; (8004e98 <loraDioCallBack+0x7c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	461a      	mov	r2, r3
 8004e40:	4916      	ldr	r1, [pc, #88]	; (8004e9c <loraDioCallBack+0x80>)
 8004e42:	4814      	ldr	r0, [pc, #80]	; (8004e94 <loraDioCallBack+0x78>)
 8004e44:	f7ff fe2b 	bl	8004a9e <SX1278_read>

		uint16_t crc = AE_pec15((uint8_t*)&loraDataRx, (sizeof(LoraData) - 4));
 8004e48:	2130      	movs	r1, #48	; 0x30
 8004e4a:	4814      	ldr	r0, [pc, #80]	; (8004e9c <loraDioCallBack+0x80>)
 8004e4c:	f7ff ff3e 	bl	8004ccc <AE_pec15>
 8004e50:	4603      	mov	r3, r0
 8004e52:	80fb      	strh	r3, [r7, #6]
		if(crc == (loraDataRx.crcLsb << 0 | loraDataRx.crcMsb << 8))
 8004e54:	88fa      	ldrh	r2, [r7, #6]
 8004e56:	4b11      	ldr	r3, [pc, #68]	; (8004e9c <loraDioCallBack+0x80>)
 8004e58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4b0f      	ldr	r3, [pc, #60]	; (8004e9c <loraDioCallBack+0x80>)
 8004e60:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004e64:	021b      	lsls	r3, r3, #8
 8004e66:	430b      	orrs	r3, r1
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d10a      	bne.n	8004e82 <loraDioCallBack+0x66>
		{
			loraDataRx.carriage = '\r';
 8004e6c:	4b0b      	ldr	r3, [pc, #44]	; (8004e9c <loraDioCallBack+0x80>)
 8004e6e:	220d      	movs	r2, #13
 8004e70:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			loraDataRx.newline = '\n';
 8004e74:	4b09      	ldr	r3, [pc, #36]	; (8004e9c <loraDioCallBack+0x80>)
 8004e76:	220a      	movs	r2, #10
 8004e78:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

			transtmitPackage(&loraDataRx);
 8004e7c:	4807      	ldr	r0, [pc, #28]	; (8004e9c <loraDioCallBack+0x80>)
 8004e7e:	f000 f811 	bl	8004ea4 <transtmitPackage>
		}

		HAL_IWDG_Refresh(&hiwdg);
 8004e82:	4807      	ldr	r0, [pc, #28]	; (8004ea0 <loraDioCallBack+0x84>)
 8004e84:	f7fc fb4b 	bl	800151e <HAL_IWDG_Refresh>
	}
}
 8004e88:	bf00      	nop
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	20000370 	.word	0x20000370
 8004e94:	20000398 	.word	0x20000398
 8004e98:	20000374 	.word	0x20000374
 8004e9c:	200004cc 	.word	0x200004cc
 8004ea0:	2000002c 	.word	0x2000002c

08004ea4 <transtmitPackage>:
/**
 * @brief update the values and trasmit to pc
 */

void transtmitPackage(LoraData * loraDat)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b092      	sub	sp, #72	; 0x48
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
	uint8_t dataBuffer[52];
	uint32_t u32TempVar;

	dataBuffer[0] = (loraDat->azimuth >> 0) & 0xFF;			//!< azimuth lsb
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	881b      	ldrh	r3, [r3, #0]
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	733b      	strb	r3, [r7, #12]
	dataBuffer[1] = (loraDat->azimuth >> 8) & 0xFF;			//!< azimuth msb
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	0a1b      	lsrs	r3, r3, #8
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	737b      	strb	r3, [r7, #13]
	dataBuffer[2] = loraDat->latitudeDegree;				//!< latitude degree
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	789b      	ldrb	r3, [r3, #2]
 8004ec4:	73bb      	strb	r3, [r7, #14]
	dataBuffer[3] = loraDat->latitudeMinute;				//!< latitude minute
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	78db      	ldrb	r3, [r3, #3]
 8004eca:	73fb      	strb	r3, [r7, #15]

	u32TempVar = *((uint32_t*)&loraDat->latitudeSecond);	//!< latitude second
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3304      	adds	r3, #4
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	647b      	str	r3, [r7, #68]	; 0x44
	dataBuffer[4] = (u32TempVar >> 0) & 0xFF;
 8004ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	743b      	strb	r3, [r7, #16]
	dataBuffer[5] = (u32TempVar >> 8) & 0xFF;
 8004eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004edc:	0a1b      	lsrs	r3, r3, #8
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	747b      	strb	r3, [r7, #17]
	dataBuffer[6] = (u32TempVar >> 16) & 0xFF;
 8004ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ee4:	0c1b      	lsrs	r3, r3, #16
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	74bb      	strb	r3, [r7, #18]
	dataBuffer[7] = (u32TempVar >> 24) & 0xFF;
 8004eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eec:	0e1b      	lsrs	r3, r3, #24
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	74fb      	strb	r3, [r7, #19]

	dataBuffer[8] = loraDat->longitudeDegree;				//!< longitude degree
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	7a1b      	ldrb	r3, [r3, #8]
 8004ef6:	753b      	strb	r3, [r7, #20]
	dataBuffer[9] = loraDat->longitudeMinute;				//!< longitude minute
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	7a5b      	ldrb	r3, [r3, #9]
 8004efc:	757b      	strb	r3, [r7, #21]
	dataBuffer[10] = loraDat->numberOfSatellite;			//!< number of satellite
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	7a9b      	ldrb	r3, [r3, #10]
 8004f02:	75bb      	strb	r3, [r7, #22]
	dataBuffer[11] = loraDat->second;						//!< gps second
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	7adb      	ldrb	r3, [r3, #11]
 8004f08:	75fb      	strb	r3, [r7, #23]

	u32TempVar = *((uint32_t*)&loraDat->longitudeSecond);	//!< longitude second
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	330c      	adds	r3, #12
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	647b      	str	r3, [r7, #68]	; 0x44
	dataBuffer[12] = (u32TempVar >> 0) & 0xFF;
 8004f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	763b      	strb	r3, [r7, #24]
	dataBuffer[13] = (u32TempVar >> 8) & 0xFF;
 8004f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f1a:	0a1b      	lsrs	r3, r3, #8
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	767b      	strb	r3, [r7, #25]
	dataBuffer[14] = (u32TempVar >> 16) & 0xFF;
 8004f20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f22:	0c1b      	lsrs	r3, r3, #16
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	76bb      	strb	r3, [r7, #26]
	dataBuffer[15] = (u32TempVar >> 24) & 0xFF;
 8004f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f2a:	0e1b      	lsrs	r3, r3, #24
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	76fb      	strb	r3, [r7, #27]

	u32TempVar = *((uint32_t*)&loraDat->speed);				//!< gps speed
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3310      	adds	r3, #16
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	647b      	str	r3, [r7, #68]	; 0x44
	dataBuffer[16] = (u32TempVar >> 0) & 0xFF;
 8004f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	773b      	strb	r3, [r7, #28]
	dataBuffer[17] = (u32TempVar >> 8) & 0xFF;
 8004f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f40:	0a1b      	lsrs	r3, r3, #8
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	777b      	strb	r3, [r7, #29]
	dataBuffer[18] = (u32TempVar >> 16) & 0xFF;
 8004f46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f48:	0c1b      	lsrs	r3, r3, #16
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	77bb      	strb	r3, [r7, #30]
	dataBuffer[19] = (u32TempVar >> 24) & 0xFF;
 8004f4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f50:	0e1b      	lsrs	r3, r3, #24
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	77fb      	strb	r3, [r7, #31]

	u32TempVar = *((uint32_t*)&loraDat->Ax);				//!< mpu accelartion x
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	3314      	adds	r3, #20
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	647b      	str	r3, [r7, #68]	; 0x44
	dataBuffer[20] = (u32TempVar >> 0) & 0xFF;
 8004f5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	f887 3020 	strb.w	r3, [r7, #32]
	dataBuffer[21] = (u32TempVar >> 8) & 0xFF;
 8004f66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f68:	0a1b      	lsrs	r3, r3, #8
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	dataBuffer[22] = (u32TempVar >> 16) & 0xFF;
 8004f70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f72:	0c1b      	lsrs	r3, r3, #16
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	dataBuffer[23] = (u32TempVar >> 24) & 0xFF;
 8004f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f7c:	0e1b      	lsrs	r3, r3, #24
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	u32TempVar = *((uint32_t*)&loraDat->Ay);				//!< MPU acceleration y
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3318      	adds	r3, #24
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	647b      	str	r3, [r7, #68]	; 0x44
	dataBuffer[24] = (u32TempVar >> 0) & 0xFF;
 8004f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	dataBuffer[25] = (u32TempVar >> 8) & 0xFF;
 8004f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f96:	0a1b      	lsrs	r3, r3, #8
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	dataBuffer[26] = (u32TempVar >> 16) & 0xFF;
 8004f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fa0:	0c1b      	lsrs	r3, r3, #16
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	dataBuffer[27] = (u32TempVar >> 24) & 0xFF;
 8004fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004faa:	0e1b      	lsrs	r3, r3, #24
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	u32TempVar = *((uint32_t*)&loraDat->Temperature);		//!< MPU temperature
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	331c      	adds	r3, #28
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	647b      	str	r3, [r7, #68]	; 0x44
	dataBuffer[28] = (u32TempVar >> 0) & 0xFF;
 8004fba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	dataBuffer[29] = (u32TempVar >> 8) & 0xFF;
 8004fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fc4:	0a1b      	lsrs	r3, r3, #8
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	dataBuffer[30] = (u32TempVar >> 16) & 0xFF;
 8004fcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fce:	0c1b      	lsrs	r3, r3, #16
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	dataBuffer[31] = (u32TempVar >> 24) & 0xFF;
 8004fd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fd8:	0e1b      	lsrs	r3, r3, #24
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	u32TempVar = *((uint32_t*)&loraDat->KalmanAngleX);		//!< MPU kalman x angle
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3320      	adds	r3, #32
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	647b      	str	r3, [r7, #68]	; 0x44
	dataBuffer[32] = (u32TempVar >> 0) & 0xFF;
 8004fe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	dataBuffer[33] = (u32TempVar >> 8) & 0xFF;
 8004ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ff2:	0a1b      	lsrs	r3, r3, #8
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	dataBuffer[34] = (u32TempVar >> 16) & 0xFF;
 8004ffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ffc:	0c1b      	lsrs	r3, r3, #16
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	dataBuffer[35] = (u32TempVar >> 24) & 0xFF;
 8005004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005006:	0e1b      	lsrs	r3, r3, #24
 8005008:	b2db      	uxtb	r3, r3
 800500a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	u32TempVar = *((uint32_t*)&loraDat->KalmanAngleY);		//!< MPU kalman y angle
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	3324      	adds	r3, #36	; 0x24
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	647b      	str	r3, [r7, #68]	; 0x44
	dataBuffer[36] = (u32TempVar >> 0) & 0xFF;
 8005016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005018:	b2db      	uxtb	r3, r3
 800501a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	dataBuffer[37] = (u32TempVar >> 8) & 0xFF;
 800501e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005020:	0a1b      	lsrs	r3, r3, #8
 8005022:	b2db      	uxtb	r3, r3
 8005024:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	dataBuffer[38] = (u32TempVar >> 16) & 0xFF;
 8005028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800502a:	0c1b      	lsrs	r3, r3, #16
 800502c:	b2db      	uxtb	r3, r3
 800502e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	dataBuffer[39] = (u32TempVar >> 24) & 0xFF;
 8005032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005034:	0e1b      	lsrs	r3, r3, #24
 8005036:	b2db      	uxtb	r3, r3
 8005038:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	dataBuffer[40] = loraDat->minute;						//!< gps minute
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005042:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	dataBuffer[41] = loraDat->hour;							//!< gps hour
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800504c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	dataBuffer[42] = loraDat->day;							//!< gps day
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005056:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	dataBuffer[43] = loraDat->month;						//!< gps month
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005060:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	dataBuffer[44] = loraDat->locationLat;					//!< gps latitude location
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800506a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	dataBuffer[45] = loraDat->locationLong;					//!< gps longitude location
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005074:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	dataBuffer[46] = loraDat->ledState;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800507e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	dataBuffer[47] = loraDat->gpsState;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005088:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	uint16_t pec = AE_pec15((uint8_t*)dataBuffer, 48);
 800508c:	f107 030c 	add.w	r3, r7, #12
 8005090:	2130      	movs	r1, #48	; 0x30
 8005092:	4618      	mov	r0, r3
 8005094:	f7ff fe1a 	bl	8004ccc <AE_pec15>
 8005098:	4603      	mov	r3, r0
 800509a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	dataBuffer[48] = (pec >> 0) & 0xFF;
 800509e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	dataBuffer[49] = (pec >> 8) & 0xFF;
 80050a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80050ac:	0a1b      	lsrs	r3, r3, #8
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	dataBuffer[50] = loraDat->carriage;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80050bc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	dataBuffer[51] = loraDat->newline;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80050c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	HAL_UART_Transmit(&huart2, dataBuffer, sizeof(dataBuffer), 52);
 80050ca:	f107 010c 	add.w	r1, r7, #12
 80050ce:	2334      	movs	r3, #52	; 0x34
 80050d0:	2234      	movs	r2, #52	; 0x34
 80050d2:	4803      	ldr	r0, [pc, #12]	; (80050e0 <transtmitPackage+0x23c>)
 80050d4:	f7fe faa2 	bl	800361c <HAL_UART_Transmit>
}
 80050d8:	bf00      	nop
 80050da:	3748      	adds	r7, #72	; 0x48
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	200000a0 	.word	0x200000a0

080050e4 <memset>:
 80050e4:	4402      	add	r2, r0
 80050e6:	4603      	mov	r3, r0
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d100      	bne.n	80050ee <memset+0xa>
 80050ec:	4770      	bx	lr
 80050ee:	f803 1b01 	strb.w	r1, [r3], #1
 80050f2:	e7f9      	b.n	80050e8 <memset+0x4>

080050f4 <__libc_init_array>:
 80050f4:	b570      	push	{r4, r5, r6, lr}
 80050f6:	4d0d      	ldr	r5, [pc, #52]	; (800512c <__libc_init_array+0x38>)
 80050f8:	4c0d      	ldr	r4, [pc, #52]	; (8005130 <__libc_init_array+0x3c>)
 80050fa:	1b64      	subs	r4, r4, r5
 80050fc:	10a4      	asrs	r4, r4, #2
 80050fe:	2600      	movs	r6, #0
 8005100:	42a6      	cmp	r6, r4
 8005102:	d109      	bne.n	8005118 <__libc_init_array+0x24>
 8005104:	4d0b      	ldr	r5, [pc, #44]	; (8005134 <__libc_init_array+0x40>)
 8005106:	4c0c      	ldr	r4, [pc, #48]	; (8005138 <__libc_init_array+0x44>)
 8005108:	f000 f826 	bl	8005158 <_init>
 800510c:	1b64      	subs	r4, r4, r5
 800510e:	10a4      	asrs	r4, r4, #2
 8005110:	2600      	movs	r6, #0
 8005112:	42a6      	cmp	r6, r4
 8005114:	d105      	bne.n	8005122 <__libc_init_array+0x2e>
 8005116:	bd70      	pop	{r4, r5, r6, pc}
 8005118:	f855 3b04 	ldr.w	r3, [r5], #4
 800511c:	4798      	blx	r3
 800511e:	3601      	adds	r6, #1
 8005120:	e7ee      	b.n	8005100 <__libc_init_array+0xc>
 8005122:	f855 3b04 	ldr.w	r3, [r5], #4
 8005126:	4798      	blx	r3
 8005128:	3601      	adds	r6, #1
 800512a:	e7f2      	b.n	8005112 <__libc_init_array+0x1e>
 800512c:	080051d0 	.word	0x080051d0
 8005130:	080051d0 	.word	0x080051d0
 8005134:	080051d0 	.word	0x080051d0
 8005138:	080051d4 	.word	0x080051d4

0800513c <memcpy>:
 800513c:	440a      	add	r2, r1
 800513e:	4291      	cmp	r1, r2
 8005140:	f100 33ff 	add.w	r3, r0, #4294967295
 8005144:	d100      	bne.n	8005148 <memcpy+0xc>
 8005146:	4770      	bx	lr
 8005148:	b510      	push	{r4, lr}
 800514a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800514e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005152:	4291      	cmp	r1, r2
 8005154:	d1f9      	bne.n	800514a <memcpy+0xe>
 8005156:	bd10      	pop	{r4, pc}

08005158 <_init>:
 8005158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515a:	bf00      	nop
 800515c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800515e:	bc08      	pop	{r3}
 8005160:	469e      	mov	lr, r3
 8005162:	4770      	bx	lr

08005164 <_fini>:
 8005164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005166:	bf00      	nop
 8005168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800516a:	bc08      	pop	{r3}
 800516c:	469e      	mov	lr, r3
 800516e:	4770      	bx	lr
