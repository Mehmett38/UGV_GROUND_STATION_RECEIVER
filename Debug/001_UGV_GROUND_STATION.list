
001_UGV_GROUND_STATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ed0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08005058  08005058  00015058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050b0  080050b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080050b0  080050b0  000150b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050b8  080050b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050b8  080050b8  000150b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050bc  080050bc  000150bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080050c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000004e0  20000010  20000010  00020010  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200004f0  200004f0  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000e1a9  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002707  00000000  00000000  0002e228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ae8  00000000  00000000  00030930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000841  00000000  00000000  00031418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002017b  00000000  00000000  00031c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010343  00000000  00000000  00051dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bc04e  00000000  00000000  00062117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002a78  00000000  00000000  0011e168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  00120be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005040 	.word	0x08005040

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005040 	.word	0x08005040

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ca:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <MX_DMA_Init+0x38>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	4a0b      	ldr	r2, [pc, #44]	; (80004fc <MX_DMA_Init+0x38>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	6153      	str	r3, [r2, #20]
 80004d6:	4b09      	ldr	r3, [pc, #36]	; (80004fc <MX_DMA_Init+0x38>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2100      	movs	r1, #0
 80004e6:	2011      	movs	r0, #17
 80004e8:	f000 fc37 	bl	8000d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80004ec:	2011      	movs	r0, #17
 80004ee:	f000 fc50 	bl	8000d92 <HAL_NVIC_EnableIRQ>

}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40021000 	.word	0x40021000

08000500 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	; 0x28
 8000504:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	f107 0314 	add.w	r3, r7, #20
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000516:	4b3f      	ldr	r3, [pc, #252]	; (8000614 <MX_GPIO_Init+0x114>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	4a3e      	ldr	r2, [pc, #248]	; (8000614 <MX_GPIO_Init+0x114>)
 800051c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000520:	6153      	str	r3, [r2, #20]
 8000522:	4b3c      	ldr	r3, [pc, #240]	; (8000614 <MX_GPIO_Init+0x114>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800052a:	613b      	str	r3, [r7, #16]
 800052c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800052e:	4b39      	ldr	r3, [pc, #228]	; (8000614 <MX_GPIO_Init+0x114>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	4a38      	ldr	r2, [pc, #224]	; (8000614 <MX_GPIO_Init+0x114>)
 8000534:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000538:	6153      	str	r3, [r2, #20]
 800053a:	4b36      	ldr	r3, [pc, #216]	; (8000614 <MX_GPIO_Init+0x114>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000546:	4b33      	ldr	r3, [pc, #204]	; (8000614 <MX_GPIO_Init+0x114>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	4a32      	ldr	r2, [pc, #200]	; (8000614 <MX_GPIO_Init+0x114>)
 800054c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000550:	6153      	str	r3, [r2, #20]
 8000552:	4b30      	ldr	r3, [pc, #192]	; (8000614 <MX_GPIO_Init+0x114>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	4b2d      	ldr	r3, [pc, #180]	; (8000614 <MX_GPIO_Init+0x114>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	4a2c      	ldr	r2, [pc, #176]	; (8000614 <MX_GPIO_Init+0x114>)
 8000564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000568:	6153      	str	r3, [r2, #20]
 800056a:	4b2a      	ldr	r3, [pc, #168]	; (8000614 <MX_GPIO_Init+0x114>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8000576:	2201      	movs	r2, #1
 8000578:	2110      	movs	r1, #16
 800057a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057e:	f000 ff2d 	bl	80013dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000582:	2201      	movs	r2, #1
 8000584:	2102      	movs	r1, #2
 8000586:	4824      	ldr	r0, [pc, #144]	; (8000618 <MX_GPIO_Init+0x118>)
 8000588:	f000 ff28 	bl	80013dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800058c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000592:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4619      	mov	r1, r3
 80005a2:	481e      	ldr	r0, [pc, #120]	; (800061c <MX_GPIO_Init+0x11c>)
 80005a4:	f000 fd90 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS_Pin;
 80005a8:	2310      	movs	r3, #16
 80005aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ac:	2301      	movs	r3, #1
 80005ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b4:	2303      	movs	r3, #3
 80005b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	4619      	mov	r1, r3
 80005be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c2:	f000 fd81 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 80005c6:	2301      	movs	r3, #1
 80005c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	4619      	mov	r1, r3
 80005da:	480f      	ldr	r0, [pc, #60]	; (8000618 <MX_GPIO_Init+0x118>)
 80005dc:	f000 fd74 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 80005e0:	2302      	movs	r3, #2
 80005e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e4:	2301      	movs	r3, #1
 80005e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ec:	2300      	movs	r3, #0
 80005ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	4619      	mov	r1, r3
 80005f6:	4808      	ldr	r0, [pc, #32]	; (8000618 <MX_GPIO_Init+0x118>)
 80005f8:	f000 fd66 	bl	80010c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2100      	movs	r1, #0
 8000600:	2006      	movs	r0, #6
 8000602:	f000 fbaa 	bl	8000d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000606:	2006      	movs	r0, #6
 8000608:	f000 fbc3 	bl	8000d92 <HAL_NVIC_EnableIRQ>

}
 800060c:	bf00      	nop
 800060e:	3728      	adds	r7, #40	; 0x28
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40021000 	.word	0x40021000
 8000618:	48000400 	.word	0x48000400
 800061c:	48000800 	.word	0x48000800

08000620 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == DIO0_Pin)
 800062a:	88fb      	ldrh	r3, [r7, #6]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d101      	bne.n	8000634 <HAL_GPIO_EXTI_Callback+0x14>
	{
		loraDioCallBack();
 8000630:	f004 fb6c 	bl	8004d0c <loraDioCallBack>
	}
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000640:	f000 fa26 	bl	8000a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000644:	f000 f80e 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000648:	f7ff ff5a 	bl	8000500 <MX_GPIO_Init>
  MX_DMA_Init();
 800064c:	f7ff ff3a 	bl	80004c4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000650:	f000 f94e 	bl	80008f0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000654:	f000 f850 	bl	80006f8 <MX_SPI1_Init>
//
//	  tickTime = tick2 - tick1;
//	  HAL_Delay(40);


	  ugvMain();
 8000658:	f004 faea 	bl	8004c30 <ugvMain>
	  break;
 800065c:	bf00      	nop
 800065e:	2300      	movs	r3, #0
  }
  /* USER CODE END 3 */
}
 8000660:	4618      	mov	r0, r3
 8000662:	bd80      	pop	{r7, pc}

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b090      	sub	sp, #64	; 0x40
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0318 	add.w	r3, r7, #24
 800066e:	2228      	movs	r2, #40	; 0x28
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f004 fcaa 	bl	8004fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000686:	2301      	movs	r3, #1
 8000688:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800068a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800068e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000698:	2302      	movs	r3, #2
 800069a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006a2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 0318 	add.w	r3, r7, #24
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fec5 	bl	800143c <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006b8:	f000 f819 	bl	80006ee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2302      	movs	r3, #2
 80006c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2102      	movs	r1, #2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 feee 	bl	80024b8 <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006e2:	f000 f804 	bl	80006ee <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3740      	adds	r7, #64	; 0x40
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f2:	b672      	cpsid	i
}
 80006f4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f6:	e7fe      	b.n	80006f6 <Error_Handler+0x8>

080006f8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80006fc:	4b1b      	ldr	r3, [pc, #108]	; (800076c <MX_SPI1_Init+0x74>)
 80006fe:	4a1c      	ldr	r2, [pc, #112]	; (8000770 <MX_SPI1_Init+0x78>)
 8000700:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000702:	4b1a      	ldr	r3, [pc, #104]	; (800076c <MX_SPI1_Init+0x74>)
 8000704:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000708:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <MX_SPI1_Init+0x74>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000710:	4b16      	ldr	r3, [pc, #88]	; (800076c <MX_SPI1_Init+0x74>)
 8000712:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000716:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <MX_SPI1_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800071e:	4b13      	ldr	r3, [pc, #76]	; (800076c <MX_SPI1_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_SPI1_Init+0x74>)
 8000726:	f44f 7200 	mov.w	r2, #512	; 0x200
 800072a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_SPI1_Init+0x74>)
 800072e:	2218      	movs	r2, #24
 8000730:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_SPI1_Init+0x74>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_SPI1_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_SPI1_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_SPI1_Init+0x74>)
 8000746:	2207      	movs	r2, #7
 8000748:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_SPI1_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_SPI1_Init+0x74>)
 8000752:	2208      	movs	r2, #8
 8000754:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_SPI1_Init+0x74>)
 8000758:	f002 f8e4 	bl	8002924 <HAL_SPI_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000762:	f7ff ffc4 	bl	80006ee <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	2000002c 	.word	0x2000002c
 8000770:	40013000 	.word	0x40013000

08000774 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	; 0x28
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a17      	ldr	r2, [pc, #92]	; (80007f0 <HAL_SPI_MspInit+0x7c>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d128      	bne.n	80007e8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000796:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <HAL_SPI_MspInit+0x80>)
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	4a16      	ldr	r2, [pc, #88]	; (80007f4 <HAL_SPI_MspInit+0x80>)
 800079c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007a0:	6193      	str	r3, [r2, #24]
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <HAL_SPI_MspInit+0x80>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <HAL_SPI_MspInit+0x80>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	4a10      	ldr	r2, [pc, #64]	; (80007f4 <HAL_SPI_MspInit+0x80>)
 80007b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b8:	6153      	str	r3, [r2, #20]
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <HAL_SPI_MspInit+0x80>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80007c6:	23e0      	movs	r3, #224	; 0xe0
 80007c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d2:	2303      	movs	r3, #3
 80007d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007d6:	2305      	movs	r3, #5
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4619      	mov	r1, r3
 80007e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e4:	f000 fc70 	bl	80010c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80007e8:	bf00      	nop
 80007ea:	3728      	adds	r7, #40	; 0x28
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40013000 	.word	0x40013000
 80007f4:	40021000 	.word	0x40021000

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <HAL_MspInit+0x44>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	4a0e      	ldr	r2, [pc, #56]	; (800083c <HAL_MspInit+0x44>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6193      	str	r3, [r2, #24]
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <HAL_MspInit+0x44>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <HAL_MspInit+0x44>)
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <HAL_MspInit+0x44>)
 800081c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000820:	61d3      	str	r3, [r2, #28]
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <HAL_MspInit+0x44>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800082e:	2007      	movs	r0, #7
 8000830:	f000 fa88 	bl	8000d44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40021000 	.word	0x40021000

08000840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000844:	e7fe      	b.n	8000844 <NMI_Handler+0x4>

08000846 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084a:	e7fe      	b.n	800084a <HardFault_Handler+0x4>

0800084c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <MemManage_Handler+0x4>

08000852 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000856:	e7fe      	b.n	8000856 <BusFault_Handler+0x4>

08000858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800085c:	e7fe      	b.n	800085c <UsageFault_Handler+0x4>

0800085e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr

0800087a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800088c:	f000 f946 	bl	8000b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}

08000894 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8000898:	2001      	movs	r0, #1
 800089a:	f000 fdb7 	bl	800140c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80008a8:	4802      	ldr	r0, [pc, #8]	; (80008b4 <DMA1_Channel7_IRQHandler+0x10>)
 80008aa:	f000 fb4a 	bl	8000f42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000118 	.word	0x20000118

080008b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008bc:	4802      	ldr	r0, [pc, #8]	; (80008c8 <USART2_IRQHandler+0x10>)
 80008be:	f002 feb5 	bl	800362c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000090 	.word	0x20000090

080008cc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <SystemInit+0x20>)
 80008d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008d6:	4a05      	ldr	r2, [pc, #20]	; (80008ec <SystemInit+0x20>)
 80008d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_USART2_UART_Init+0x58>)
 80008f6:	4a15      	ldr	r2, [pc, #84]	; (800094c <MX_USART2_UART_Init+0x5c>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <MX_USART2_UART_Init+0x58>)
 80008fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000900:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_USART2_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_USART2_UART_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_USART2_UART_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_USART2_UART_Init+0x58>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MX_USART2_UART_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_USART2_UART_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <MX_USART2_UART_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_USART2_UART_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_USART2_UART_Init+0x58>)
 8000934:	f002 fda2 	bl	800347c <HAL_UART_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800093e:	f7ff fed6 	bl	80006ee <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000090 	.word	0x20000090
 800094c:	40004400 	.word	0x40004400

08000950 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	; 0x28
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a2f      	ldr	r2, [pc, #188]	; (8000a2c <HAL_UART_MspInit+0xdc>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d157      	bne.n	8000a22 <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000972:	4b2f      	ldr	r3, [pc, #188]	; (8000a30 <HAL_UART_MspInit+0xe0>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	4a2e      	ldr	r2, [pc, #184]	; (8000a30 <HAL_UART_MspInit+0xe0>)
 8000978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097c:	61d3      	str	r3, [r2, #28]
 800097e:	4b2c      	ldr	r3, [pc, #176]	; (8000a30 <HAL_UART_MspInit+0xe0>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4b29      	ldr	r3, [pc, #164]	; (8000a30 <HAL_UART_MspInit+0xe0>)
 800098c:	695b      	ldr	r3, [r3, #20]
 800098e:	4a28      	ldr	r2, [pc, #160]	; (8000a30 <HAL_UART_MspInit+0xe0>)
 8000990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000994:	6153      	str	r3, [r2, #20]
 8000996:	4b26      	ldr	r3, [pc, #152]	; (8000a30 <HAL_UART_MspInit+0xe0>)
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009a2:	230c      	movs	r3, #12
 80009a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ae:	2303      	movs	r3, #3
 80009b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009b2:	2307      	movs	r3, #7
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4619      	mov	r1, r3
 80009bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c0:	f000 fb82 	bl	80010c8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80009c4:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <HAL_UART_MspInit+0xe4>)
 80009c6:	4a1c      	ldr	r2, [pc, #112]	; (8000a38 <HAL_UART_MspInit+0xe8>)
 80009c8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009ca:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <HAL_UART_MspInit+0xe4>)
 80009cc:	2210      	movs	r2, #16
 80009ce:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009d0:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <HAL_UART_MspInit+0xe4>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009d6:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <HAL_UART_MspInit+0xe4>)
 80009d8:	2280      	movs	r2, #128	; 0x80
 80009da:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <HAL_UART_MspInit+0xe4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009e2:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <HAL_UART_MspInit+0xe4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <HAL_UART_MspInit+0xe4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <HAL_UART_MspInit+0xe4>)
 80009f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009f4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80009f6:	480f      	ldr	r0, [pc, #60]	; (8000a34 <HAL_UART_MspInit+0xe4>)
 80009f8:	f000 f9e5 	bl	8000dc6 <HAL_DMA_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8000a02:	f7ff fe74 	bl	80006ee <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <HAL_UART_MspInit+0xe4>)
 8000a0a:	671a      	str	r2, [r3, #112]	; 0x70
 8000a0c:	4a09      	ldr	r2, [pc, #36]	; (8000a34 <HAL_UART_MspInit+0xe4>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	2026      	movs	r0, #38	; 0x26
 8000a18:	f000 f99f 	bl	8000d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a1c:	2026      	movs	r0, #38	; 0x26
 8000a1e:	f000 f9b8 	bl	8000d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a22:	bf00      	nop
 8000a24:	3728      	adds	r7, #40	; 0x28
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40004400 	.word	0x40004400
 8000a30:	40021000 	.word	0x40021000
 8000a34:	20000118 	.word	0x20000118
 8000a38:	40020080 	.word	0x40020080

08000a3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a74 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a40:	f7ff ff44 	bl	80008cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a44:	480c      	ldr	r0, [pc, #48]	; (8000a78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a46:	490d      	ldr	r1, [pc, #52]	; (8000a7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a48:	4a0d      	ldr	r2, [pc, #52]	; (8000a80 <LoopForever+0xe>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a4c:	e002      	b.n	8000a54 <LoopCopyDataInit>

08000a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a52:	3304      	adds	r3, #4

08000a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a58:	d3f9      	bcc.n	8000a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a5c:	4c0a      	ldr	r4, [pc, #40]	; (8000a88 <LoopForever+0x16>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a60:	e001      	b.n	8000a66 <LoopFillZerobss>

08000a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a64:	3204      	adds	r2, #4

08000a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a68:	d3fb      	bcc.n	8000a62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a6a:	f004 fab7 	bl	8004fdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a6e:	f7ff fde5 	bl	800063c <main>

08000a72 <LoopForever>:

LoopForever:
    b LoopForever
 8000a72:	e7fe      	b.n	8000a72 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a74:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a80:	080050c0 	.word	0x080050c0
  ldr r2, =_sbss
 8000a84:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a88:	200004f0 	.word	0x200004f0

08000a8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a8c:	e7fe      	b.n	8000a8c <ADC1_2_IRQHandler>
	...

08000a90 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_Init+0x28>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <HAL_Init+0x28>)
 8000a9a:	f043 0310 	orr.w	r3, r3, #16
 8000a9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 f94f 	bl	8000d44 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f000 f808 	bl	8000abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aac:	f7ff fea4 	bl	80007f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40022000 	.word	0x40022000

08000abc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_InitTick+0x54>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_InitTick+0x58>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	4619      	mov	r1, r3
 8000ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 f967 	bl	8000dae <HAL_SYSTICK_Config>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e00e      	b.n	8000b08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2b0f      	cmp	r3, #15
 8000aee:	d80a      	bhi.n	8000b06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af0:	2200      	movs	r2, #0
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	f04f 30ff 	mov.w	r0, #4294967295
 8000af8:	f000 f92f 	bl	8000d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000afc:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <HAL_InitTick+0x5c>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b02:	2300      	movs	r3, #0
 8000b04:	e000      	b.n	8000b08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000000 	.word	0x20000000
 8000b14:	20000008 	.word	0x20000008
 8000b18:	20000004 	.word	0x20000004

08000b1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_IncTick+0x20>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_IncTick+0x24>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <HAL_IncTick+0x24>)
 8000b2e:	6013      	str	r3, [r2, #0]
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	2000015c 	.word	0x2000015c

08000b44 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <HAL_GetTick+0x14>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	2000015c 	.word	0x2000015c

08000b5c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b64:	f7ff ffee 	bl	8000b44 <HAL_GetTick>
 8000b68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b74:	d005      	beq.n	8000b82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b76:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <HAL_Delay+0x44>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4413      	add	r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b82:	bf00      	nop
 8000b84:	f7ff ffde 	bl	8000b44 <HAL_GetTick>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d8f7      	bhi.n	8000b84 <HAL_Delay+0x28>
  {
  }
}
 8000b94:	bf00      	nop
 8000b96:	bf00      	nop
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000008 	.word	0x20000008

08000ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd6:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	60d3      	str	r3, [r2, #12]
}
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	0a1b      	lsrs	r3, r3, #8
 8000bf6:	f003 0307 	and.w	r3, r3, #7
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db0b      	blt.n	8000c32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	f003 021f 	and.w	r2, r3, #31
 8000c20:	4907      	ldr	r1, [pc, #28]	; (8000c40 <__NVIC_EnableIRQ+0x38>)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	095b      	lsrs	r3, r3, #5
 8000c28:	2001      	movs	r0, #1
 8000c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000e100 	.word	0xe000e100

08000c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	db0a      	blt.n	8000c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	490c      	ldr	r1, [pc, #48]	; (8000c90 <__NVIC_SetPriority+0x4c>)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	0112      	lsls	r2, r2, #4
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	440b      	add	r3, r1
 8000c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c6c:	e00a      	b.n	8000c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4908      	ldr	r1, [pc, #32]	; (8000c94 <__NVIC_SetPriority+0x50>)
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	3b04      	subs	r3, #4
 8000c7c:	0112      	lsls	r2, r2, #4
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	440b      	add	r3, r1
 8000c82:	761a      	strb	r2, [r3, #24]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000e100 	.word	0xe000e100
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b089      	sub	sp, #36	; 0x24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f1c3 0307 	rsb	r3, r3, #7
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	bf28      	it	cs
 8000cb6:	2304      	movcs	r3, #4
 8000cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	2b06      	cmp	r3, #6
 8000cc0:	d902      	bls.n	8000cc8 <NVIC_EncodePriority+0x30>
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3b03      	subs	r3, #3
 8000cc6:	e000      	b.n	8000cca <NVIC_EncodePriority+0x32>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43da      	mvns	r2, r3
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	401a      	ands	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	43d9      	mvns	r1, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	4313      	orrs	r3, r2
         );
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3724      	adds	r7, #36	; 0x24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
	...

08000d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d10:	d301      	bcc.n	8000d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d12:	2301      	movs	r3, #1
 8000d14:	e00f      	b.n	8000d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d16:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <SysTick_Config+0x40>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d1e:	210f      	movs	r1, #15
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295
 8000d24:	f7ff ff8e 	bl	8000c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d28:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <SysTick_Config+0x40>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2e:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <SysTick_Config+0x40>)
 8000d30:	2207      	movs	r2, #7
 8000d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	e000e010 	.word	0xe000e010

08000d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff ff29 	bl	8000ba4 <__NVIC_SetPriorityGrouping>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b086      	sub	sp, #24
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4603      	mov	r3, r0
 8000d62:	60b9      	str	r1, [r7, #8]
 8000d64:	607a      	str	r2, [r7, #4]
 8000d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d6c:	f7ff ff3e 	bl	8000bec <__NVIC_GetPriorityGrouping>
 8000d70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	68b9      	ldr	r1, [r7, #8]
 8000d76:	6978      	ldr	r0, [r7, #20]
 8000d78:	f7ff ff8e 	bl	8000c98 <NVIC_EncodePriority>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d82:	4611      	mov	r1, r2
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff5d 	bl	8000c44 <__NVIC_SetPriority>
}
 8000d8a:	bf00      	nop
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	4603      	mov	r3, r0
 8000d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff31 	bl	8000c08 <__NVIC_EnableIRQ>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff ffa2 	bl	8000d00 <SysTick_Config>
 8000dbc:	4603      	mov	r3, r0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b084      	sub	sp, #16
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d101      	bne.n	8000ddc <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e037      	b.n	8000e4c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2202      	movs	r2, #2
 8000de0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000df2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000df6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	68db      	ldr	r3, [r3, #12]
 8000e06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	695b      	ldr	r3, [r3, #20]
 8000e12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e20:	68fa      	ldr	r2, [r7, #12]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f000 f92a 	bl	8001088 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2200      	movs	r2, #0
 8000e46:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
}  
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d008      	beq.n	8000e78 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2204      	movs	r2, #4
 8000e6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	e020      	b.n	8000eba <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f022 020e 	bic.w	r2, r2, #14
 8000e86:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f022 0201 	bic.w	r2, r2, #1
 8000e96:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b084      	sub	sp, #16
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d005      	beq.n	8000ee8 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2204      	movs	r2, #4
 8000ee0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	73fb      	strb	r3, [r7, #15]
 8000ee6:	e027      	b.n	8000f38 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f022 020e 	bic.w	r2, r2, #14
 8000ef6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f022 0201 	bic.w	r2, r2, #1
 8000f06:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f10:	2101      	movs	r1, #1
 8000f12:	fa01 f202 	lsl.w	r2, r1, r2
 8000f16:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d003      	beq.n	8000f38 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	4798      	blx	r3
    } 
  }
  return status;
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b084      	sub	sp, #16
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	2204      	movs	r2, #4
 8000f60:	409a      	lsls	r2, r3
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4013      	ands	r3, r2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d024      	beq.n	8000fb4 <HAL_DMA_IRQHandler+0x72>
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	f003 0304 	and.w	r3, r3, #4
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d01f      	beq.n	8000fb4 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0320 	and.w	r3, r3, #32
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d107      	bne.n	8000f92 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f022 0204 	bic.w	r2, r2, #4
 8000f90:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f9a:	2104      	movs	r1, #4
 8000f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d06a      	beq.n	8001080 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000fb2:	e065      	b.n	8001080 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	2202      	movs	r2, #2
 8000fba:	409a      	lsls	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d02c      	beq.n	800101e <HAL_DMA_IRQHandler+0xdc>
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d027      	beq.n	800101e <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 0320 	and.w	r3, r3, #32
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d10b      	bne.n	8000ff4 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 020a 	bic.w	r2, r2, #10
 8000fea:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ffc:	2102      	movs	r1, #2
 8000ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8001002:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001010:	2b00      	cmp	r3, #0
 8001012:	d035      	beq.n	8001080 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800101c:	e030      	b.n	8001080 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	2208      	movs	r2, #8
 8001024:	409a      	lsls	r2, r3
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4013      	ands	r3, r2
 800102a:	2b00      	cmp	r3, #0
 800102c:	d028      	beq.n	8001080 <HAL_DMA_IRQHandler+0x13e>
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	f003 0308 	and.w	r3, r3, #8
 8001034:	2b00      	cmp	r3, #0
 8001036:	d023      	beq.n	8001080 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f022 020e 	bic.w	r2, r2, #14
 8001046:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001050:	2101      	movs	r1, #1
 8001052:	fa01 f202 	lsl.w	r2, r1, r2
 8001056:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2201      	movs	r2, #1
 800105c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	2b00      	cmp	r3, #0
 8001074:	d004      	beq.n	8001080 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	4798      	blx	r3
    }
  }
}  
 800107e:	e7ff      	b.n	8001080 <HAL_DMA_IRQHandler+0x13e>
 8001080:	bf00      	nop
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <DMA_CalcBaseAndBitshift+0x34>)
 8001098:	4413      	add	r3, r2
 800109a:	4a09      	ldr	r2, [pc, #36]	; (80010c0 <DMA_CalcBaseAndBitshift+0x38>)
 800109c:	fba2 2303 	umull	r2, r3, r2, r3
 80010a0:	091b      	lsrs	r3, r3, #4
 80010a2:	009a      	lsls	r2, r3, #2
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a06      	ldr	r2, [pc, #24]	; (80010c4 <DMA_CalcBaseAndBitshift+0x3c>)
 80010ac:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	bffdfff8 	.word	0xbffdfff8
 80010c0:	cccccccd 	.word	0xcccccccd
 80010c4:	40020000 	.word	0x40020000

080010c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b087      	sub	sp, #28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010d6:	e14e      	b.n	8001376 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	2101      	movs	r1, #1
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	fa01 f303 	lsl.w	r3, r1, r3
 80010e4:	4013      	ands	r3, r2
 80010e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f000 8140 	beq.w	8001370 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d005      	beq.n	8001108 <HAL_GPIO_Init+0x40>
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d130      	bne.n	800116a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2203      	movs	r2, #3
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	68da      	ldr	r2, [r3, #12]
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4313      	orrs	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800113e:	2201      	movs	r2, #1
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	091b      	lsrs	r3, r3, #4
 8001154:	f003 0201 	and.w	r2, r3, #1
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	2b03      	cmp	r3, #3
 8001174:	d017      	beq.n	80011a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	2203      	movs	r2, #3
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	689a      	ldr	r2, [r3, #8]
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d123      	bne.n	80011fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	08da      	lsrs	r2, r3, #3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3208      	adds	r2, #8
 80011ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	220f      	movs	r2, #15
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	691a      	ldr	r2, [r3, #16]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	f003 0307 	and.w	r3, r3, #7
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	08da      	lsrs	r2, r3, #3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3208      	adds	r2, #8
 80011f4:	6939      	ldr	r1, [r7, #16]
 80011f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	2203      	movs	r2, #3
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	4013      	ands	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 0203 	and.w	r2, r3, #3
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4313      	orrs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001236:	2b00      	cmp	r3, #0
 8001238:	f000 809a 	beq.w	8001370 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123c:	4b55      	ldr	r3, [pc, #340]	; (8001394 <HAL_GPIO_Init+0x2cc>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a54      	ldr	r2, [pc, #336]	; (8001394 <HAL_GPIO_Init+0x2cc>)
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b52      	ldr	r3, [pc, #328]	; (8001394 <HAL_GPIO_Init+0x2cc>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001254:	4a50      	ldr	r2, [pc, #320]	; (8001398 <HAL_GPIO_Init+0x2d0>)
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	089b      	lsrs	r3, r3, #2
 800125a:	3302      	adds	r3, #2
 800125c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001260:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	220f      	movs	r2, #15
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800127e:	d013      	beq.n	80012a8 <HAL_GPIO_Init+0x1e0>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a46      	ldr	r2, [pc, #280]	; (800139c <HAL_GPIO_Init+0x2d4>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d00d      	beq.n	80012a4 <HAL_GPIO_Init+0x1dc>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a45      	ldr	r2, [pc, #276]	; (80013a0 <HAL_GPIO_Init+0x2d8>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d007      	beq.n	80012a0 <HAL_GPIO_Init+0x1d8>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a44      	ldr	r2, [pc, #272]	; (80013a4 <HAL_GPIO_Init+0x2dc>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d101      	bne.n	800129c <HAL_GPIO_Init+0x1d4>
 8001298:	2303      	movs	r3, #3
 800129a:	e006      	b.n	80012aa <HAL_GPIO_Init+0x1e2>
 800129c:	2305      	movs	r3, #5
 800129e:	e004      	b.n	80012aa <HAL_GPIO_Init+0x1e2>
 80012a0:	2302      	movs	r3, #2
 80012a2:	e002      	b.n	80012aa <HAL_GPIO_Init+0x1e2>
 80012a4:	2301      	movs	r3, #1
 80012a6:	e000      	b.n	80012aa <HAL_GPIO_Init+0x1e2>
 80012a8:	2300      	movs	r3, #0
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	f002 0203 	and.w	r2, r2, #3
 80012b0:	0092      	lsls	r2, r2, #2
 80012b2:	4093      	lsls	r3, r2
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012ba:	4937      	ldr	r1, [pc, #220]	; (8001398 <HAL_GPIO_Init+0x2d0>)
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	089b      	lsrs	r3, r3, #2
 80012c0:	3302      	adds	r3, #2
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012c8:	4b37      	ldr	r3, [pc, #220]	; (80013a8 <HAL_GPIO_Init+0x2e0>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4013      	ands	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012ec:	4a2e      	ldr	r2, [pc, #184]	; (80013a8 <HAL_GPIO_Init+0x2e0>)
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f2:	4b2d      	ldr	r3, [pc, #180]	; (80013a8 <HAL_GPIO_Init+0x2e0>)
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	4013      	ands	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4313      	orrs	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001316:	4a24      	ldr	r2, [pc, #144]	; (80013a8 <HAL_GPIO_Init+0x2e0>)
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800131c:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <HAL_GPIO_Init+0x2e0>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	43db      	mvns	r3, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4013      	ands	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001340:	4a19      	ldr	r2, [pc, #100]	; (80013a8 <HAL_GPIO_Init+0x2e0>)
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <HAL_GPIO_Init+0x2e0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	43db      	mvns	r3, r3
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	4013      	ands	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4313      	orrs	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800136a:	4a0f      	ldr	r2, [pc, #60]	; (80013a8 <HAL_GPIO_Init+0x2e0>)
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	3301      	adds	r3, #1
 8001374:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	fa22 f303 	lsr.w	r3, r2, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	f47f aea9 	bne.w	80010d8 <HAL_GPIO_Init+0x10>
  }
}
 8001386:	bf00      	nop
 8001388:	bf00      	nop
 800138a:	371c      	adds	r7, #28
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	40021000 	.word	0x40021000
 8001398:	40010000 	.word	0x40010000
 800139c:	48000400 	.word	0x48000400
 80013a0:	48000800 	.word	0x48000800
 80013a4:	48000c00 	.word	0x48000c00
 80013a8:	40010400 	.word	0x40010400

080013ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691a      	ldr	r2, [r3, #16]
 80013bc:	887b      	ldrh	r3, [r7, #2]
 80013be:	4013      	ands	r3, r2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d002      	beq.n	80013ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013c4:	2301      	movs	r3, #1
 80013c6:	73fb      	strb	r3, [r7, #15]
 80013c8:	e001      	b.n	80013ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013ca:	2300      	movs	r3, #0
 80013cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	807b      	strh	r3, [r7, #2]
 80013e8:	4613      	mov	r3, r2
 80013ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013ec:	787b      	ldrb	r3, [r7, #1]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013f2:	887a      	ldrh	r2, [r7, #2]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013f8:	e002      	b.n	8001400 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013fa:	887a      	ldrh	r2, [r7, #2]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001418:	695a      	ldr	r2, [r3, #20]
 800141a:	88fb      	ldrh	r3, [r7, #6]
 800141c:	4013      	ands	r3, r2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d006      	beq.n	8001430 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001422:	4a05      	ldr	r2, [pc, #20]	; (8001438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff f8f8 	bl	8000620 <HAL_GPIO_EXTI_Callback>
  }
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40010400 	.word	0x40010400

0800143c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001442:	af00      	add	r7, sp, #0
 8001444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001448:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800144c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800144e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001452:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d102      	bne.n	8001462 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	f001 b823 	b.w	80024a8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001466:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 817d 	beq.w	8001772 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001478:	4bbc      	ldr	r3, [pc, #752]	; (800176c <HAL_RCC_OscConfig+0x330>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 030c 	and.w	r3, r3, #12
 8001480:	2b04      	cmp	r3, #4
 8001482:	d00c      	beq.n	800149e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001484:	4bb9      	ldr	r3, [pc, #740]	; (800176c <HAL_RCC_OscConfig+0x330>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 030c 	and.w	r3, r3, #12
 800148c:	2b08      	cmp	r3, #8
 800148e:	d15c      	bne.n	800154a <HAL_RCC_OscConfig+0x10e>
 8001490:	4bb6      	ldr	r3, [pc, #728]	; (800176c <HAL_RCC_OscConfig+0x330>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800149c:	d155      	bne.n	800154a <HAL_RCC_OscConfig+0x10e>
 800149e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014a2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80014aa:	fa93 f3a3 	rbit	r3, r3
 80014ae:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014b2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b6:	fab3 f383 	clz	r3, r3
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	095b      	lsrs	r3, r3, #5
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d102      	bne.n	80014d0 <HAL_RCC_OscConfig+0x94>
 80014ca:	4ba8      	ldr	r3, [pc, #672]	; (800176c <HAL_RCC_OscConfig+0x330>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	e015      	b.n	80014fc <HAL_RCC_OscConfig+0xc0>
 80014d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014d4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80014dc:	fa93 f3a3 	rbit	r3, r3
 80014e0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80014e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014e8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80014ec:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80014f0:	fa93 f3a3 	rbit	r3, r3
 80014f4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80014f8:	4b9c      	ldr	r3, [pc, #624]	; (800176c <HAL_RCC_OscConfig+0x330>)
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001500:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001504:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001508:	fa92 f2a2 	rbit	r2, r2
 800150c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001510:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001514:	fab2 f282 	clz	r2, r2
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	f042 0220 	orr.w	r2, r2, #32
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	f002 021f 	and.w	r2, r2, #31
 8001524:	2101      	movs	r1, #1
 8001526:	fa01 f202 	lsl.w	r2, r1, r2
 800152a:	4013      	ands	r3, r2
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 811f 	beq.w	8001770 <HAL_RCC_OscConfig+0x334>
 8001532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001536:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	f040 8116 	bne.w	8001770 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	f000 bfaf 	b.w	80024a8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800154a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800154e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800155a:	d106      	bne.n	800156a <HAL_RCC_OscConfig+0x12e>
 800155c:	4b83      	ldr	r3, [pc, #524]	; (800176c <HAL_RCC_OscConfig+0x330>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a82      	ldr	r2, [pc, #520]	; (800176c <HAL_RCC_OscConfig+0x330>)
 8001562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	e036      	b.n	80015d8 <HAL_RCC_OscConfig+0x19c>
 800156a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800156e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10c      	bne.n	8001594 <HAL_RCC_OscConfig+0x158>
 800157a:	4b7c      	ldr	r3, [pc, #496]	; (800176c <HAL_RCC_OscConfig+0x330>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a7b      	ldr	r2, [pc, #492]	; (800176c <HAL_RCC_OscConfig+0x330>)
 8001580:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	4b79      	ldr	r3, [pc, #484]	; (800176c <HAL_RCC_OscConfig+0x330>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a78      	ldr	r2, [pc, #480]	; (800176c <HAL_RCC_OscConfig+0x330>)
 800158c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	e021      	b.n	80015d8 <HAL_RCC_OscConfig+0x19c>
 8001594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001598:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015a4:	d10c      	bne.n	80015c0 <HAL_RCC_OscConfig+0x184>
 80015a6:	4b71      	ldr	r3, [pc, #452]	; (800176c <HAL_RCC_OscConfig+0x330>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a70      	ldr	r2, [pc, #448]	; (800176c <HAL_RCC_OscConfig+0x330>)
 80015ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	4b6e      	ldr	r3, [pc, #440]	; (800176c <HAL_RCC_OscConfig+0x330>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a6d      	ldr	r2, [pc, #436]	; (800176c <HAL_RCC_OscConfig+0x330>)
 80015b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	e00b      	b.n	80015d8 <HAL_RCC_OscConfig+0x19c>
 80015c0:	4b6a      	ldr	r3, [pc, #424]	; (800176c <HAL_RCC_OscConfig+0x330>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a69      	ldr	r2, [pc, #420]	; (800176c <HAL_RCC_OscConfig+0x330>)
 80015c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	4b67      	ldr	r3, [pc, #412]	; (800176c <HAL_RCC_OscConfig+0x330>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a66      	ldr	r2, [pc, #408]	; (800176c <HAL_RCC_OscConfig+0x330>)
 80015d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015d8:	4b64      	ldr	r3, [pc, #400]	; (800176c <HAL_RCC_OscConfig+0x330>)
 80015da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015dc:	f023 020f 	bic.w	r2, r3, #15
 80015e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	495f      	ldr	r1, [pc, #380]	; (800176c <HAL_RCC_OscConfig+0x330>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d059      	beq.n	80016b6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001602:	f7ff fa9f 	bl	8000b44 <HAL_GetTick>
 8001606:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160a:	e00a      	b.n	8001622 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800160c:	f7ff fa9a 	bl	8000b44 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b64      	cmp	r3, #100	; 0x64
 800161a:	d902      	bls.n	8001622 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	f000 bf43 	b.w	80024a8 <HAL_RCC_OscConfig+0x106c>
 8001622:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001626:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800162e:	fa93 f3a3 	rbit	r3, r3
 8001632:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001636:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163a:	fab3 f383 	clz	r3, r3
 800163e:	b2db      	uxtb	r3, r3
 8001640:	095b      	lsrs	r3, r3, #5
 8001642:	b2db      	uxtb	r3, r3
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b01      	cmp	r3, #1
 800164c:	d102      	bne.n	8001654 <HAL_RCC_OscConfig+0x218>
 800164e:	4b47      	ldr	r3, [pc, #284]	; (800176c <HAL_RCC_OscConfig+0x330>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	e015      	b.n	8001680 <HAL_RCC_OscConfig+0x244>
 8001654:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001658:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001660:	fa93 f3a3 	rbit	r3, r3
 8001664:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001668:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800166c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001670:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001674:	fa93 f3a3 	rbit	r3, r3
 8001678:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800167c:	4b3b      	ldr	r3, [pc, #236]	; (800176c <HAL_RCC_OscConfig+0x330>)
 800167e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001680:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001684:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001688:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800168c:	fa92 f2a2 	rbit	r2, r2
 8001690:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001694:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001698:	fab2 f282 	clz	r2, r2
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	f042 0220 	orr.w	r2, r2, #32
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	f002 021f 	and.w	r2, r2, #31
 80016a8:	2101      	movs	r1, #1
 80016aa:	fa01 f202 	lsl.w	r2, r1, r2
 80016ae:	4013      	ands	r3, r2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0ab      	beq.n	800160c <HAL_RCC_OscConfig+0x1d0>
 80016b4:	e05d      	b.n	8001772 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b6:	f7ff fa45 	bl	8000b44 <HAL_GetTick>
 80016ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016be:	e00a      	b.n	80016d6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016c0:	f7ff fa40 	bl	8000b44 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b64      	cmp	r3, #100	; 0x64
 80016ce:	d902      	bls.n	80016d6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	f000 bee9 	b.w	80024a8 <HAL_RCC_OscConfig+0x106c>
 80016d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016da:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016de:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80016e2:	fa93 f3a3 	rbit	r3, r3
 80016e6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80016ea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ee:	fab3 f383 	clz	r3, r3
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	095b      	lsrs	r3, r3, #5
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d102      	bne.n	8001708 <HAL_RCC_OscConfig+0x2cc>
 8001702:	4b1a      	ldr	r3, [pc, #104]	; (800176c <HAL_RCC_OscConfig+0x330>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	e015      	b.n	8001734 <HAL_RCC_OscConfig+0x2f8>
 8001708:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800170c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001710:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001714:	fa93 f3a3 	rbit	r3, r3
 8001718:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800171c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001720:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001724:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001728:	fa93 f3a3 	rbit	r3, r3
 800172c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001730:	4b0e      	ldr	r3, [pc, #56]	; (800176c <HAL_RCC_OscConfig+0x330>)
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001738:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800173c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001740:	fa92 f2a2 	rbit	r2, r2
 8001744:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001748:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800174c:	fab2 f282 	clz	r2, r2
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	f042 0220 	orr.w	r2, r2, #32
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	f002 021f 	and.w	r2, r2, #31
 800175c:	2101      	movs	r1, #1
 800175e:	fa01 f202 	lsl.w	r2, r1, r2
 8001762:	4013      	ands	r3, r2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1ab      	bne.n	80016c0 <HAL_RCC_OscConfig+0x284>
 8001768:	e003      	b.n	8001772 <HAL_RCC_OscConfig+0x336>
 800176a:	bf00      	nop
 800176c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001776:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 817d 	beq.w	8001a82 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001788:	4ba6      	ldr	r3, [pc, #664]	; (8001a24 <HAL_RCC_OscConfig+0x5e8>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 030c 	and.w	r3, r3, #12
 8001790:	2b00      	cmp	r3, #0
 8001792:	d00b      	beq.n	80017ac <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001794:	4ba3      	ldr	r3, [pc, #652]	; (8001a24 <HAL_RCC_OscConfig+0x5e8>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 030c 	and.w	r3, r3, #12
 800179c:	2b08      	cmp	r3, #8
 800179e:	d172      	bne.n	8001886 <HAL_RCC_OscConfig+0x44a>
 80017a0:	4ba0      	ldr	r3, [pc, #640]	; (8001a24 <HAL_RCC_OscConfig+0x5e8>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d16c      	bne.n	8001886 <HAL_RCC_OscConfig+0x44a>
 80017ac:	2302      	movs	r3, #2
 80017ae:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80017b6:	fa93 f3a3 	rbit	r3, r3
 80017ba:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80017be:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017c2:	fab3 f383 	clz	r3, r3
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	095b      	lsrs	r3, r3, #5
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d102      	bne.n	80017dc <HAL_RCC_OscConfig+0x3a0>
 80017d6:	4b93      	ldr	r3, [pc, #588]	; (8001a24 <HAL_RCC_OscConfig+0x5e8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	e013      	b.n	8001804 <HAL_RCC_OscConfig+0x3c8>
 80017dc:	2302      	movs	r3, #2
 80017de:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80017e6:	fa93 f3a3 	rbit	r3, r3
 80017ea:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80017ee:	2302      	movs	r3, #2
 80017f0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80017f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80017f8:	fa93 f3a3 	rbit	r3, r3
 80017fc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001800:	4b88      	ldr	r3, [pc, #544]	; (8001a24 <HAL_RCC_OscConfig+0x5e8>)
 8001802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001804:	2202      	movs	r2, #2
 8001806:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800180a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800180e:	fa92 f2a2 	rbit	r2, r2
 8001812:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001816:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800181a:	fab2 f282 	clz	r2, r2
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	f042 0220 	orr.w	r2, r2, #32
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	f002 021f 	and.w	r2, r2, #31
 800182a:	2101      	movs	r1, #1
 800182c:	fa01 f202 	lsl.w	r2, r1, r2
 8001830:	4013      	ands	r3, r2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d00a      	beq.n	800184c <HAL_RCC_OscConfig+0x410>
 8001836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800183a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d002      	beq.n	800184c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	f000 be2e 	b.w	80024a8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800184c:	4b75      	ldr	r3, [pc, #468]	; (8001a24 <HAL_RCC_OscConfig+0x5e8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001858:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	21f8      	movs	r1, #248	; 0xf8
 8001862:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001866:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800186a:	fa91 f1a1 	rbit	r1, r1
 800186e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001872:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001876:	fab1 f181 	clz	r1, r1
 800187a:	b2c9      	uxtb	r1, r1
 800187c:	408b      	lsls	r3, r1
 800187e:	4969      	ldr	r1, [pc, #420]	; (8001a24 <HAL_RCC_OscConfig+0x5e8>)
 8001880:	4313      	orrs	r3, r2
 8001882:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001884:	e0fd      	b.n	8001a82 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 8088 	beq.w	80019a8 <HAL_RCC_OscConfig+0x56c>
 8001898:	2301      	movs	r3, #1
 800189a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80018a2:	fa93 f3a3 	rbit	r3, r3
 80018a6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80018aa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ae:	fab3 f383 	clz	r3, r3
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	461a      	mov	r2, r3
 80018c0:	2301      	movs	r3, #1
 80018c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c4:	f7ff f93e 	bl	8000b44 <HAL_GetTick>
 80018c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018cc:	e00a      	b.n	80018e4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ce:	f7ff f939 	bl	8000b44 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d902      	bls.n	80018e4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	f000 bde2 	b.w	80024a8 <HAL_RCC_OscConfig+0x106c>
 80018e4:	2302      	movs	r3, #2
 80018e6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ea:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80018ee:	fa93 f3a3 	rbit	r3, r3
 80018f2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80018f6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fa:	fab3 f383 	clz	r3, r3
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	095b      	lsrs	r3, r3, #5
 8001902:	b2db      	uxtb	r3, r3
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b01      	cmp	r3, #1
 800190c:	d102      	bne.n	8001914 <HAL_RCC_OscConfig+0x4d8>
 800190e:	4b45      	ldr	r3, [pc, #276]	; (8001a24 <HAL_RCC_OscConfig+0x5e8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	e013      	b.n	800193c <HAL_RCC_OscConfig+0x500>
 8001914:	2302      	movs	r3, #2
 8001916:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800191e:	fa93 f3a3 	rbit	r3, r3
 8001922:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001926:	2302      	movs	r3, #2
 8001928:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800192c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001930:	fa93 f3a3 	rbit	r3, r3
 8001934:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001938:	4b3a      	ldr	r3, [pc, #232]	; (8001a24 <HAL_RCC_OscConfig+0x5e8>)
 800193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193c:	2202      	movs	r2, #2
 800193e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001942:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001946:	fa92 f2a2 	rbit	r2, r2
 800194a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800194e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001952:	fab2 f282 	clz	r2, r2
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	f042 0220 	orr.w	r2, r2, #32
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	f002 021f 	and.w	r2, r2, #31
 8001962:	2101      	movs	r1, #1
 8001964:	fa01 f202 	lsl.w	r2, r1, r2
 8001968:	4013      	ands	r3, r2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0af      	beq.n	80018ce <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196e:	4b2d      	ldr	r3, [pc, #180]	; (8001a24 <HAL_RCC_OscConfig+0x5e8>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	21f8      	movs	r1, #248	; 0xf8
 8001984:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001988:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800198c:	fa91 f1a1 	rbit	r1, r1
 8001990:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001994:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001998:	fab1 f181 	clz	r1, r1
 800199c:	b2c9      	uxtb	r1, r1
 800199e:	408b      	lsls	r3, r1
 80019a0:	4920      	ldr	r1, [pc, #128]	; (8001a24 <HAL_RCC_OscConfig+0x5e8>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	600b      	str	r3, [r1, #0]
 80019a6:	e06c      	b.n	8001a82 <HAL_RCC_OscConfig+0x646>
 80019a8:	2301      	movs	r3, #1
 80019aa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80019b2:	fa93 f3a3 	rbit	r3, r3
 80019b6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80019ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019be:	fab3 f383 	clz	r3, r3
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	461a      	mov	r2, r3
 80019d0:	2300      	movs	r3, #0
 80019d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d4:	f7ff f8b6 	bl	8000b44 <HAL_GetTick>
 80019d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019dc:	e00a      	b.n	80019f4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019de:	f7ff f8b1 	bl	8000b44 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d902      	bls.n	80019f4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	f000 bd5a 	b.w	80024a8 <HAL_RCC_OscConfig+0x106c>
 80019f4:	2302      	movs	r3, #2
 80019f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80019fe:	fa93 f3a3 	rbit	r3, r3
 8001a02:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001a06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0a:	fab3 f383 	clz	r3, r3
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	095b      	lsrs	r3, r3, #5
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d104      	bne.n	8001a28 <HAL_RCC_OscConfig+0x5ec>
 8001a1e:	4b01      	ldr	r3, [pc, #4]	; (8001a24 <HAL_RCC_OscConfig+0x5e8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	e015      	b.n	8001a50 <HAL_RCC_OscConfig+0x614>
 8001a24:	40021000 	.word	0x40021000
 8001a28:	2302      	movs	r3, #2
 8001a2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001a32:	fa93 f3a3 	rbit	r3, r3
 8001a36:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a40:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a44:	fa93 f3a3 	rbit	r3, r3
 8001a48:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001a4c:	4bc8      	ldr	r3, [pc, #800]	; (8001d70 <HAL_RCC_OscConfig+0x934>)
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	2202      	movs	r2, #2
 8001a52:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001a56:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a5a:	fa92 f2a2 	rbit	r2, r2
 8001a5e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001a62:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001a66:	fab2 f282 	clz	r2, r2
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	f042 0220 	orr.w	r2, r2, #32
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	f002 021f 	and.w	r2, r2, #31
 8001a76:	2101      	movs	r1, #1
 8001a78:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1ad      	bne.n	80019de <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 8110 	beq.w	8001cb8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d079      	beq.n	8001b9c <HAL_RCC_OscConfig+0x760>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001ab2:	fa93 f3a3 	rbit	r3, r3
 8001ab6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001aba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001abe:	fab3 f383 	clz	r3, r3
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4bab      	ldr	r3, [pc, #684]	; (8001d74 <HAL_RCC_OscConfig+0x938>)
 8001ac8:	4413      	add	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	461a      	mov	r2, r3
 8001ace:	2301      	movs	r3, #1
 8001ad0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad2:	f7ff f837 	bl	8000b44 <HAL_GetTick>
 8001ad6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ada:	e00a      	b.n	8001af2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001adc:	f7ff f832 	bl	8000b44 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d902      	bls.n	8001af2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	f000 bcdb 	b.w	80024a8 <HAL_RCC_OscConfig+0x106c>
 8001af2:	2302      	movs	r3, #2
 8001af4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001afc:	fa93 f3a3 	rbit	r3, r3
 8001b00:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b08:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b14:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	fa93 f2a3 	rbit	r2, r3
 8001b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b30:	2202      	movs	r2, #2
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	fa93 f2a3 	rbit	r2, r3
 8001b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b46:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b4a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4c:	4b88      	ldr	r3, [pc, #544]	; (8001d70 <HAL_RCC_OscConfig+0x934>)
 8001b4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b54:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001b58:	2102      	movs	r1, #2
 8001b5a:	6019      	str	r1, [r3, #0]
 8001b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b60:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	fa93 f1a3 	rbit	r1, r3
 8001b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001b72:	6019      	str	r1, [r3, #0]
  return result;
 8001b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b78:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	fab3 f383 	clz	r3, r3
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	f003 031f 	and.w	r3, r3, #31
 8001b8e:	2101      	movs	r1, #1
 8001b90:	fa01 f303 	lsl.w	r3, r1, r3
 8001b94:	4013      	ands	r3, r2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0a0      	beq.n	8001adc <HAL_RCC_OscConfig+0x6a0>
 8001b9a:	e08d      	b.n	8001cb8 <HAL_RCC_OscConfig+0x87c>
 8001b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	fa93 f2a3 	rbit	r2, r3
 8001bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001bbe:	601a      	str	r2, [r3, #0]
  return result;
 8001bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001bc8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bca:	fab3 f383 	clz	r3, r3
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b68      	ldr	r3, [pc, #416]	; (8001d74 <HAL_RCC_OscConfig+0x938>)
 8001bd4:	4413      	add	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	461a      	mov	r2, r3
 8001bda:	2300      	movs	r3, #0
 8001bdc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bde:	f7fe ffb1 	bl	8000b44 <HAL_GetTick>
 8001be2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be6:	e00a      	b.n	8001bfe <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001be8:	f7fe ffac 	bl	8000b44 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d902      	bls.n	8001bfe <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	f000 bc55 	b.w	80024a8 <HAL_RCC_OscConfig+0x106c>
 8001bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c02:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c06:	2202      	movs	r2, #2
 8001c08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	fa93 f2a3 	rbit	r2, r3
 8001c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c26:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c32:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	fa93 f2a3 	rbit	r2, r3
 8001c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c4e:	2202      	movs	r2, #2
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	fa93 f2a3 	rbit	r2, r3
 8001c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c64:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c68:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c6a:	4b41      	ldr	r3, [pc, #260]	; (8001d70 <HAL_RCC_OscConfig+0x934>)
 8001c6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c72:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001c76:	2102      	movs	r1, #2
 8001c78:	6019      	str	r1, [r3, #0]
 8001c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	fa93 f1a3 	rbit	r1, r3
 8001c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001c90:	6019      	str	r1, [r3, #0]
  return result;
 8001c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c96:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	fab3 f383 	clz	r3, r3
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	f003 031f 	and.w	r3, r3, #31
 8001cac:	2101      	movs	r1, #1
 8001cae:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d197      	bne.n	8001be8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 81a1 	beq.w	8002010 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cd4:	4b26      	ldr	r3, [pc, #152]	; (8001d70 <HAL_RCC_OscConfig+0x934>)
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d116      	bne.n	8001d0e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce0:	4b23      	ldr	r3, [pc, #140]	; (8001d70 <HAL_RCC_OscConfig+0x934>)
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	4a22      	ldr	r2, [pc, #136]	; (8001d70 <HAL_RCC_OscConfig+0x934>)
 8001ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cea:	61d3      	str	r3, [r2, #28]
 8001cec:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <HAL_RCC_OscConfig+0x934>)
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d02:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001d06:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0e:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <HAL_RCC_OscConfig+0x93c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d11a      	bne.n	8001d50 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d1a:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <HAL_RCC_OscConfig+0x93c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a16      	ldr	r2, [pc, #88]	; (8001d78 <HAL_RCC_OscConfig+0x93c>)
 8001d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d24:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d26:	f7fe ff0d 	bl	8000b44 <HAL_GetTick>
 8001d2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2e:	e009      	b.n	8001d44 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d30:	f7fe ff08 	bl	8000b44 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b64      	cmp	r3, #100	; 0x64
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e3b1      	b.n	80024a8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d44:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <HAL_RCC_OscConfig+0x93c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0ef      	beq.n	8001d30 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d10d      	bne.n	8001d7c <HAL_RCC_OscConfig+0x940>
 8001d60:	4b03      	ldr	r3, [pc, #12]	; (8001d70 <HAL_RCC_OscConfig+0x934>)
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	4a02      	ldr	r2, [pc, #8]	; (8001d70 <HAL_RCC_OscConfig+0x934>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6213      	str	r3, [r2, #32]
 8001d6c:	e03c      	b.n	8001de8 <HAL_RCC_OscConfig+0x9ac>
 8001d6e:	bf00      	nop
 8001d70:	40021000 	.word	0x40021000
 8001d74:	10908120 	.word	0x10908120
 8001d78:	40007000 	.word	0x40007000
 8001d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10c      	bne.n	8001da6 <HAL_RCC_OscConfig+0x96a>
 8001d8c:	4bc1      	ldr	r3, [pc, #772]	; (8002094 <HAL_RCC_OscConfig+0xc58>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	4ac0      	ldr	r2, [pc, #768]	; (8002094 <HAL_RCC_OscConfig+0xc58>)
 8001d92:	f023 0301 	bic.w	r3, r3, #1
 8001d96:	6213      	str	r3, [r2, #32]
 8001d98:	4bbe      	ldr	r3, [pc, #760]	; (8002094 <HAL_RCC_OscConfig+0xc58>)
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	4abd      	ldr	r2, [pc, #756]	; (8002094 <HAL_RCC_OscConfig+0xc58>)
 8001d9e:	f023 0304 	bic.w	r3, r3, #4
 8001da2:	6213      	str	r3, [r2, #32]
 8001da4:	e020      	b.n	8001de8 <HAL_RCC_OscConfig+0x9ac>
 8001da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001daa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	2b05      	cmp	r3, #5
 8001db4:	d10c      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x994>
 8001db6:	4bb7      	ldr	r3, [pc, #732]	; (8002094 <HAL_RCC_OscConfig+0xc58>)
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	4ab6      	ldr	r2, [pc, #728]	; (8002094 <HAL_RCC_OscConfig+0xc58>)
 8001dbc:	f043 0304 	orr.w	r3, r3, #4
 8001dc0:	6213      	str	r3, [r2, #32]
 8001dc2:	4bb4      	ldr	r3, [pc, #720]	; (8002094 <HAL_RCC_OscConfig+0xc58>)
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	4ab3      	ldr	r2, [pc, #716]	; (8002094 <HAL_RCC_OscConfig+0xc58>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6213      	str	r3, [r2, #32]
 8001dce:	e00b      	b.n	8001de8 <HAL_RCC_OscConfig+0x9ac>
 8001dd0:	4bb0      	ldr	r3, [pc, #704]	; (8002094 <HAL_RCC_OscConfig+0xc58>)
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	4aaf      	ldr	r2, [pc, #700]	; (8002094 <HAL_RCC_OscConfig+0xc58>)
 8001dd6:	f023 0301 	bic.w	r3, r3, #1
 8001dda:	6213      	str	r3, [r2, #32]
 8001ddc:	4bad      	ldr	r3, [pc, #692]	; (8002094 <HAL_RCC_OscConfig+0xc58>)
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	4aac      	ldr	r2, [pc, #688]	; (8002094 <HAL_RCC_OscConfig+0xc58>)
 8001de2:	f023 0304 	bic.w	r3, r3, #4
 8001de6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 8081 	beq.w	8001efc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfa:	f7fe fea3 	bl	8000b44 <HAL_GetTick>
 8001dfe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e02:	e00b      	b.n	8001e1c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e04:	f7fe fe9e 	bl	8000b44 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e345      	b.n	80024a8 <HAL_RCC_OscConfig+0x106c>
 8001e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e20:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e24:	2202      	movs	r2, #2
 8001e26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	fa93 f2a3 	rbit	r2, r3
 8001e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e44:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001e48:	2202      	movs	r2, #2
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e50:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	fa93 f2a3 	rbit	r2, r3
 8001e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001e62:	601a      	str	r2, [r3, #0]
  return result;
 8001e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e68:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001e6c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e6e:	fab3 f383 	clz	r3, r3
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	095b      	lsrs	r3, r3, #5
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	f043 0302 	orr.w	r3, r3, #2
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d102      	bne.n	8001e88 <HAL_RCC_OscConfig+0xa4c>
 8001e82:	4b84      	ldr	r3, [pc, #528]	; (8002094 <HAL_RCC_OscConfig+0xc58>)
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	e013      	b.n	8001eb0 <HAL_RCC_OscConfig+0xa74>
 8001e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001e90:	2202      	movs	r2, #2
 8001e92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e98:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	fa93 f2a3 	rbit	r2, r3
 8001ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	4b79      	ldr	r3, [pc, #484]	; (8002094 <HAL_RCC_OscConfig+0xc58>)
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001eb4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001eb8:	2102      	movs	r1, #2
 8001eba:	6011      	str	r1, [r2, #0]
 8001ebc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ec0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	fa92 f1a2 	rbit	r1, r2
 8001eca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ece:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001ed2:	6011      	str	r1, [r2, #0]
  return result;
 8001ed4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ed8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001edc:	6812      	ldr	r2, [r2, #0]
 8001ede:	fab2 f282 	clz	r2, r2
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	f002 021f 	and.w	r2, r2, #31
 8001eee:	2101      	movs	r1, #1
 8001ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d084      	beq.n	8001e04 <HAL_RCC_OscConfig+0x9c8>
 8001efa:	e07f      	b.n	8001ffc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efc:	f7fe fe22 	bl	8000b44 <HAL_GetTick>
 8001f00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f04:	e00b      	b.n	8001f1e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f06:	f7fe fe1d 	bl	8000b44 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e2c4      	b.n	80024a8 <HAL_RCC_OscConfig+0x106c>
 8001f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f22:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001f26:	2202      	movs	r2, #2
 8001f28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	fa93 f2a3 	rbit	r2, r3
 8001f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f3c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f46:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f52:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	fa93 f2a3 	rbit	r2, r3
 8001f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f60:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001f64:	601a      	str	r2, [r3, #0]
  return result;
 8001f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001f6e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f70:	fab3 f383 	clz	r3, r3
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	095b      	lsrs	r3, r3, #5
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	f043 0302 	orr.w	r3, r3, #2
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d102      	bne.n	8001f8a <HAL_RCC_OscConfig+0xb4e>
 8001f84:	4b43      	ldr	r3, [pc, #268]	; (8002094 <HAL_RCC_OscConfig+0xc58>)
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	e013      	b.n	8001fb2 <HAL_RCC_OscConfig+0xb76>
 8001f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001f92:	2202      	movs	r2, #2
 8001f94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	fa93 f2a3 	rbit	r2, r3
 8001fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	4b39      	ldr	r3, [pc, #228]	; (8002094 <HAL_RCC_OscConfig+0xc58>)
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fb6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001fba:	2102      	movs	r1, #2
 8001fbc:	6011      	str	r1, [r2, #0]
 8001fbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fc2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001fc6:	6812      	ldr	r2, [r2, #0]
 8001fc8:	fa92 f1a2 	rbit	r1, r2
 8001fcc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fd0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001fd4:	6011      	str	r1, [r2, #0]
  return result;
 8001fd6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fda:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001fde:	6812      	ldr	r2, [r2, #0]
 8001fe0:	fab2 f282 	clz	r2, r2
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	f002 021f 	and.w	r2, r2, #31
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d184      	bne.n	8001f06 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ffc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002000:	2b01      	cmp	r3, #1
 8002002:	d105      	bne.n	8002010 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002004:	4b23      	ldr	r3, [pc, #140]	; (8002094 <HAL_RCC_OscConfig+0xc58>)
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	4a22      	ldr	r2, [pc, #136]	; (8002094 <HAL_RCC_OscConfig+0xc58>)
 800200a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800200e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002014:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	69db      	ldr	r3, [r3, #28]
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 8242 	beq.w	80024a6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002022:	4b1c      	ldr	r3, [pc, #112]	; (8002094 <HAL_RCC_OscConfig+0xc58>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	2b08      	cmp	r3, #8
 800202c:	f000 8213 	beq.w	8002456 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002034:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	2b02      	cmp	r3, #2
 800203e:	f040 8162 	bne.w	8002306 <HAL_RCC_OscConfig+0xeca>
 8002042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002046:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800204a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800204e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002054:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	fa93 f2a3 	rbit	r2, r3
 800205e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002062:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002066:	601a      	str	r2, [r3, #0]
  return result;
 8002068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002070:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002072:	fab3 f383 	clz	r3, r3
 8002076:	b2db      	uxtb	r3, r3
 8002078:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800207c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	461a      	mov	r2, r3
 8002084:	2300      	movs	r3, #0
 8002086:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002088:	f7fe fd5c 	bl	8000b44 <HAL_GetTick>
 800208c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002090:	e00c      	b.n	80020ac <HAL_RCC_OscConfig+0xc70>
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002098:	f7fe fd54 	bl	8000b44 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e1fd      	b.n	80024a8 <HAL_RCC_OscConfig+0x106c>
 80020ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80020b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020be:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	fa93 f2a3 	rbit	r2, r3
 80020c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020cc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80020d0:	601a      	str	r2, [r3, #0]
  return result;
 80020d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80020da:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020dc:	fab3 f383 	clz	r3, r3
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	095b      	lsrs	r3, r3, #5
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d102      	bne.n	80020f6 <HAL_RCC_OscConfig+0xcba>
 80020f0:	4bb0      	ldr	r3, [pc, #704]	; (80023b4 <HAL_RCC_OscConfig+0xf78>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	e027      	b.n	8002146 <HAL_RCC_OscConfig+0xd0a>
 80020f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80020fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002102:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002108:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	fa93 f2a3 	rbit	r2, r3
 8002112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002116:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002120:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002124:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	fa93 f2a3 	rbit	r2, r3
 8002138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	4b9c      	ldr	r3, [pc, #624]	; (80023b4 <HAL_RCC_OscConfig+0xf78>)
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800214a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800214e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002152:	6011      	str	r1, [r2, #0]
 8002154:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002158:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800215c:	6812      	ldr	r2, [r2, #0]
 800215e:	fa92 f1a2 	rbit	r1, r2
 8002162:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002166:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800216a:	6011      	str	r1, [r2, #0]
  return result;
 800216c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002170:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002174:	6812      	ldr	r2, [r2, #0]
 8002176:	fab2 f282 	clz	r2, r2
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	f042 0220 	orr.w	r2, r2, #32
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	f002 021f 	and.w	r2, r2, #31
 8002186:	2101      	movs	r1, #1
 8002188:	fa01 f202 	lsl.w	r2, r1, r2
 800218c:	4013      	ands	r3, r2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d182      	bne.n	8002098 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002192:	4b88      	ldr	r3, [pc, #544]	; (80023b4 <HAL_RCC_OscConfig+0xf78>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800219a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80021a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	430b      	orrs	r3, r1
 80021b4:	497f      	ldr	r1, [pc, #508]	; (80023b4 <HAL_RCC_OscConfig+0xf78>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	604b      	str	r3, [r1, #4]
 80021ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021be:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80021c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021cc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	fa93 f2a3 	rbit	r2, r3
 80021d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021da:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80021de:	601a      	str	r2, [r3, #0]
  return result;
 80021e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80021e8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021ea:	fab3 f383 	clz	r3, r3
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	461a      	mov	r2, r3
 80021fc:	2301      	movs	r3, #1
 80021fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002200:	f7fe fca0 	bl	8000b44 <HAL_GetTick>
 8002204:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002208:	e009      	b.n	800221e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800220a:	f7fe fc9b 	bl	8000b44 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e144      	b.n	80024a8 <HAL_RCC_OscConfig+0x106c>
 800221e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002222:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002226:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800222a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002230:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	fa93 f2a3 	rbit	r2, r3
 800223a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002242:	601a      	str	r2, [r3, #0]
  return result;
 8002244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002248:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800224c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800224e:	fab3 f383 	clz	r3, r3
 8002252:	b2db      	uxtb	r3, r3
 8002254:	095b      	lsrs	r3, r3, #5
 8002256:	b2db      	uxtb	r3, r3
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b01      	cmp	r3, #1
 8002260:	d102      	bne.n	8002268 <HAL_RCC_OscConfig+0xe2c>
 8002262:	4b54      	ldr	r3, [pc, #336]	; (80023b4 <HAL_RCC_OscConfig+0xf78>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	e027      	b.n	80022b8 <HAL_RCC_OscConfig+0xe7c>
 8002268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002270:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002274:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	fa93 f2a3 	rbit	r2, r3
 8002284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002288:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002292:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002296:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	fa93 f2a3 	rbit	r2, r3
 80022aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ae:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	4b3f      	ldr	r3, [pc, #252]	; (80023b4 <HAL_RCC_OscConfig+0xf78>)
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022bc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80022c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022c4:	6011      	str	r1, [r2, #0]
 80022c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022ca:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	fa92 f1a2 	rbit	r1, r2
 80022d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022d8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80022dc:	6011      	str	r1, [r2, #0]
  return result;
 80022de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022e2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80022e6:	6812      	ldr	r2, [r2, #0]
 80022e8:	fab2 f282 	clz	r2, r2
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	f042 0220 	orr.w	r2, r2, #32
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	f002 021f 	and.w	r2, r2, #31
 80022f8:	2101      	movs	r1, #1
 80022fa:	fa01 f202 	lsl.w	r2, r1, r2
 80022fe:	4013      	ands	r3, r2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d082      	beq.n	800220a <HAL_RCC_OscConfig+0xdce>
 8002304:	e0cf      	b.n	80024a6 <HAL_RCC_OscConfig+0x106a>
 8002306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800230e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002312:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002318:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	fa93 f2a3 	rbit	r2, r3
 8002322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002326:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800232a:	601a      	str	r2, [r3, #0]
  return result;
 800232c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002330:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002334:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002336:	fab3 f383 	clz	r3, r3
 800233a:	b2db      	uxtb	r3, r3
 800233c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002340:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	461a      	mov	r2, r3
 8002348:	2300      	movs	r3, #0
 800234a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234c:	f7fe fbfa 	bl	8000b44 <HAL_GetTick>
 8002350:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002354:	e009      	b.n	800236a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002356:	f7fe fbf5 	bl	8000b44 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e09e      	b.n	80024a8 <HAL_RCC_OscConfig+0x106c>
 800236a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002372:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002376:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	fa93 f2a3 	rbit	r2, r3
 8002386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800238e:	601a      	str	r2, [r3, #0]
  return result;
 8002390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002394:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002398:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800239a:	fab3 f383 	clz	r3, r3
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	095b      	lsrs	r3, r3, #5
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d104      	bne.n	80023b8 <HAL_RCC_OscConfig+0xf7c>
 80023ae:	4b01      	ldr	r3, [pc, #4]	; (80023b4 <HAL_RCC_OscConfig+0xf78>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	e029      	b.n	8002408 <HAL_RCC_OscConfig+0xfcc>
 80023b4:	40021000 	.word	0x40021000
 80023b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023bc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80023c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ca:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	fa93 f2a3 	rbit	r2, r3
 80023d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80023e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	fa93 f2a3 	rbit	r2, r3
 80023fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fe:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	4b2b      	ldr	r3, [pc, #172]	; (80024b4 <HAL_RCC_OscConfig+0x1078>)
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800240c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002410:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002414:	6011      	str	r1, [r2, #0]
 8002416:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800241a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800241e:	6812      	ldr	r2, [r2, #0]
 8002420:	fa92 f1a2 	rbit	r1, r2
 8002424:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002428:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800242c:	6011      	str	r1, [r2, #0]
  return result;
 800242e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002432:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	fab2 f282 	clz	r2, r2
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	f042 0220 	orr.w	r2, r2, #32
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	f002 021f 	and.w	r2, r2, #31
 8002448:	2101      	movs	r1, #1
 800244a:	fa01 f202 	lsl.w	r2, r1, r2
 800244e:	4013      	ands	r3, r2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d180      	bne.n	8002356 <HAL_RCC_OscConfig+0xf1a>
 8002454:	e027      	b.n	80024a6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d101      	bne.n	800246a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e01e      	b.n	80024a8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800246a:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <HAL_RCC_OscConfig+0x1078>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002472:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002476:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800247a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	429a      	cmp	r2, r3
 8002488:	d10b      	bne.n	80024a2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800248a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800248e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002496:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800249e:	429a      	cmp	r2, r3
 80024a0:	d001      	beq.n	80024a6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000

080024b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b09e      	sub	sp, #120	; 0x78
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e162      	b.n	8002796 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024d0:	4b90      	ldr	r3, [pc, #576]	; (8002714 <HAL_RCC_ClockConfig+0x25c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d910      	bls.n	8002500 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024de:	4b8d      	ldr	r3, [pc, #564]	; (8002714 <HAL_RCC_ClockConfig+0x25c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f023 0207 	bic.w	r2, r3, #7
 80024e6:	498b      	ldr	r1, [pc, #556]	; (8002714 <HAL_RCC_ClockConfig+0x25c>)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ee:	4b89      	ldr	r3, [pc, #548]	; (8002714 <HAL_RCC_ClockConfig+0x25c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d001      	beq.n	8002500 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e14a      	b.n	8002796 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d008      	beq.n	800251e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800250c:	4b82      	ldr	r3, [pc, #520]	; (8002718 <HAL_RCC_ClockConfig+0x260>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	497f      	ldr	r1, [pc, #508]	; (8002718 <HAL_RCC_ClockConfig+0x260>)
 800251a:	4313      	orrs	r3, r2
 800251c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 80dc 	beq.w	80026e4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d13c      	bne.n	80025ae <HAL_RCC_ClockConfig+0xf6>
 8002534:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002538:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800253c:	fa93 f3a3 	rbit	r3, r3
 8002540:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002544:	fab3 f383 	clz	r3, r3
 8002548:	b2db      	uxtb	r3, r3
 800254a:	095b      	lsrs	r3, r3, #5
 800254c:	b2db      	uxtb	r3, r3
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b01      	cmp	r3, #1
 8002556:	d102      	bne.n	800255e <HAL_RCC_ClockConfig+0xa6>
 8002558:	4b6f      	ldr	r3, [pc, #444]	; (8002718 <HAL_RCC_ClockConfig+0x260>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	e00f      	b.n	800257e <HAL_RCC_ClockConfig+0xc6>
 800255e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002562:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002564:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002566:	fa93 f3a3 	rbit	r3, r3
 800256a:	667b      	str	r3, [r7, #100]	; 0x64
 800256c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002570:	663b      	str	r3, [r7, #96]	; 0x60
 8002572:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002574:	fa93 f3a3 	rbit	r3, r3
 8002578:	65fb      	str	r3, [r7, #92]	; 0x5c
 800257a:	4b67      	ldr	r3, [pc, #412]	; (8002718 <HAL_RCC_ClockConfig+0x260>)
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002582:	65ba      	str	r2, [r7, #88]	; 0x58
 8002584:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002586:	fa92 f2a2 	rbit	r2, r2
 800258a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800258c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800258e:	fab2 f282 	clz	r2, r2
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	f042 0220 	orr.w	r2, r2, #32
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	f002 021f 	and.w	r2, r2, #31
 800259e:	2101      	movs	r1, #1
 80025a0:	fa01 f202 	lsl.w	r2, r1, r2
 80025a4:	4013      	ands	r3, r2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d17b      	bne.n	80026a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e0f3      	b.n	8002796 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d13c      	bne.n	8002630 <HAL_RCC_ClockConfig+0x178>
 80025b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025be:	fa93 f3a3 	rbit	r3, r3
 80025c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80025c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c6:	fab3 f383 	clz	r3, r3
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	095b      	lsrs	r3, r3, #5
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d102      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x128>
 80025da:	4b4f      	ldr	r3, [pc, #316]	; (8002718 <HAL_RCC_ClockConfig+0x260>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	e00f      	b.n	8002600 <HAL_RCC_ClockConfig+0x148>
 80025e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025e8:	fa93 f3a3 	rbit	r3, r3
 80025ec:	647b      	str	r3, [r7, #68]	; 0x44
 80025ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025f2:	643b      	str	r3, [r7, #64]	; 0x40
 80025f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025f6:	fa93 f3a3 	rbit	r3, r3
 80025fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025fc:	4b46      	ldr	r3, [pc, #280]	; (8002718 <HAL_RCC_ClockConfig+0x260>)
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002604:	63ba      	str	r2, [r7, #56]	; 0x38
 8002606:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002608:	fa92 f2a2 	rbit	r2, r2
 800260c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800260e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002610:	fab2 f282 	clz	r2, r2
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	f042 0220 	orr.w	r2, r2, #32
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	f002 021f 	and.w	r2, r2, #31
 8002620:	2101      	movs	r1, #1
 8002622:	fa01 f202 	lsl.w	r2, r1, r2
 8002626:	4013      	ands	r3, r2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d13a      	bne.n	80026a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0b2      	b.n	8002796 <HAL_RCC_ClockConfig+0x2de>
 8002630:	2302      	movs	r3, #2
 8002632:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002636:	fa93 f3a3 	rbit	r3, r3
 800263a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800263c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263e:	fab3 f383 	clz	r3, r3
 8002642:	b2db      	uxtb	r3, r3
 8002644:	095b      	lsrs	r3, r3, #5
 8002646:	b2db      	uxtb	r3, r3
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b01      	cmp	r3, #1
 8002650:	d102      	bne.n	8002658 <HAL_RCC_ClockConfig+0x1a0>
 8002652:	4b31      	ldr	r3, [pc, #196]	; (8002718 <HAL_RCC_ClockConfig+0x260>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	e00d      	b.n	8002674 <HAL_RCC_ClockConfig+0x1bc>
 8002658:	2302      	movs	r3, #2
 800265a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265e:	fa93 f3a3 	rbit	r3, r3
 8002662:	627b      	str	r3, [r7, #36]	; 0x24
 8002664:	2302      	movs	r3, #2
 8002666:	623b      	str	r3, [r7, #32]
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	fa93 f3a3 	rbit	r3, r3
 800266e:	61fb      	str	r3, [r7, #28]
 8002670:	4b29      	ldr	r3, [pc, #164]	; (8002718 <HAL_RCC_ClockConfig+0x260>)
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	2202      	movs	r2, #2
 8002676:	61ba      	str	r2, [r7, #24]
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	fa92 f2a2 	rbit	r2, r2
 800267e:	617a      	str	r2, [r7, #20]
  return result;
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	fab2 f282 	clz	r2, r2
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	f042 0220 	orr.w	r2, r2, #32
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	f002 021f 	and.w	r2, r2, #31
 8002692:	2101      	movs	r1, #1
 8002694:	fa01 f202 	lsl.w	r2, r1, r2
 8002698:	4013      	ands	r3, r2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e079      	b.n	8002796 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026a2:	4b1d      	ldr	r3, [pc, #116]	; (8002718 <HAL_RCC_ClockConfig+0x260>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f023 0203 	bic.w	r2, r3, #3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	491a      	ldr	r1, [pc, #104]	; (8002718 <HAL_RCC_ClockConfig+0x260>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026b4:	f7fe fa46 	bl	8000b44 <HAL_GetTick>
 80026b8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ba:	e00a      	b.n	80026d2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026bc:	f7fe fa42 	bl	8000b44 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e061      	b.n	8002796 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d2:	4b11      	ldr	r3, [pc, #68]	; (8002718 <HAL_RCC_ClockConfig+0x260>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f003 020c 	and.w	r2, r3, #12
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d1eb      	bne.n	80026bc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026e4:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <HAL_RCC_ClockConfig+0x25c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d214      	bcs.n	800271c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f2:	4b08      	ldr	r3, [pc, #32]	; (8002714 <HAL_RCC_ClockConfig+0x25c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 0207 	bic.w	r2, r3, #7
 80026fa:	4906      	ldr	r1, [pc, #24]	; (8002714 <HAL_RCC_ClockConfig+0x25c>)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	4313      	orrs	r3, r2
 8002700:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002702:	4b04      	ldr	r3, [pc, #16]	; (8002714 <HAL_RCC_ClockConfig+0x25c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d005      	beq.n	800271c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e040      	b.n	8002796 <HAL_RCC_ClockConfig+0x2de>
 8002714:	40022000 	.word	0x40022000
 8002718:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b00      	cmp	r3, #0
 8002726:	d008      	beq.n	800273a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002728:	4b1d      	ldr	r3, [pc, #116]	; (80027a0 <HAL_RCC_ClockConfig+0x2e8>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	491a      	ldr	r1, [pc, #104]	; (80027a0 <HAL_RCC_ClockConfig+0x2e8>)
 8002736:	4313      	orrs	r3, r2
 8002738:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b00      	cmp	r3, #0
 8002744:	d009      	beq.n	800275a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002746:	4b16      	ldr	r3, [pc, #88]	; (80027a0 <HAL_RCC_ClockConfig+0x2e8>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	4912      	ldr	r1, [pc, #72]	; (80027a0 <HAL_RCC_ClockConfig+0x2e8>)
 8002756:	4313      	orrs	r3, r2
 8002758:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800275a:	f000 f829 	bl	80027b0 <HAL_RCC_GetSysClockFreq>
 800275e:	4601      	mov	r1, r0
 8002760:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <HAL_RCC_ClockConfig+0x2e8>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002768:	22f0      	movs	r2, #240	; 0xf0
 800276a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	fa92 f2a2 	rbit	r2, r2
 8002772:	60fa      	str	r2, [r7, #12]
  return result;
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	fab2 f282 	clz	r2, r2
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	40d3      	lsrs	r3, r2
 800277e:	4a09      	ldr	r2, [pc, #36]	; (80027a4 <HAL_RCC_ClockConfig+0x2ec>)
 8002780:	5cd3      	ldrb	r3, [r2, r3]
 8002782:	fa21 f303 	lsr.w	r3, r1, r3
 8002786:	4a08      	ldr	r2, [pc, #32]	; (80027a8 <HAL_RCC_ClockConfig+0x2f0>)
 8002788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800278a:	4b08      	ldr	r3, [pc, #32]	; (80027ac <HAL_RCC_ClockConfig+0x2f4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f7fe f994 	bl	8000abc <HAL_InitTick>
  
  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3778      	adds	r7, #120	; 0x78
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40021000 	.word	0x40021000
 80027a4:	08005058 	.word	0x08005058
 80027a8:	20000000 	.word	0x20000000
 80027ac:	20000004 	.word	0x20000004

080027b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b08b      	sub	sp, #44	; 0x2c
 80027b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
 80027ba:	2300      	movs	r3, #0
 80027bc:	61bb      	str	r3, [r7, #24]
 80027be:	2300      	movs	r3, #0
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80027ca:	4b29      	ldr	r3, [pc, #164]	; (8002870 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f003 030c 	and.w	r3, r3, #12
 80027d6:	2b04      	cmp	r3, #4
 80027d8:	d002      	beq.n	80027e0 <HAL_RCC_GetSysClockFreq+0x30>
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d003      	beq.n	80027e6 <HAL_RCC_GetSysClockFreq+0x36>
 80027de:	e03c      	b.n	800285a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027e0:	4b24      	ldr	r3, [pc, #144]	; (8002874 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027e2:	623b      	str	r3, [r7, #32]
      break;
 80027e4:	e03c      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80027ec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80027f0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	fa92 f2a2 	rbit	r2, r2
 80027f8:	607a      	str	r2, [r7, #4]
  return result;
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	fab2 f282 	clz	r2, r2
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	40d3      	lsrs	r3, r2
 8002804:	4a1c      	ldr	r2, [pc, #112]	; (8002878 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002806:	5cd3      	ldrb	r3, [r2, r3]
 8002808:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800280a:	4b19      	ldr	r3, [pc, #100]	; (8002870 <HAL_RCC_GetSysClockFreq+0xc0>)
 800280c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	220f      	movs	r2, #15
 8002814:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	fa92 f2a2 	rbit	r2, r2
 800281c:	60fa      	str	r2, [r7, #12]
  return result;
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	fab2 f282 	clz	r2, r2
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	40d3      	lsrs	r3, r2
 8002828:	4a14      	ldr	r2, [pc, #80]	; (800287c <HAL_RCC_GetSysClockFreq+0xcc>)
 800282a:	5cd3      	ldrb	r3, [r2, r3]
 800282c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d008      	beq.n	800284a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002838:	4a0e      	ldr	r2, [pc, #56]	; (8002874 <HAL_RCC_GetSysClockFreq+0xc4>)
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	fb02 f303 	mul.w	r3, r2, r3
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
 8002848:	e004      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	4a0c      	ldr	r2, [pc, #48]	; (8002880 <HAL_RCC_GetSysClockFreq+0xd0>)
 800284e:	fb02 f303 	mul.w	r3, r2, r3
 8002852:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	623b      	str	r3, [r7, #32]
      break;
 8002858:	e002      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800285a:	4b06      	ldr	r3, [pc, #24]	; (8002874 <HAL_RCC_GetSysClockFreq+0xc4>)
 800285c:	623b      	str	r3, [r7, #32]
      break;
 800285e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002860:	6a3b      	ldr	r3, [r7, #32]
}
 8002862:	4618      	mov	r0, r3
 8002864:	372c      	adds	r7, #44	; 0x2c
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	40021000 	.word	0x40021000
 8002874:	007a1200 	.word	0x007a1200
 8002878:	08005070 	.word	0x08005070
 800287c:	08005080 	.word	0x08005080
 8002880:	003d0900 	.word	0x003d0900

08002884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002888:	4b03      	ldr	r3, [pc, #12]	; (8002898 <HAL_RCC_GetHCLKFreq+0x14>)
 800288a:	681b      	ldr	r3, [r3, #0]
}
 800288c:	4618      	mov	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	20000000 	.word	0x20000000

0800289c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80028a2:	f7ff ffef 	bl	8002884 <HAL_RCC_GetHCLKFreq>
 80028a6:	4601      	mov	r1, r0
 80028a8:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028b0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80028b4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	fa92 f2a2 	rbit	r2, r2
 80028bc:	603a      	str	r2, [r7, #0]
  return result;
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	fab2 f282 	clz	r2, r2
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	40d3      	lsrs	r3, r2
 80028c8:	4a04      	ldr	r2, [pc, #16]	; (80028dc <HAL_RCC_GetPCLK1Freq+0x40>)
 80028ca:	5cd3      	ldrb	r3, [r2, r3]
 80028cc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40021000 	.word	0x40021000
 80028dc:	08005068 	.word	0x08005068

080028e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80028e6:	f7ff ffcd 	bl	8002884 <HAL_RCC_GetHCLKFreq>
 80028ea:	4601      	mov	r1, r0
 80028ec:	4b0b      	ldr	r3, [pc, #44]	; (800291c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80028f4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80028f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	fa92 f2a2 	rbit	r2, r2
 8002900:	603a      	str	r2, [r7, #0]
  return result;
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	fab2 f282 	clz	r2, r2
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	40d3      	lsrs	r3, r2
 800290c:	4a04      	ldr	r2, [pc, #16]	; (8002920 <HAL_RCC_GetPCLK2Freq+0x40>)
 800290e:	5cd3      	ldrb	r3, [r2, r3]
 8002910:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002914:	4618      	mov	r0, r3
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40021000 	.word	0x40021000
 8002920:	08005068 	.word	0x08005068

08002924 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e095      	b.n	8002a62 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	2b00      	cmp	r3, #0
 800293c:	d108      	bne.n	8002950 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002946:	d009      	beq.n	800295c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	61da      	str	r2, [r3, #28]
 800294e:	e005      	b.n	800295c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7fd fefc 	bl	8000774 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002992:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800299c:	d902      	bls.n	80029a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	e002      	b.n	80029aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80029b2:	d007      	beq.n	80029c4 <HAL_SPI_Init+0xa0>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029bc:	d002      	beq.n	80029c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80029d4:	431a      	orrs	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a06:	ea42 0103 	orr.w	r1, r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	0c1b      	lsrs	r3, r3, #16
 8002a20:	f003 0204 	and.w	r2, r3, #4
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	f003 0310 	and.w	r3, r3, #16
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002a40:	ea42 0103 	orr.w	r1, r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b088      	sub	sp, #32
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	60f8      	str	r0, [r7, #12]
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	603b      	str	r3, [r7, #0]
 8002a76:	4613      	mov	r3, r2
 8002a78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d101      	bne.n	8002a8c <HAL_SPI_Transmit+0x22>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e15f      	b.n	8002d4c <HAL_SPI_Transmit+0x2e2>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a94:	f7fe f856 	bl	8000b44 <HAL_GetTick>
 8002a98:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d002      	beq.n	8002ab0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002aaa:	2302      	movs	r3, #2
 8002aac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002aae:	e148      	b.n	8002d42 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <HAL_SPI_Transmit+0x52>
 8002ab6:	88fb      	ldrh	r3, [r7, #6]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d102      	bne.n	8002ac2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ac0:	e13f      	b.n	8002d42 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	88fa      	ldrh	r2, [r7, #6]
 8002ada:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	88fa      	ldrh	r2, [r7, #6]
 8002ae0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b0c:	d10f      	bne.n	8002b2e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b38:	2b40      	cmp	r3, #64	; 0x40
 8002b3a:	d007      	beq.n	8002b4c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b54:	d94f      	bls.n	8002bf6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d002      	beq.n	8002b64 <HAL_SPI_Transmit+0xfa>
 8002b5e:	8afb      	ldrh	r3, [r7, #22]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d142      	bne.n	8002bea <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b68:	881a      	ldrh	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b74:	1c9a      	adds	r2, r3, #2
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	3b01      	subs	r3, #1
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b88:	e02f      	b.n	8002bea <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d112      	bne.n	8002bbe <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9c:	881a      	ldrh	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba8:	1c9a      	adds	r2, r3, #2
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bbc:	e015      	b.n	8002bea <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bbe:	f7fd ffc1 	bl	8000b44 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d803      	bhi.n	8002bd6 <HAL_SPI_Transmit+0x16c>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd4:	d102      	bne.n	8002bdc <HAL_SPI_Transmit+0x172>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d106      	bne.n	8002bea <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002be8:	e0ab      	b.n	8002d42 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1ca      	bne.n	8002b8a <HAL_SPI_Transmit+0x120>
 8002bf4:	e080      	b.n	8002cf8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <HAL_SPI_Transmit+0x19a>
 8002bfe:	8afb      	ldrh	r3, [r7, #22]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d174      	bne.n	8002cee <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d912      	bls.n	8002c34 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c12:	881a      	ldrh	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1e:	1c9a      	adds	r2, r3, #2
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	3b02      	subs	r3, #2
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c32:	e05c      	b.n	8002cee <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	330c      	adds	r3, #12
 8002c3e:	7812      	ldrb	r2, [r2, #0]
 8002c40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	3b01      	subs	r3, #1
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002c5a:	e048      	b.n	8002cee <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d12b      	bne.n	8002cc2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d912      	bls.n	8002c9a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c78:	881a      	ldrh	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c84:	1c9a      	adds	r2, r3, #2
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	3b02      	subs	r3, #2
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c98:	e029      	b.n	8002cee <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	330c      	adds	r3, #12
 8002ca4:	7812      	ldrb	r2, [r2, #0]
 8002ca6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cac:	1c5a      	adds	r2, r3, #1
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cc0:	e015      	b.n	8002cee <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cc2:	f7fd ff3f 	bl	8000b44 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d803      	bhi.n	8002cda <HAL_SPI_Transmit+0x270>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd8:	d102      	bne.n	8002ce0 <HAL_SPI_Transmit+0x276>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d106      	bne.n	8002cee <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002cec:	e029      	b.n	8002d42 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1b1      	bne.n	8002c5c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	6839      	ldr	r1, [r7, #0]
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 fb77 	bl	80033f0 <SPI_EndRxTxTransaction>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10a      	bne.n	8002d2c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d16:	2300      	movs	r3, #0
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	613b      	str	r3, [r7, #16]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	77fb      	strb	r3, [r7, #31]
 8002d38:	e003      	b.n	8002d42 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002d4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3720      	adds	r7, #32
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08a      	sub	sp, #40	; 0x28
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
 8002d60:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d62:	2301      	movs	r3, #1
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d66:	2300      	movs	r3, #0
 8002d68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d101      	bne.n	8002d7a <HAL_SPI_TransmitReceive+0x26>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e20a      	b.n	8003190 <HAL_SPI_TransmitReceive+0x43c>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d82:	f7fd fedf 	bl	8000b44 <HAL_GetTick>
 8002d86:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d8e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002d96:	887b      	ldrh	r3, [r7, #2]
 8002d98:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002d9a:	887b      	ldrh	r3, [r7, #2]
 8002d9c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d9e:	7efb      	ldrb	r3, [r7, #27]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d00e      	beq.n	8002dc2 <HAL_SPI_TransmitReceive+0x6e>
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002daa:	d106      	bne.n	8002dba <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d102      	bne.n	8002dba <HAL_SPI_TransmitReceive+0x66>
 8002db4:	7efb      	ldrb	r3, [r7, #27]
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d003      	beq.n	8002dc2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002dba:	2302      	movs	r3, #2
 8002dbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002dc0:	e1e0      	b.n	8003184 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d005      	beq.n	8002dd4 <HAL_SPI_TransmitReceive+0x80>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d002      	beq.n	8002dd4 <HAL_SPI_TransmitReceive+0x80>
 8002dce:	887b      	ldrh	r3, [r7, #2]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d103      	bne.n	8002ddc <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002dda:	e1d3      	b.n	8003184 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d003      	beq.n	8002df0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2205      	movs	r2, #5
 8002dec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	887a      	ldrh	r2, [r7, #2]
 8002e00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	887a      	ldrh	r2, [r7, #2]
 8002e08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	887a      	ldrh	r2, [r7, #2]
 8002e16:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	887a      	ldrh	r2, [r7, #2]
 8002e1c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e32:	d802      	bhi.n	8002e3a <HAL_SPI_TransmitReceive+0xe6>
 8002e34:	8a3b      	ldrh	r3, [r7, #16]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d908      	bls.n	8002e4c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e48:	605a      	str	r2, [r3, #4]
 8002e4a:	e007      	b.n	8002e5c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e5a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e66:	2b40      	cmp	r3, #64	; 0x40
 8002e68:	d007      	beq.n	8002e7a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e82:	f240 8081 	bls.w	8002f88 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d002      	beq.n	8002e94 <HAL_SPI_TransmitReceive+0x140>
 8002e8e:	8a7b      	ldrh	r3, [r7, #18]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d16d      	bne.n	8002f70 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e98:	881a      	ldrh	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea4:	1c9a      	adds	r2, r3, #2
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002eb8:	e05a      	b.n	8002f70 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d11b      	bne.n	8002f00 <HAL_SPI_TransmitReceive+0x1ac>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d016      	beq.n	8002f00 <HAL_SPI_TransmitReceive+0x1ac>
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d113      	bne.n	8002f00 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002edc:	881a      	ldrh	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee8:	1c9a      	adds	r2, r3, #2
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d11c      	bne.n	8002f48 <HAL_SPI_TransmitReceive+0x1f4>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d016      	beq.n	8002f48 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	b292      	uxth	r2, r2
 8002f26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	1c9a      	adds	r2, r3, #2
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f44:	2301      	movs	r3, #1
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f48:	f7fd fdfc 	bl	8000b44 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d80b      	bhi.n	8002f70 <HAL_SPI_TransmitReceive+0x21c>
 8002f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5e:	d007      	beq.n	8002f70 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8002f6e:	e109      	b.n	8003184 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d19f      	bne.n	8002eba <HAL_SPI_TransmitReceive+0x166>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d199      	bne.n	8002eba <HAL_SPI_TransmitReceive+0x166>
 8002f86:	e0e3      	b.n	8003150 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <HAL_SPI_TransmitReceive+0x244>
 8002f90:	8a7b      	ldrh	r3, [r7, #18]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	f040 80cf 	bne.w	8003136 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d912      	bls.n	8002fc8 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa6:	881a      	ldrh	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb2:	1c9a      	adds	r2, r3, #2
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	3b02      	subs	r3, #2
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fc6:	e0b6      	b.n	8003136 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	330c      	adds	r3, #12
 8002fd2:	7812      	ldrb	r2, [r2, #0]
 8002fd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fee:	e0a2      	b.n	8003136 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d134      	bne.n	8003068 <HAL_SPI_TransmitReceive+0x314>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d02f      	beq.n	8003068 <HAL_SPI_TransmitReceive+0x314>
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	2b01      	cmp	r3, #1
 800300c:	d12c      	bne.n	8003068 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003012:	b29b      	uxth	r3, r3
 8003014:	2b01      	cmp	r3, #1
 8003016:	d912      	bls.n	800303e <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301c:	881a      	ldrh	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003028:	1c9a      	adds	r2, r3, #2
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003032:	b29b      	uxth	r3, r3
 8003034:	3b02      	subs	r3, #2
 8003036:	b29a      	uxth	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800303c:	e012      	b.n	8003064 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	330c      	adds	r3, #12
 8003048:	7812      	ldrb	r2, [r2, #0]
 800304a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003050:	1c5a      	adds	r2, r3, #1
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800305a:	b29b      	uxth	r3, r3
 800305c:	3b01      	subs	r3, #1
 800305e:	b29a      	uxth	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003064:	2300      	movs	r3, #0
 8003066:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b01      	cmp	r3, #1
 8003074:	d148      	bne.n	8003108 <HAL_SPI_TransmitReceive+0x3b4>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800307c:	b29b      	uxth	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d042      	beq.n	8003108 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003088:	b29b      	uxth	r3, r3
 800308a:	2b01      	cmp	r3, #1
 800308c:	d923      	bls.n	80030d6 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003098:	b292      	uxth	r2, r2
 800309a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	1c9a      	adds	r2, r3, #2
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	3b02      	subs	r3, #2
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030be:	b29b      	uxth	r3, r3
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d81f      	bhi.n	8003104 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030d2:	605a      	str	r2, [r3, #4]
 80030d4:	e016      	b.n	8003104 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f103 020c 	add.w	r2, r3, #12
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	7812      	ldrb	r2, [r2, #0]
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	1c5a      	adds	r2, r3, #1
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003104:	2301      	movs	r3, #1
 8003106:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003108:	f7fd fd1c 	bl	8000b44 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003114:	429a      	cmp	r2, r3
 8003116:	d803      	bhi.n	8003120 <HAL_SPI_TransmitReceive+0x3cc>
 8003118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311e:	d102      	bne.n	8003126 <HAL_SPI_TransmitReceive+0x3d2>
 8003120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003122:	2b00      	cmp	r3, #0
 8003124:	d107      	bne.n	8003136 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003134:	e026      	b.n	8003184 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800313a:	b29b      	uxth	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	f47f af57 	bne.w	8002ff0 <HAL_SPI_TransmitReceive+0x29c>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003148:	b29b      	uxth	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	f47f af50 	bne.w	8002ff0 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003150:	69fa      	ldr	r2, [r7, #28]
 8003152:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 f94b 	bl	80033f0 <SPI_EndRxTxTransaction>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d005      	beq.n	800316c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2220      	movs	r2, #32
 800316a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800317a:	e003      	b.n	8003184 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800318c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003190:	4618      	mov	r0, r3
 8003192:	3728      	adds	r7, #40	; 0x28
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031a6:	b2db      	uxtb	r3, r3
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b088      	sub	sp, #32
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	603b      	str	r3, [r7, #0]
 80031c0:	4613      	mov	r3, r2
 80031c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031c4:	f7fd fcbe 	bl	8000b44 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031cc:	1a9b      	subs	r3, r3, r2
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	4413      	add	r3, r2
 80031d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031d4:	f7fd fcb6 	bl	8000b44 <HAL_GetTick>
 80031d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031da:	4b39      	ldr	r3, [pc, #228]	; (80032c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	015b      	lsls	r3, r3, #5
 80031e0:	0d1b      	lsrs	r3, r3, #20
 80031e2:	69fa      	ldr	r2, [r7, #28]
 80031e4:	fb02 f303 	mul.w	r3, r2, r3
 80031e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031ea:	e054      	b.n	8003296 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f2:	d050      	beq.n	8003296 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031f4:	f7fd fca6 	bl	8000b44 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	69fa      	ldr	r2, [r7, #28]
 8003200:	429a      	cmp	r2, r3
 8003202:	d902      	bls.n	800320a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d13d      	bne.n	8003286 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003218:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003222:	d111      	bne.n	8003248 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800322c:	d004      	beq.n	8003238 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003236:	d107      	bne.n	8003248 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003246:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003250:	d10f      	bne.n	8003272 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003270:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e017      	b.n	80032b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	3b01      	subs	r3, #1
 8003294:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	4013      	ands	r3, r2
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	bf0c      	ite	eq
 80032a6:	2301      	moveq	r3, #1
 80032a8:	2300      	movne	r3, #0
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	461a      	mov	r2, r3
 80032ae:	79fb      	ldrb	r3, [r7, #7]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d19b      	bne.n	80031ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3720      	adds	r7, #32
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	20000000 	.word	0x20000000

080032c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08a      	sub	sp, #40	; 0x28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80032d2:	2300      	movs	r3, #0
 80032d4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80032d6:	f7fd fc35 	bl	8000b44 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	4413      	add	r3, r2
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80032e6:	f7fd fc2d 	bl	8000b44 <HAL_GetTick>
 80032ea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	330c      	adds	r3, #12
 80032f2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80032f4:	4b3d      	ldr	r3, [pc, #244]	; (80033ec <SPI_WaitFifoStateUntilTimeout+0x128>)
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	4613      	mov	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	00da      	lsls	r2, r3, #3
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	0d1b      	lsrs	r3, r3, #20
 8003304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003306:	fb02 f303 	mul.w	r3, r2, r3
 800330a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800330c:	e060      	b.n	80033d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003314:	d107      	bne.n	8003326 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d104      	bne.n	8003326 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	b2db      	uxtb	r3, r3
 8003322:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003324:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332c:	d050      	beq.n	80033d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800332e:	f7fd fc09 	bl	8000b44 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800333a:	429a      	cmp	r2, r3
 800333c:	d902      	bls.n	8003344 <SPI_WaitFifoStateUntilTimeout+0x80>
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	2b00      	cmp	r3, #0
 8003342:	d13d      	bne.n	80033c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003352:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800335c:	d111      	bne.n	8003382 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003366:	d004      	beq.n	8003372 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003370:	d107      	bne.n	8003382 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003380:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800338a:	d10f      	bne.n	80033ac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e010      	b.n	80033e2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	3b01      	subs	r3, #1
 80033ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	4013      	ands	r3, r2
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d196      	bne.n	800330e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3728      	adds	r7, #40	; 0x28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20000000 	.word	0x20000000

080033f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af02      	add	r7, sp, #8
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2200      	movs	r2, #0
 8003404:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f7ff ff5b 	bl	80032c4 <SPI_WaitFifoStateUntilTimeout>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d007      	beq.n	8003424 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003418:	f043 0220 	orr.w	r2, r3, #32
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e027      	b.n	8003474 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2200      	movs	r2, #0
 800342c:	2180      	movs	r1, #128	; 0x80
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f7ff fec0 	bl	80031b4 <SPI_WaitFlagStateUntilTimeout>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d007      	beq.n	800344a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800343e:	f043 0220 	orr.w	r2, r3, #32
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e014      	b.n	8003474 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2200      	movs	r2, #0
 8003452:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f7ff ff34 	bl	80032c4 <SPI_WaitFifoStateUntilTimeout>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d007      	beq.n	8003472 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003466:	f043 0220 	orr.w	r2, r3, #32
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e000      	b.n	8003474 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e040      	b.n	8003510 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003492:	2b00      	cmp	r3, #0
 8003494:	d106      	bne.n	80034a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7fd fa56 	bl	8000950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2224      	movs	r2, #36	; 0x24
 80034a8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0201 	bic.w	r2, r2, #1
 80034b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 fbbc 	bl	8003c38 <UART_SetConfig>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e022      	b.n	8003510 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 fce6 	bl	8003ea4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689a      	ldr	r2, [r3, #8]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0201 	orr.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 fd6d 	bl	8003fe8 <UART_CheckIdleState>
 800350e:	4603      	mov	r3, r0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b08a      	sub	sp, #40	; 0x28
 800351c:	af02      	add	r7, sp, #8
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	603b      	str	r3, [r7, #0]
 8003524:	4613      	mov	r3, r2
 8003526:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800352c:	2b20      	cmp	r3, #32
 800352e:	d178      	bne.n	8003622 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <HAL_UART_Transmit+0x24>
 8003536:	88fb      	ldrh	r3, [r7, #6]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e071      	b.n	8003624 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2221      	movs	r2, #33	; 0x21
 800354c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800354e:	f7fd faf9 	bl	8000b44 <HAL_GetTick>
 8003552:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	88fa      	ldrh	r2, [r7, #6]
 8003558:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	88fa      	ldrh	r2, [r7, #6]
 8003560:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800356c:	d108      	bne.n	8003580 <HAL_UART_Transmit+0x68>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d104      	bne.n	8003580 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003576:	2300      	movs	r3, #0
 8003578:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	61bb      	str	r3, [r7, #24]
 800357e:	e003      	b.n	8003588 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003584:	2300      	movs	r3, #0
 8003586:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003588:	e030      	b.n	80035ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2200      	movs	r2, #0
 8003592:	2180      	movs	r1, #128	; 0x80
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 fdcf 	bl	8004138 <UART_WaitOnFlagUntilTimeout>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d004      	beq.n	80035aa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e03c      	b.n	8003624 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10b      	bne.n	80035c8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	881a      	ldrh	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035bc:	b292      	uxth	r2, r2
 80035be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	3302      	adds	r3, #2
 80035c4:	61bb      	str	r3, [r7, #24]
 80035c6:	e008      	b.n	80035da <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	781a      	ldrb	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	b292      	uxth	r2, r2
 80035d2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	3301      	adds	r3, #1
 80035d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1c8      	bne.n	800358a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	2200      	movs	r2, #0
 8003600:	2140      	movs	r1, #64	; 0x40
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 fd98 	bl	8004138 <UART_WaitOnFlagUntilTimeout>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d004      	beq.n	8003618 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2220      	movs	r2, #32
 8003612:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e005      	b.n	8003624 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2220      	movs	r2, #32
 800361c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	e000      	b.n	8003624 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003622:	2302      	movs	r3, #2
  }
}
 8003624:	4618      	mov	r0, r3
 8003626:	3720      	adds	r7, #32
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b0ba      	sub	sp, #232	; 0xe8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003652:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003656:	f640 030f 	movw	r3, #2063	; 0x80f
 800365a:	4013      	ands	r3, r2
 800365c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003660:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003664:	2b00      	cmp	r3, #0
 8003666:	d115      	bne.n	8003694 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800366c:	f003 0320 	and.w	r3, r3, #32
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00f      	beq.n	8003694 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003678:	f003 0320 	and.w	r3, r3, #32
 800367c:	2b00      	cmp	r3, #0
 800367e:	d009      	beq.n	8003694 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 82ab 	beq.w	8003be0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	4798      	blx	r3
      }
      return;
 8003692:	e2a5      	b.n	8003be0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003694:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 8117 	beq.w	80038cc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800369e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d106      	bne.n	80036b8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80036aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80036ae:	4b85      	ldr	r3, [pc, #532]	; (80038c4 <HAL_UART_IRQHandler+0x298>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 810a 	beq.w	80038cc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80036b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d011      	beq.n	80036e8 <HAL_UART_IRQHandler+0xbc>
 80036c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00b      	beq.n	80036e8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2201      	movs	r2, #1
 80036d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036de:	f043 0201 	orr.w	r2, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d011      	beq.n	8003718 <HAL_UART_IRQHandler+0xec>
 80036f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00b      	beq.n	8003718 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2202      	movs	r2, #2
 8003706:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800370e:	f043 0204 	orr.w	r2, r3, #4
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d011      	beq.n	8003748 <HAL_UART_IRQHandler+0x11c>
 8003724:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00b      	beq.n	8003748 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2204      	movs	r2, #4
 8003736:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800373e:	f043 0202 	orr.w	r2, r3, #2
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	2b00      	cmp	r3, #0
 8003752:	d017      	beq.n	8003784 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003758:	f003 0320 	and.w	r3, r3, #32
 800375c:	2b00      	cmp	r3, #0
 800375e:	d105      	bne.n	800376c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003760:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003764:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00b      	beq.n	8003784 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2208      	movs	r2, #8
 8003772:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800377a:	f043 0208 	orr.w	r2, r3, #8
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800378c:	2b00      	cmp	r3, #0
 800378e:	d012      	beq.n	80037b6 <HAL_UART_IRQHandler+0x18a>
 8003790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003794:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00c      	beq.n	80037b6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ac:	f043 0220 	orr.w	r2, r3, #32
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 8211 	beq.w	8003be4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80037c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037c6:	f003 0320 	and.w	r3, r3, #32
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00d      	beq.n	80037ea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d007      	beq.n	80037ea <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fe:	2b40      	cmp	r3, #64	; 0x40
 8003800:	d005      	beq.n	800380e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003802:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003806:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800380a:	2b00      	cmp	r3, #0
 800380c:	d04f      	beq.n	80038ae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fcf9 	bl	8004206 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381e:	2b40      	cmp	r3, #64	; 0x40
 8003820:	d141      	bne.n	80038a6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	3308      	adds	r3, #8
 8003828:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003830:	e853 3f00 	ldrex	r3, [r3]
 8003834:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003838:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800383c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003840:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	3308      	adds	r3, #8
 800384a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800384e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003852:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003856:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800385a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800385e:	e841 2300 	strex	r3, r2, [r1]
 8003862:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003866:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1d9      	bne.n	8003822 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003872:	2b00      	cmp	r3, #0
 8003874:	d013      	beq.n	800389e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800387a:	4a13      	ldr	r2, [pc, #76]	; (80038c8 <HAL_UART_IRQHandler+0x29c>)
 800387c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003882:	4618      	mov	r0, r3
 8003884:	f7fd fb1f 	bl	8000ec6 <HAL_DMA_Abort_IT>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d017      	beq.n	80038be <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003898:	4610      	mov	r0, r2
 800389a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800389c:	e00f      	b.n	80038be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f9b4 	bl	8003c0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a4:	e00b      	b.n	80038be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f9b0 	bl	8003c0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ac:	e007      	b.n	80038be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f9ac 	bl	8003c0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80038bc:	e192      	b.n	8003be4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038be:	bf00      	nop
    return;
 80038c0:	e190      	b.n	8003be4 <HAL_UART_IRQHandler+0x5b8>
 80038c2:	bf00      	nop
 80038c4:	04000120 	.word	0x04000120
 80038c8:	080042cf 	.word	0x080042cf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	f040 814b 	bne.w	8003b6c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80038d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038da:	f003 0310 	and.w	r3, r3, #16
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 8144 	beq.w	8003b6c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80038e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038e8:	f003 0310 	and.w	r3, r3, #16
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 813d 	beq.w	8003b6c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2210      	movs	r2, #16
 80038f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003904:	2b40      	cmp	r3, #64	; 0x40
 8003906:	f040 80b5 	bne.w	8003a74 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003916:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 8164 	beq.w	8003be8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003926:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800392a:	429a      	cmp	r2, r3
 800392c:	f080 815c 	bcs.w	8003be8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003936:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	2b20      	cmp	r3, #32
 8003942:	f000 8086 	beq.w	8003a52 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003952:	e853 3f00 	ldrex	r3, [r3]
 8003956:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800395a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800395e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003962:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003970:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003974:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003978:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800397c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003980:	e841 2300 	strex	r3, r2, [r1]
 8003984:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003988:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1da      	bne.n	8003946 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	3308      	adds	r3, #8
 8003996:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003998:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800399a:	e853 3f00 	ldrex	r3, [r3]
 800399e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80039a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039a2:	f023 0301 	bic.w	r3, r3, #1
 80039a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	3308      	adds	r3, #8
 80039b0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039b4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80039b8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ba:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80039bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80039c0:	e841 2300 	strex	r3, r2, [r1]
 80039c4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80039c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1e1      	bne.n	8003990 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3308      	adds	r3, #8
 80039d2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039d6:	e853 3f00 	ldrex	r3, [r3]
 80039da:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80039dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	3308      	adds	r3, #8
 80039ec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80039f0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80039f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80039f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80039f8:	e841 2300 	strex	r3, r2, [r1]
 80039fc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80039fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1e3      	bne.n	80039cc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2220      	movs	r2, #32
 8003a08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a1a:	e853 3f00 	ldrex	r3, [r3]
 8003a1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a22:	f023 0310 	bic.w	r3, r3, #16
 8003a26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a34:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a36:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a3c:	e841 2300 	strex	r3, r2, [r1]
 8003a40:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1e4      	bne.n	8003a12 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7fd fa01 	bl	8000e54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2202      	movs	r2, #2
 8003a56:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 f8d7 	bl	8003c20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a72:	e0b9      	b.n	8003be8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 80ab 	beq.w	8003bec <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003a96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 80a6 	beq.w	8003bec <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa8:	e853 3f00 	ldrex	r3, [r3]
 8003aac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ab4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	461a      	mov	r2, r3
 8003abe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ac2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ac4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ac8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003aca:	e841 2300 	strex	r3, r2, [r1]
 8003ace:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1e4      	bne.n	8003aa0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	3308      	adds	r3, #8
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	e853 3f00 	ldrex	r3, [r3]
 8003ae4:	623b      	str	r3, [r7, #32]
   return(result);
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	f023 0301 	bic.w	r3, r3, #1
 8003aec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	3308      	adds	r3, #8
 8003af6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003afa:	633a      	str	r2, [r7, #48]	; 0x30
 8003afc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b02:	e841 2300 	strex	r3, r2, [r1]
 8003b06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1e3      	bne.n	8003ad6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2220      	movs	r2, #32
 8003b12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	e853 3f00 	ldrex	r3, [r3]
 8003b2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f023 0310 	bic.w	r3, r3, #16
 8003b36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b44:	61fb      	str	r3, [r7, #28]
 8003b46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b48:	69b9      	ldr	r1, [r7, #24]
 8003b4a:	69fa      	ldr	r2, [r7, #28]
 8003b4c:	e841 2300 	strex	r3, r2, [r1]
 8003b50:	617b      	str	r3, [r7, #20]
   return(result);
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1e4      	bne.n	8003b22 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b62:	4619      	mov	r1, r3
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 f85b 	bl	8003c20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b6a:	e03f      	b.n	8003bec <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00e      	beq.n	8003b96 <HAL_UART_IRQHandler+0x56a>
 8003b78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d008      	beq.n	8003b96 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003b8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 fbdd 	bl	800434e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b94:	e02d      	b.n	8003bf2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00e      	beq.n	8003bc0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d008      	beq.n	8003bc0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d01c      	beq.n	8003bf0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	4798      	blx	r3
    }
    return;
 8003bbe:	e017      	b.n	8003bf0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d012      	beq.n	8003bf2 <HAL_UART_IRQHandler+0x5c6>
 8003bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00c      	beq.n	8003bf2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 fb8e 	bl	80042fa <UART_EndTransmit_IT>
    return;
 8003bde:	e008      	b.n	8003bf2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003be0:	bf00      	nop
 8003be2:	e006      	b.n	8003bf2 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003be4:	bf00      	nop
 8003be6:	e004      	b.n	8003bf2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003be8:	bf00      	nop
 8003bea:	e002      	b.n	8003bf2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003bec:	bf00      	nop
 8003bee:	e000      	b.n	8003bf2 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003bf0:	bf00      	nop
  }

}
 8003bf2:	37e8      	adds	r7, #232	; 0xe8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b088      	sub	sp, #32
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c40:	2300      	movs	r3, #0
 8003c42:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	4b8a      	ldr	r3, [pc, #552]	; (8003e8c <UART_SetConfig+0x254>)
 8003c64:	4013      	ands	r3, r2
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6812      	ldr	r2, [r2, #0]
 8003c6a:	6979      	ldr	r1, [r7, #20]
 8003c6c:	430b      	orrs	r3, r1
 8003c6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a78      	ldr	r2, [pc, #480]	; (8003e90 <UART_SetConfig+0x258>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d120      	bne.n	8003cf6 <UART_SetConfig+0xbe>
 8003cb4:	4b77      	ldr	r3, [pc, #476]	; (8003e94 <UART_SetConfig+0x25c>)
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb8:	f003 0303 	and.w	r3, r3, #3
 8003cbc:	2b03      	cmp	r3, #3
 8003cbe:	d817      	bhi.n	8003cf0 <UART_SetConfig+0xb8>
 8003cc0:	a201      	add	r2, pc, #4	; (adr r2, 8003cc8 <UART_SetConfig+0x90>)
 8003cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc6:	bf00      	nop
 8003cc8:	08003cd9 	.word	0x08003cd9
 8003ccc:	08003ce5 	.word	0x08003ce5
 8003cd0:	08003ceb 	.word	0x08003ceb
 8003cd4:	08003cdf 	.word	0x08003cdf
 8003cd8:	2300      	movs	r3, #0
 8003cda:	77fb      	strb	r3, [r7, #31]
 8003cdc:	e01d      	b.n	8003d1a <UART_SetConfig+0xe2>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	77fb      	strb	r3, [r7, #31]
 8003ce2:	e01a      	b.n	8003d1a <UART_SetConfig+0xe2>
 8003ce4:	2304      	movs	r3, #4
 8003ce6:	77fb      	strb	r3, [r7, #31]
 8003ce8:	e017      	b.n	8003d1a <UART_SetConfig+0xe2>
 8003cea:	2308      	movs	r3, #8
 8003cec:	77fb      	strb	r3, [r7, #31]
 8003cee:	e014      	b.n	8003d1a <UART_SetConfig+0xe2>
 8003cf0:	2310      	movs	r3, #16
 8003cf2:	77fb      	strb	r3, [r7, #31]
 8003cf4:	e011      	b.n	8003d1a <UART_SetConfig+0xe2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a67      	ldr	r2, [pc, #412]	; (8003e98 <UART_SetConfig+0x260>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d102      	bne.n	8003d06 <UART_SetConfig+0xce>
 8003d00:	2300      	movs	r3, #0
 8003d02:	77fb      	strb	r3, [r7, #31]
 8003d04:	e009      	b.n	8003d1a <UART_SetConfig+0xe2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a64      	ldr	r2, [pc, #400]	; (8003e9c <UART_SetConfig+0x264>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d102      	bne.n	8003d16 <UART_SetConfig+0xde>
 8003d10:	2300      	movs	r3, #0
 8003d12:	77fb      	strb	r3, [r7, #31]
 8003d14:	e001      	b.n	8003d1a <UART_SetConfig+0xe2>
 8003d16:	2310      	movs	r3, #16
 8003d18:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d22:	d15a      	bne.n	8003dda <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003d24:	7ffb      	ldrb	r3, [r7, #31]
 8003d26:	2b08      	cmp	r3, #8
 8003d28:	d827      	bhi.n	8003d7a <UART_SetConfig+0x142>
 8003d2a:	a201      	add	r2, pc, #4	; (adr r2, 8003d30 <UART_SetConfig+0xf8>)
 8003d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d30:	08003d55 	.word	0x08003d55
 8003d34:	08003d5d 	.word	0x08003d5d
 8003d38:	08003d65 	.word	0x08003d65
 8003d3c:	08003d7b 	.word	0x08003d7b
 8003d40:	08003d6b 	.word	0x08003d6b
 8003d44:	08003d7b 	.word	0x08003d7b
 8003d48:	08003d7b 	.word	0x08003d7b
 8003d4c:	08003d7b 	.word	0x08003d7b
 8003d50:	08003d73 	.word	0x08003d73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d54:	f7fe fda2 	bl	800289c <HAL_RCC_GetPCLK1Freq>
 8003d58:	61b8      	str	r0, [r7, #24]
        break;
 8003d5a:	e013      	b.n	8003d84 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d5c:	f7fe fdc0 	bl	80028e0 <HAL_RCC_GetPCLK2Freq>
 8003d60:	61b8      	str	r0, [r7, #24]
        break;
 8003d62:	e00f      	b.n	8003d84 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d64:	4b4e      	ldr	r3, [pc, #312]	; (8003ea0 <UART_SetConfig+0x268>)
 8003d66:	61bb      	str	r3, [r7, #24]
        break;
 8003d68:	e00c      	b.n	8003d84 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d6a:	f7fe fd21 	bl	80027b0 <HAL_RCC_GetSysClockFreq>
 8003d6e:	61b8      	str	r0, [r7, #24]
        break;
 8003d70:	e008      	b.n	8003d84 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d76:	61bb      	str	r3, [r7, #24]
        break;
 8003d78:	e004      	b.n	8003d84 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	77bb      	strb	r3, [r7, #30]
        break;
 8003d82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d074      	beq.n	8003e74 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	005a      	lsls	r2, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	085b      	lsrs	r3, r3, #1
 8003d94:	441a      	add	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	2b0f      	cmp	r3, #15
 8003da4:	d916      	bls.n	8003dd4 <UART_SetConfig+0x19c>
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dac:	d212      	bcs.n	8003dd4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	f023 030f 	bic.w	r3, r3, #15
 8003db6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	085b      	lsrs	r3, r3, #1
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	89fb      	ldrh	r3, [r7, #14]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	89fa      	ldrh	r2, [r7, #14]
 8003dd0:	60da      	str	r2, [r3, #12]
 8003dd2:	e04f      	b.n	8003e74 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	77bb      	strb	r3, [r7, #30]
 8003dd8:	e04c      	b.n	8003e74 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003dda:	7ffb      	ldrb	r3, [r7, #31]
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d828      	bhi.n	8003e32 <UART_SetConfig+0x1fa>
 8003de0:	a201      	add	r2, pc, #4	; (adr r2, 8003de8 <UART_SetConfig+0x1b0>)
 8003de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de6:	bf00      	nop
 8003de8:	08003e0d 	.word	0x08003e0d
 8003dec:	08003e15 	.word	0x08003e15
 8003df0:	08003e1d 	.word	0x08003e1d
 8003df4:	08003e33 	.word	0x08003e33
 8003df8:	08003e23 	.word	0x08003e23
 8003dfc:	08003e33 	.word	0x08003e33
 8003e00:	08003e33 	.word	0x08003e33
 8003e04:	08003e33 	.word	0x08003e33
 8003e08:	08003e2b 	.word	0x08003e2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e0c:	f7fe fd46 	bl	800289c <HAL_RCC_GetPCLK1Freq>
 8003e10:	61b8      	str	r0, [r7, #24]
        break;
 8003e12:	e013      	b.n	8003e3c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e14:	f7fe fd64 	bl	80028e0 <HAL_RCC_GetPCLK2Freq>
 8003e18:	61b8      	str	r0, [r7, #24]
        break;
 8003e1a:	e00f      	b.n	8003e3c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e1c:	4b20      	ldr	r3, [pc, #128]	; (8003ea0 <UART_SetConfig+0x268>)
 8003e1e:	61bb      	str	r3, [r7, #24]
        break;
 8003e20:	e00c      	b.n	8003e3c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e22:	f7fe fcc5 	bl	80027b0 <HAL_RCC_GetSysClockFreq>
 8003e26:	61b8      	str	r0, [r7, #24]
        break;
 8003e28:	e008      	b.n	8003e3c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e2e:	61bb      	str	r3, [r7, #24]
        break;
 8003e30:	e004      	b.n	8003e3c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	77bb      	strb	r3, [r7, #30]
        break;
 8003e3a:	bf00      	nop
    }

    if (pclk != 0U)
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d018      	beq.n	8003e74 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	085a      	lsrs	r2, r3, #1
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	441a      	add	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	2b0f      	cmp	r3, #15
 8003e5a:	d909      	bls.n	8003e70 <UART_SetConfig+0x238>
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e62:	d205      	bcs.n	8003e70 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	60da      	str	r2, [r3, #12]
 8003e6e:	e001      	b.n	8003e74 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003e80:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3720      	adds	r7, #32
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	efff69f3 	.word	0xefff69f3
 8003e90:	40013800 	.word	0x40013800
 8003e94:	40021000 	.word	0x40021000
 8003e98:	40004400 	.word	0x40004400
 8003e9c:	40004800 	.word	0x40004800
 8003ea0:	007a1200 	.word	0x007a1200

08003ea4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	f003 0310 	and.w	r3, r3, #16
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00a      	beq.n	8003f56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d01a      	beq.n	8003fba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fa2:	d10a      	bne.n	8003fba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00a      	beq.n	8003fdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	605a      	str	r2, [r3, #4]
  }
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b098      	sub	sp, #96	; 0x60
 8003fec:	af02      	add	r7, sp, #8
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ff8:	f7fc fda4 	bl	8000b44 <HAL_GetTick>
 8003ffc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0308 	and.w	r3, r3, #8
 8004008:	2b08      	cmp	r3, #8
 800400a:	d12e      	bne.n	800406a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800400c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004014:	2200      	movs	r2, #0
 8004016:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f88c 	bl	8004138 <UART_WaitOnFlagUntilTimeout>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d021      	beq.n	800406a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402e:	e853 3f00 	ldrex	r3, [r3]
 8004032:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004036:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800403a:	653b      	str	r3, [r7, #80]	; 0x50
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	461a      	mov	r2, r3
 8004042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004044:	647b      	str	r3, [r7, #68]	; 0x44
 8004046:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004048:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800404a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800404c:	e841 2300 	strex	r3, r2, [r1]
 8004050:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1e6      	bne.n	8004026 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2220      	movs	r2, #32
 800405c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e062      	b.n	8004130 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b04      	cmp	r3, #4
 8004076:	d149      	bne.n	800410c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004078:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004080:	2200      	movs	r2, #0
 8004082:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f856 	bl	8004138 <UART_WaitOnFlagUntilTimeout>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d03c      	beq.n	800410c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	e853 3f00 	ldrex	r3, [r3]
 800409e:	623b      	str	r3, [r7, #32]
   return(result);
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	461a      	mov	r2, r3
 80040ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040b0:	633b      	str	r3, [r7, #48]	; 0x30
 80040b2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040b8:	e841 2300 	strex	r3, r2, [r1]
 80040bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1e6      	bne.n	8004092 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	3308      	adds	r3, #8
 80040ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	e853 3f00 	ldrex	r3, [r3]
 80040d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f023 0301 	bic.w	r3, r3, #1
 80040da:	64bb      	str	r3, [r7, #72]	; 0x48
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3308      	adds	r3, #8
 80040e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040e4:	61fa      	str	r2, [r7, #28]
 80040e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e8:	69b9      	ldr	r1, [r7, #24]
 80040ea:	69fa      	ldr	r2, [r7, #28]
 80040ec:	e841 2300 	strex	r3, r2, [r1]
 80040f0:	617b      	str	r3, [r7, #20]
   return(result);
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1e5      	bne.n	80040c4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e011      	b.n	8004130 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2220      	movs	r2, #32
 8004110:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2220      	movs	r2, #32
 8004116:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3758      	adds	r7, #88	; 0x58
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	603b      	str	r3, [r7, #0]
 8004144:	4613      	mov	r3, r2
 8004146:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004148:	e049      	b.n	80041de <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004150:	d045      	beq.n	80041de <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004152:	f7fc fcf7 	bl	8000b44 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	429a      	cmp	r2, r3
 8004160:	d302      	bcc.n	8004168 <UART_WaitOnFlagUntilTimeout+0x30>
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e048      	b.n	80041fe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0304 	and.w	r3, r3, #4
 8004176:	2b00      	cmp	r3, #0
 8004178:	d031      	beq.n	80041de <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	f003 0308 	and.w	r3, r3, #8
 8004184:	2b08      	cmp	r3, #8
 8004186:	d110      	bne.n	80041aa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2208      	movs	r2, #8
 800418e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f000 f838 	bl	8004206 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2208      	movs	r2, #8
 800419a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e029      	b.n	80041fe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041b8:	d111      	bne.n	80041de <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f81e 	bl	8004206 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2220      	movs	r2, #32
 80041ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e00f      	b.n	80041fe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	69da      	ldr	r2, [r3, #28]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	4013      	ands	r3, r2
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	bf0c      	ite	eq
 80041ee:	2301      	moveq	r3, #1
 80041f0:	2300      	movne	r3, #0
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	461a      	mov	r2, r3
 80041f6:	79fb      	ldrb	r3, [r7, #7]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d0a6      	beq.n	800414a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004206:	b480      	push	{r7}
 8004208:	b095      	sub	sp, #84	; 0x54
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004216:	e853 3f00 	ldrex	r3, [r3]
 800421a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800421c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004222:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	461a      	mov	r2, r3
 800422a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800422c:	643b      	str	r3, [r7, #64]	; 0x40
 800422e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004230:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004232:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004234:	e841 2300 	strex	r3, r2, [r1]
 8004238:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800423a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1e6      	bne.n	800420e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3308      	adds	r3, #8
 8004246:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004248:	6a3b      	ldr	r3, [r7, #32]
 800424a:	e853 3f00 	ldrex	r3, [r3]
 800424e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	f023 0301 	bic.w	r3, r3, #1
 8004256:	64bb      	str	r3, [r7, #72]	; 0x48
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	3308      	adds	r3, #8
 800425e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004260:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004262:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004264:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004266:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004268:	e841 2300 	strex	r3, r2, [r1]
 800426c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1e5      	bne.n	8004240 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004278:	2b01      	cmp	r3, #1
 800427a:	d118      	bne.n	80042ae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	e853 3f00 	ldrex	r3, [r3]
 8004288:	60bb      	str	r3, [r7, #8]
   return(result);
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	f023 0310 	bic.w	r3, r3, #16
 8004290:	647b      	str	r3, [r7, #68]	; 0x44
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	461a      	mov	r2, r3
 8004298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800429a:	61bb      	str	r3, [r7, #24]
 800429c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429e:	6979      	ldr	r1, [r7, #20]
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	e841 2300 	strex	r3, r2, [r1]
 80042a6:	613b      	str	r3, [r7, #16]
   return(result);
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1e6      	bne.n	800427c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2220      	movs	r2, #32
 80042b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80042c2:	bf00      	nop
 80042c4:	3754      	adds	r7, #84	; 0x54
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b084      	sub	sp, #16
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f7ff fc8d 	bl	8003c0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042f2:	bf00      	nop
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b088      	sub	sp, #32
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	e853 3f00 	ldrex	r3, [r3]
 800430e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004316:	61fb      	str	r3, [r7, #28]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	461a      	mov	r2, r3
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	61bb      	str	r3, [r7, #24]
 8004322:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004324:	6979      	ldr	r1, [r7, #20]
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	e841 2300 	strex	r3, r2, [r1]
 800432c:	613b      	str	r3, [r7, #16]
   return(result);
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1e6      	bne.n	8004302 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2220      	movs	r2, #32
 8004338:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f7ff fc59 	bl	8003bf8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004346:	bf00      	nop
 8004348:	3720      	adds	r7, #32
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800434e:	b480      	push	{r7}
 8004350:	b083      	sub	sp, #12
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8004362:	b580      	push	{r7, lr}
 8004364:	b084      	sub	sp, #16
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	460b      	mov	r3, r1
 800436c:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	78fa      	ldrb	r2, [r7, #3]
 8004374:	4611      	mov	r1, r2
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fb85 	bl	8004a86 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4618      	mov	r0, r3
 8004382:	f000 fba0 	bl	8004ac6 <SX1278_hw_SPIReadByte>
 8004386:	4603      	mov	r3, r0
 8004388:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2101      	movs	r1, #1
 8004390:	4618      	mov	r0, r3
 8004392:	f000 fb3d 	bl	8004a10 <SX1278_hw_SetNSS>
	return tmp;
 8004396:	7bfb      	ldrb	r3, [r7, #15]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	460b      	mov	r3, r1
 80043aa:	70fb      	strb	r3, [r7, #3]
 80043ac:	4613      	mov	r3, r2
 80043ae:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2100      	movs	r1, #0
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 fb2a 	bl	8004a10 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	78fb      	ldrb	r3, [r7, #3]
 80043c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	4619      	mov	r1, r3
 80043ca:	4610      	mov	r0, r2
 80043cc:	f000 fb5b 	bl	8004a86 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	78ba      	ldrb	r2, [r7, #2]
 80043d6:	4611      	mov	r1, r2
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 fb54 	bl	8004a86 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2101      	movs	r1, #1
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 fb13 	bl	8004a10 <SX1278_hw_SetNSS>
}
 80043ea:	bf00      	nop
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 80043f2:	b590      	push	{r4, r7, lr}
 80043f4:	b087      	sub	sp, #28
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	60f8      	str	r0, [r7, #12]
 80043fa:	607a      	str	r2, [r7, #4]
 80043fc:	461a      	mov	r2, r3
 80043fe:	460b      	mov	r3, r1
 8004400:	72fb      	strb	r3, [r7, #11]
 8004402:	4613      	mov	r3, r2
 8004404:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 8004406:	7abb      	ldrb	r3, [r7, #10]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d927      	bls.n	800445c <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2100      	movs	r1, #0
 8004412:	4618      	mov	r0, r3
 8004414:	f000 fafc 	bl	8004a10 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	7afa      	ldrb	r2, [r7, #11]
 800441e:	4611      	mov	r1, r2
 8004420:	4618      	mov	r0, r3
 8004422:	f000 fb30 	bl	8004a86 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8004426:	2300      	movs	r3, #0
 8004428:	75fb      	strb	r3, [r7, #23]
 800442a:	e00c      	b.n	8004446 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6819      	ldr	r1, [r3, #0]
 8004430:	7dfb      	ldrb	r3, [r7, #23]
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	18d4      	adds	r4, r2, r3
 8004436:	4608      	mov	r0, r1
 8004438:	f000 fb45 	bl	8004ac6 <SX1278_hw_SPIReadByte>
 800443c:	4603      	mov	r3, r0
 800443e:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8004440:	7dfb      	ldrb	r3, [r7, #23]
 8004442:	3301      	adds	r3, #1
 8004444:	75fb      	strb	r3, [r7, #23]
 8004446:	7dfa      	ldrb	r2, [r7, #23]
 8004448:	7abb      	ldrb	r3, [r7, #10]
 800444a:	429a      	cmp	r2, r3
 800444c:	d3ee      	bcc.n	800442c <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2101      	movs	r1, #1
 8004454:	4618      	mov	r0, r3
 8004456:	f000 fadb 	bl	8004a10 <SX1278_hw_SetNSS>
 800445a:	e000      	b.n	800445e <SX1278_SPIBurstRead+0x6c>
		return;
 800445c:	bf00      	nop
	}
}
 800445e:	371c      	adds	r7, #28
 8004460:	46bd      	mov	sp, r7
 8004462:	bd90      	pop	{r4, r7, pc}

08004464 <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	607a      	str	r2, [r7, #4]
 800446e:	461a      	mov	r2, r3
 8004470:	460b      	mov	r3, r1
 8004472:	72fb      	strb	r3, [r7, #11]
 8004474:	4613      	mov	r3, r2
 8004476:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8004478:	7abb      	ldrb	r3, [r7, #10]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d929      	bls.n	80044d2 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2100      	movs	r1, #0
 8004484:	4618      	mov	r0, r3
 8004486:	f000 fac3 	bl	8004a10 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	7afb      	ldrb	r3, [r7, #11]
 8004490:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004494:	b2db      	uxtb	r3, r3
 8004496:	4619      	mov	r1, r3
 8004498:	4610      	mov	r0, r2
 800449a:	f000 faf4 	bl	8004a86 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800449e:	2300      	movs	r3, #0
 80044a0:	75fb      	strb	r3, [r7, #23]
 80044a2:	e00b      	b.n	80044bc <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6818      	ldr	r0, [r3, #0]
 80044a8:	7dfb      	ldrb	r3, [r7, #23]
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	4413      	add	r3, r2
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	4619      	mov	r1, r3
 80044b2:	f000 fae8 	bl	8004a86 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80044b6:	7dfb      	ldrb	r3, [r7, #23]
 80044b8:	3301      	adds	r3, #1
 80044ba:	75fb      	strb	r3, [r7, #23]
 80044bc:	7dfa      	ldrb	r2, [r7, #23]
 80044be:	7abb      	ldrb	r3, [r7, #10]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d3ef      	bcc.n	80044a4 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2101      	movs	r1, #1
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 faa0 	bl	8004a10 <SX1278_hw_SetNSS>
 80044d0:	e000      	b.n	80044d4 <SX1278_SPIBurstWrite+0x70>
		return;
 80044d2:	bf00      	nop
	}
}
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
	...

080044dc <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f90d 	bl	8004704 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 80044ea:	200f      	movs	r0, #15
 80044ec:	f000 fb11 	bl	8004b12 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f917 	bl	8004724 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80044fc:	f04f 0000 	mov.w	r0, #0
 8004500:	f04f 0100 	mov.w	r1, #0
 8004504:	04d9      	lsls	r1, r3, #19
 8004506:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 800450a:	04d0      	lsls	r0, r2, #19
 800450c:	4a6f      	ldr	r2, [pc, #444]	; (80046cc <SX1278_config+0x1f0>)
 800450e:	f04f 0300 	mov.w	r3, #0
 8004512:	f7fb fe59 	bl	80001c8 <__aeabi_uldivmod>
 8004516:	4602      	mov	r2, r0
 8004518:	460b      	mov	r3, r1
 800451a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 800451e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004522:	f04f 0200 	mov.w	r2, #0
 8004526:	f04f 0300 	mov.w	r3, #0
 800452a:	0c02      	lsrs	r2, r0, #16
 800452c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004530:	0c0b      	lsrs	r3, r1, #16
 8004532:	b2d3      	uxtb	r3, r2
 8004534:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 8004536:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800453a:	f04f 0200 	mov.w	r2, #0
 800453e:	f04f 0300 	mov.w	r3, #0
 8004542:	0a02      	lsrs	r2, r0, #8
 8004544:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004548:	0a0b      	lsrs	r3, r1, #8
 800454a:	b2d3      	uxtb	r3, r2
 800454c:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 800454e:	7c3b      	ldrb	r3, [r7, #16]
 8004550:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 8004552:	f107 020c 	add.w	r2, r7, #12
 8004556:	2303      	movs	r3, #3
 8004558:	2106      	movs	r1, #6
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7ff ff82 	bl	8004464 <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8004560:	2234      	movs	r2, #52	; 0x34
 8004562:	2139      	movs	r1, #57	; 0x39
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7ff ff1b 	bl	80043a0 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	7c1b      	ldrb	r3, [r3, #16]
 800456e:	461a      	mov	r2, r3
 8004570:	4b57      	ldr	r3, [pc, #348]	; (80046d0 <SX1278_config+0x1f4>)
 8004572:	5c9b      	ldrb	r3, [r3, r2]
 8004574:	461a      	mov	r2, r3
 8004576:	2109      	movs	r1, #9
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7ff ff11 	bl	80043a0 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 800457e:	220b      	movs	r2, #11
 8004580:	210b      	movs	r1, #11
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7ff ff0c 	bl	80043a0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8004588:	2223      	movs	r2, #35	; 0x23
 800458a:	210c      	movs	r1, #12
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f7ff ff07 	bl	80043a0 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	7c5b      	ldrb	r3, [r3, #17]
 8004596:	461a      	mov	r2, r3
 8004598:	4b4e      	ldr	r3, [pc, #312]	; (80046d4 <SX1278_config+0x1f8>)
 800459a:	5c9b      	ldrb	r3, [r3, r2]
 800459c:	2b06      	cmp	r3, #6
 800459e:	d147      	bne.n	8004630 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	7c9b      	ldrb	r3, [r3, #18]
 80045a4:	461a      	mov	r2, r3
 80045a6:	4b4c      	ldr	r3, [pc, #304]	; (80046d8 <SX1278_config+0x1fc>)
 80045a8:	5c9b      	ldrb	r3, [r3, r2]
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	7cdb      	ldrb	r3, [r3, #19]
 80045b2:	4619      	mov	r1, r3
 80045b4:	4b49      	ldr	r3, [pc, #292]	; (80046dc <SX1278_config+0x200>)
 80045b6:	5c5b      	ldrb	r3, [r3, r1]
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	4413      	add	r3, r2
 80045be:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80045c0:	3301      	adds	r3, #1
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	461a      	mov	r2, r3
 80045c6:	211d      	movs	r1, #29
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7ff fee9 	bl	80043a0 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	7c5b      	ldrb	r3, [r3, #17]
 80045d2:	461a      	mov	r2, r3
 80045d4:	4b3f      	ldr	r3, [pc, #252]	; (80046d4 <SX1278_config+0x1f8>)
 80045d6:	5c9b      	ldrb	r3, [r3, r2]
 80045d8:	011b      	lsls	r3, r3, #4
 80045da:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	7d1b      	ldrb	r3, [r3, #20]
 80045e0:	4619      	mov	r1, r3
 80045e2:	4b3f      	ldr	r3, [pc, #252]	; (80046e0 <SX1278_config+0x204>)
 80045e4:	5c5b      	ldrb	r3, [r3, r1]
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	4413      	add	r3, r2
 80045ec:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80045ee:	3303      	adds	r3, #3
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	461a      	mov	r2, r3
 80045f4:	211e      	movs	r1, #30
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7ff fed2 	bl	80043a0 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 80045fc:	2131      	movs	r1, #49	; 0x31
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7ff feaf 	bl	8004362 <SX1278_SPIRead>
 8004604:	4603      	mov	r3, r0
 8004606:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8004608:	7bfb      	ldrb	r3, [r7, #15]
 800460a:	f023 0307 	bic.w	r3, r3, #7
 800460e:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8004610:	7bfb      	ldrb	r3, [r7, #15]
 8004612:	f043 0305 	orr.w	r3, r3, #5
 8004616:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8004618:	7bfb      	ldrb	r3, [r7, #15]
 800461a:	461a      	mov	r2, r3
 800461c:	2131      	movs	r1, #49	; 0x31
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7ff febe 	bl	80043a0 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8004624:	220c      	movs	r2, #12
 8004626:	2137      	movs	r1, #55	; 0x37
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f7ff feb9 	bl	80043a0 <SX1278_SPIWrite>
 800462e:	e029      	b.n	8004684 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	7c9b      	ldrb	r3, [r3, #18]
 8004634:	461a      	mov	r2, r3
 8004636:	4b28      	ldr	r3, [pc, #160]	; (80046d8 <SX1278_config+0x1fc>)
 8004638:	5c9b      	ldrb	r3, [r3, r2]
 800463a:	011b      	lsls	r3, r3, #4
 800463c:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	7cdb      	ldrb	r3, [r3, #19]
 8004642:	4619      	mov	r1, r3
 8004644:	4b25      	ldr	r3, [pc, #148]	; (80046dc <SX1278_config+0x200>)
 8004646:	5c5b      	ldrb	r3, [r3, r1]
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800464c:	4413      	add	r3, r2
 800464e:	b2db      	uxtb	r3, r3
 8004650:	461a      	mov	r2, r3
 8004652:	211d      	movs	r1, #29
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7ff fea3 	bl	80043a0 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	7c5b      	ldrb	r3, [r3, #17]
 800465e:	461a      	mov	r2, r3
 8004660:	4b1c      	ldr	r3, [pc, #112]	; (80046d4 <SX1278_config+0x1f8>)
 8004662:	5c9b      	ldrb	r3, [r3, r2]
 8004664:	011b      	lsls	r3, r3, #4
 8004666:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	7d1b      	ldrb	r3, [r3, #20]
 800466c:	4619      	mov	r1, r3
 800466e:	4b1c      	ldr	r3, [pc, #112]	; (80046e0 <SX1278_config+0x204>)
 8004670:	5c5b      	ldrb	r3, [r3, r1]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8004676:	4413      	add	r3, r2
 8004678:	b2db      	uxtb	r3, r3
 800467a:	461a      	mov	r2, r3
 800467c:	211e      	movs	r1, #30
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7ff fe8e 	bl	80043a0 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8004684:	2204      	movs	r2, #4
 8004686:	2126      	movs	r1, #38	; 0x26
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7ff fe89 	bl	80043a0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 800468e:	2208      	movs	r2, #8
 8004690:	211f      	movs	r1, #31
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7ff fe84 	bl	80043a0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8004698:	2200      	movs	r2, #0
 800469a:	2120      	movs	r1, #32
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7ff fe7f 	bl	80043a0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 80046a2:	2208      	movs	r2, #8
 80046a4:	2121      	movs	r1, #33	; 0x21
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7ff fe7a 	bl	80043a0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 80046ac:	2201      	movs	r2, #1
 80046ae:	2141      	movs	r1, #65	; 0x41
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7ff fe75 	bl	80043a0 <SX1278_SPIWrite>
	module->readBytes = 0;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	SX1278_standby(module); //Entry standby mode
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f810 	bl	80046e4 <SX1278_standby>
}
 80046c4:	bf00      	nop
 80046c6:	3718      	adds	r7, #24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	01e84800 	.word	0x01e84800
 80046d0:	08005090 	.word	0x08005090
 80046d4:	08005094 	.word	0x08005094
 80046d8:	0800509c 	.word	0x0800509c
 80046dc:	080050a8 	.word	0x080050a8
 80046e0:	080050ac 	.word	0x080050ac

080046e4 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80046ec:	2209      	movs	r2, #9
 80046ee:	2101      	movs	r1, #1
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f7ff fe55 	bl	80043a0 <SX1278_SPIWrite>
	module->status = STANDBY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	759a      	strb	r2, [r3, #22]
}
 80046fc:	bf00      	nop
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 800470c:	2208      	movs	r2, #8
 800470e:	2101      	movs	r1, #1
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7ff fe45 	bl	80043a0 <SX1278_SPIWrite>
	module->status = SLEEP;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	759a      	strb	r2, [r3, #22]
}
 800471c:	bf00      	nop
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 800472c:	2288      	movs	r2, #136	; 0x88
 800472e:	2101      	movs	r1, #1
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7ff fe35 	bl	80043a0 <SX1278_SPIWrite>
}
 8004736:	bf00      	nop
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 800473e:	b580      	push	{r7, lr}
 8004740:	b082      	sub	sp, #8
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8004746:	22ff      	movs	r2, #255	; 0xff
 8004748:	2112      	movs	r1, #18
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7ff fe28 	bl	80043a0 <SX1278_SPIWrite>
}
 8004750:	bf00      	nop
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	460b      	mov	r3, r1
 8004762:	607a      	str	r2, [r7, #4]
 8004764:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	7afa      	ldrb	r2, [r7, #11]
 800476a:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f7ff feb5 	bl	80044dc <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8004772:	2284      	movs	r2, #132	; 0x84
 8004774:	214d      	movs	r1, #77	; 0x4d
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f7ff fe12 	bl	80043a0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 800477c:	22ff      	movs	r2, #255	; 0xff
 800477e:	2124      	movs	r1, #36	; 0x24
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f7ff fe0d 	bl	80043a0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8004786:	2201      	movs	r2, #1
 8004788:	2140      	movs	r1, #64	; 0x40
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f7ff fe08 	bl	80043a0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8004790:	223f      	movs	r2, #63	; 0x3f
 8004792:	2111      	movs	r1, #17
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f7ff fe03 	bl	80043a0 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f7ff ffcf 	bl	800473e <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 80047a0:	7afb      	ldrb	r3, [r7, #11]
 80047a2:	461a      	mov	r2, r3
 80047a4:	2122      	movs	r1, #34	; 0x22
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f7ff fdfa 	bl	80043a0 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 80047ac:	210f      	movs	r1, #15
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f7ff fdd7 	bl	8004362 <SX1278_SPIRead>
 80047b4:	4603      	mov	r3, r0
 80047b6:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 80047b8:	7dfb      	ldrb	r3, [r7, #23]
 80047ba:	461a      	mov	r2, r3
 80047bc:	210d      	movs	r1, #13
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f7ff fdee 	bl	80043a0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 80047c4:	228d      	movs	r2, #141	; 0x8d
 80047c6:	2101      	movs	r1, #1
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f7ff fde9 	bl	80043a0 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80047d6:	2118      	movs	r1, #24
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f7ff fdc2 	bl	8004362 <SX1278_SPIRead>
 80047de:	4603      	mov	r3, r0
 80047e0:	f003 0304 	and.w	r3, r3, #4
 80047e4:	2b04      	cmp	r3, #4
 80047e6:	d104      	bne.n	80047f2 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2203      	movs	r2, #3
 80047ec:	759a      	strb	r2, [r3, #22]
			return 1;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e013      	b.n	800481a <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	3b01      	subs	r3, #1
 80047f6:	607b      	str	r3, [r7, #4]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d109      	bne.n	8004812 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f000 f91b 	bl	8004a3e <SX1278_hw_Reset>
			SX1278_config(module);
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f7ff fe67 	bl	80044dc <SX1278_config>
			return 0;
 800480e:	2300      	movs	r3, #0
 8004810:	e003      	b.n	800481a <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8004812:	2001      	movs	r0, #1
 8004814:	f000 f97d 	bl	8004b12 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8004818:	e7dd      	b.n	80047d6 <SX1278_LoRaEntryRx+0x7e>
	}
}
 800481a:	4618      	mov	r0, r3
 800481c:	3718      	adds	r7, #24
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 8004822:	b580      	push	{r7, lr}
 8004824:	b084      	sub	sp, #16
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4618      	mov	r0, r3
 8004830:	f000 f97a 	bl	8004b28 <SX1278_hw_GetDIO0>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d030      	beq.n	800489c <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3317      	adds	r3, #23
 800483e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004842:	2100      	movs	r1, #0
 8004844:	4618      	mov	r0, r3
 8004846:	f000 fbc1 	bl	8004fcc <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 800484a:	2110      	movs	r1, #16
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7ff fd88 	bl	8004362 <SX1278_SPIRead>
 8004852:	4603      	mov	r3, r0
 8004854:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8004856:	7bbb      	ldrb	r3, [r7, #14]
 8004858:	461a      	mov	r2, r3
 800485a:	210d      	movs	r1, #13
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f7ff fd9f 	bl	80043a0 <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	7c5b      	ldrb	r3, [r3, #17]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d103      	bne.n	8004872 <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	7d5b      	ldrb	r3, [r3, #21]
 800486e:	73fb      	strb	r3, [r7, #15]
 8004870:	e005      	b.n	800487e <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8004872:	2113      	movs	r1, #19
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7ff fd74 	bl	8004362 <SX1278_SPIRead>
 800487a:	4603      	mov	r3, r0
 800487c:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f103 0217 	add.w	r2, r3, #23
 8004884:	7bfb      	ldrb	r3, [r7, #15]
 8004886:	2100      	movs	r1, #0
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7ff fdb2 	bl	80043f2 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	7bfa      	ldrb	r2, [r7, #15]
 8004892:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
		SX1278_clearLoRaIrq(module);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7ff ff51 	bl	800473e <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <SX1278_LoRaTxPacket>:
		}
	}
}

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b084      	sub	sp, #16
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	60b9      	str	r1, [r7, #8]
 80048b4:	603b      	str	r3, [r7, #0]
 80048b6:	4613      	mov	r3, r2
 80048b8:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 80048ba:	79fb      	ldrb	r3, [r7, #7]
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	2100      	movs	r1, #0
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f7ff fdcf 	bl	8004464 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 80048c6:	228b      	movs	r2, #139	; 0x8b
 80048c8:	2101      	movs	r1, #1
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f7ff fd68 	bl	80043a0 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 f927 	bl	8004b28 <SX1278_hw_GetDIO0>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00b      	beq.n	80048f8 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 80048e0:	2112      	movs	r1, #18
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f7ff fd3d 	bl	8004362 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f7ff ff28 	bl	800473e <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f7ff fef8 	bl	80046e4 <SX1278_standby>
			return 1;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e013      	b.n	8004920 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	3b01      	subs	r3, #1
 80048fc:	603b      	str	r3, [r7, #0]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d109      	bne.n	8004918 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4618      	mov	r0, r3
 800490a:	f000 f898 	bl	8004a3e <SX1278_hw_Reset>
			SX1278_config(module);
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f7ff fde4 	bl	80044dc <SX1278_config>
			return 0;
 8004914:	2300      	movs	r3, #0
 8004916:	e003      	b.n	8004920 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8004918:	2001      	movs	r0, #1
 800491a:	f000 f8fa 	bl	8004b12 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 800491e:	e7d7      	b.n	80048d0 <SX1278_LoRaTxPacket+0x26>
	}
}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4618      	mov	r0, r3
 800493a:	f000 f854 	bl	80049e6 <SX1278_hw_init>
	module->frequency = frequency;
 800493e:	68f9      	ldr	r1, [r7, #12]
 8004940:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004944:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	7e3a      	ldrb	r2, [r7, #24]
 800494c:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	7f3a      	ldrb	r2, [r7, #28]
 8004952:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f897 2020 	ldrb.w	r2, [r7, #32]
 800495a:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004962:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800496a:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8004972:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f7ff fdb1 	bl	80044dc <SX1278_config>
}
 800497a:	bf00      	nop
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <SX1278_available>:

int SX1278_receive(SX1278_t *module, uint8_t length, uint32_t timeout) {
	return SX1278_LoRaEntryRx(module, length, timeout);
}

uint8_t SX1278_available(SX1278_t *module) {
 8004982:	b580      	push	{r7, lr}
 8004984:	b082      	sub	sp, #8
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
	return SX1278_LoRaRxPacket(module);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7ff ff49 	bl	8004822 <SX1278_LoRaRxPacket>
 8004990:	4603      	mov	r3, r0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <SX1278_read>:

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 800499a:	b580      	push	{r7, lr}
 800499c:	b084      	sub	sp, #16
 800499e:	af00      	add	r7, sp, #0
 80049a0:	60f8      	str	r0, [r7, #12]
 80049a2:	60b9      	str	r1, [r7, #8]
 80049a4:	4613      	mov	r3, r2
 80049a6:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 80049ae:	79fa      	ldrb	r2, [r7, #7]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d003      	beq.n	80049bc <SX1278_read+0x22>
		length = module->readBytes;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 80049ba:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	3317      	adds	r3, #23
 80049c0:	79fa      	ldrb	r2, [r7, #7]
 80049c2:	4619      	mov	r1, r3
 80049c4:	68b8      	ldr	r0, [r7, #8]
 80049c6:	f000 fb2d 	bl	8005024 <memcpy>
	rxBuf[length] = '\0';
 80049ca:	79fb      	ldrb	r3, [r7, #7]
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	4413      	add	r3, r2
 80049d0:	2200      	movs	r2, #0
 80049d2:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	return length;
 80049dc:	79fb      	ldrb	r3, [r7, #7]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <SX1278_hw_init>:
#include <string.h>

#include "gpio.h"
#include "spi.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b082      	sub	sp, #8
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80049ee:	2101      	movs	r1, #1
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f80d 	bl	8004a10 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6858      	ldr	r0, [r3, #4]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	2201      	movs	r2, #1
 8004a02:	4619      	mov	r1, r3
 8004a04:	f7fc fcea 	bl	80013dc <HAL_GPIO_WritePin>
}
 8004a08:	bf00      	nop
 8004a0a:	3708      	adds	r7, #8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6958      	ldr	r0, [r3, #20]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	b299      	uxth	r1, r3
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	bf0c      	ite	eq
 8004a2a:	2301      	moveq	r3, #1
 8004a2c:	2300      	movne	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	f7fc fcd3 	bl	80013dc <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8004a36:	bf00      	nop
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b082      	sub	sp, #8
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8004a46:	2101      	movs	r1, #1
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f7ff ffe1 	bl	8004a10 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6858      	ldr	r0, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	2200      	movs	r2, #0
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	f7fc fcbe 	bl	80013dc <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8004a60:	2001      	movs	r0, #1
 8004a62:	f000 f856 	bl	8004b12 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6858      	ldr	r0, [r3, #4]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	2201      	movs	r2, #1
 8004a72:	4619      	mov	r1, r3
 8004a74:	f7fc fcb2 	bl	80013dc <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8004a78:	2064      	movs	r0, #100	; 0x64
 8004a7a:	f000 f84a 	bl	8004b12 <SX1278_hw_DelayMs>
}
 8004a7e:	bf00      	nop
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b082      	sub	sp, #8
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	460b      	mov	r3, r1
 8004a90:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8004a92:	2100      	movs	r1, #0
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7ff ffbb 	bl	8004a10 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6998      	ldr	r0, [r3, #24]
 8004a9e:	1cf9      	adds	r1, r7, #3
 8004aa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f7fd ffe0 	bl	8002a6a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8004aaa:	bf00      	nop
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7fe fb71 	bl	8003198 <HAL_SPI_GetState>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d1f7      	bne.n	8004aac <SX1278_hw_SPICommand+0x26>
		;
}
 8004abc:	bf00      	nop
 8004abe:	bf00      	nop
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b086      	sub	sp, #24
 8004aca:	af02      	add	r7, sp, #8
 8004acc:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f7ff ff99 	bl	8004a10 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6998      	ldr	r0, [r3, #24]
 8004ae2:	f107 020e 	add.w	r2, r7, #14
 8004ae6:	f107 010f 	add.w	r1, r7, #15
 8004aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	2301      	movs	r3, #1
 8004af2:	f7fe f92f 	bl	8002d54 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8004af6:	bf00      	nop
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7fe fb4b 	bl	8003198 <HAL_SPI_GetState>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d1f7      	bne.n	8004af8 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8004b08:	7bbb      	ldrb	r3, [r7, #14]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b082      	sub	sp, #8
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7fc f81e 	bl	8000b5c <HAL_Delay>
}
 8004b20:	bf00      	nop
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68da      	ldr	r2, [r3, #12]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	4610      	mov	r0, r2
 8004b3e:	f7fc fc35 	bl	80013ac <HAL_GPIO_ReadPin>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	bf0c      	ite	eq
 8004b48:	2301      	moveq	r3, #1
 8004b4a:	2300      	movne	r3, #0
 8004b4c:	b2db      	uxtb	r3, r3
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
	...

08004b58 <init_PEC15_Table>:

uint16_t pec15Table[256];


void init_PEC15_Table()
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
    uint16_t remainder;
    uint16_t i;
    uint16_t bit;
    for (i = 0; i < 256; i++)
 8004b5e:	2300      	movs	r3, #0
 8004b60:	80bb      	strh	r3, [r7, #4]
 8004b62:	e025      	b.n	8004bb0 <init_PEC15_Table+0x58>
    {
        remainder = i << 7;
 8004b64:	88bb      	ldrh	r3, [r7, #4]
 8004b66:	01db      	lsls	r3, r3, #7
 8004b68:	80fb      	strh	r3, [r7, #6]
        for (bit = 8; bit > 0; --bit)
 8004b6a:	2308      	movs	r3, #8
 8004b6c:	807b      	strh	r3, [r7, #2]
 8004b6e:	e014      	b.n	8004b9a <init_PEC15_Table+0x42>
        {
            if (remainder & 0x4000)
 8004b70:	88fb      	ldrh	r3, [r7, #6]
 8004b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d009      	beq.n	8004b8e <init_PEC15_Table+0x36>
            {
                remainder = ((remainder << 1));
 8004b7a:	88fb      	ldrh	r3, [r7, #6]
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	80fb      	strh	r3, [r7, #6]
                remainder = (remainder ^ CRC15_POLY);
 8004b80:	88fb      	ldrh	r3, [r7, #6]
 8004b82:	f483 438b 	eor.w	r3, r3, #17792	; 0x4580
 8004b86:	f083 0319 	eor.w	r3, r3, #25
 8004b8a:	80fb      	strh	r3, [r7, #6]
 8004b8c:	e002      	b.n	8004b94 <init_PEC15_Table+0x3c>
            }
            else
            {
                remainder = ((remainder << 1));
 8004b8e:	88fb      	ldrh	r3, [r7, #6]
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	80fb      	strh	r3, [r7, #6]
        for (bit = 8; bit > 0; --bit)
 8004b94:	887b      	ldrh	r3, [r7, #2]
 8004b96:	3b01      	subs	r3, #1
 8004b98:	807b      	strh	r3, [r7, #2]
 8004b9a:	887b      	ldrh	r3, [r7, #2]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1e7      	bne.n	8004b70 <init_PEC15_Table+0x18>
            }
        }
        pec15Table[i] = remainder & 0xFFFF;
 8004ba0:	88bb      	ldrh	r3, [r7, #4]
 8004ba2:	4908      	ldr	r1, [pc, #32]	; (8004bc4 <init_PEC15_Table+0x6c>)
 8004ba4:	88fa      	ldrh	r2, [r7, #6]
 8004ba6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (i = 0; i < 256; i++)
 8004baa:	88bb      	ldrh	r3, [r7, #4]
 8004bac:	3301      	adds	r3, #1
 8004bae:	80bb      	strh	r3, [r7, #4]
 8004bb0:	88bb      	ldrh	r3, [r7, #4]
 8004bb2:	2bff      	cmp	r3, #255	; 0xff
 8004bb4:	d9d6      	bls.n	8004b64 <init_PEC15_Table+0xc>
    }
}
 8004bb6:	bf00      	nop
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	20000160 	.word	0x20000160

08004bc8 <AE_pec15>:

uint16_t AE_pec15(uint8_t* data, uint16_t len)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	807b      	strh	r3, [r7, #2]
    uint16_t remainder, address;
    remainder = 16;//PEC seed
 8004bd4:	2310      	movs	r3, #16
 8004bd6:	82fb      	strh	r3, [r7, #22]
    int i;
    for (i= 0; i < len; i++)
 8004bd8:	2300      	movs	r3, #0
 8004bda:	613b      	str	r3, [r7, #16]
 8004bdc:	e019      	b.n	8004c12 <AE_pec15+0x4a>
         * @brief history of data[i*2 + 1]
         * @NOTE TMS570Ls spi working with 16bit variables so we need to
         * @Note cast to uint8_t so we take the 2 offset but
         * @Note TMS570 use big endien memory layout so we have to add +1
         */
        address = ((remainder >> 7) ^ data[i]) & 0xff;//calculate PEC table address remainder = (remainder << 8 ) ^ pec15Table[address];
 8004bde:	8afb      	ldrh	r3, [r7, #22]
 8004be0:	09db      	lsrs	r3, r3, #7
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	440b      	add	r3, r1
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	4053      	eors	r3, r2
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	81fb      	strh	r3, [r7, #14]
        remainder = (remainder << 8) ^ pec15Table[address];
 8004bf6:	8afb      	ldrh	r3, [r7, #22]
 8004bf8:	021b      	lsls	r3, r3, #8
 8004bfa:	b21a      	sxth	r2, r3
 8004bfc:	89fb      	ldrh	r3, [r7, #14]
 8004bfe:	490b      	ldr	r1, [pc, #44]	; (8004c2c <AE_pec15+0x64>)
 8004c00:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004c04:	b21b      	sxth	r3, r3
 8004c06:	4053      	eors	r3, r2
 8004c08:	b21b      	sxth	r3, r3
 8004c0a:	82fb      	strh	r3, [r7, #22]
    for (i= 0; i < len; i++)
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	613b      	str	r3, [r7, #16]
 8004c12:	887b      	ldrh	r3, [r7, #2]
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	dbe1      	blt.n	8004bde <AE_pec15+0x16>
    }
    return (remainder * 2);//The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 8004c1a:	8afb      	ldrh	r3, [r7, #22]
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	b29b      	uxth	r3, r3
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	371c      	adds	r7, #28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	20000160 	.word	0x20000160

08004c30 <ugvMain>:
/**
 * @brief system main function
 * @return none
 */
void ugvMain(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
	systemInitialize();
 8004c34:	f000 f816 	bl	8004c64 <systemInitialize>
//		loreRxTxMutex = LORA_TX_STATUS;
//		ret = SX1278_LoRaEntryTx(&SX1278, 8, 2000);
//		ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) txMsg,
//								  8, LORA_TIMEOUT);

		loreRxTxMutex = LORA_RX_STATUS;
 8004c38:	4b07      	ldr	r3, [pc, #28]	; (8004c58 <ugvMain+0x28>)
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	701a      	strb	r2, [r3, #0]
		ret = SX1278_LoRaEntryRx(&SX1278, sizeof(loraRx), LORA_TIMEOUT);
 8004c3e:	2203      	movs	r2, #3
 8004c40:	211c      	movs	r1, #28
 8004c42:	4806      	ldr	r0, [pc, #24]	; (8004c5c <ugvMain+0x2c>)
 8004c44:	f7ff fd88 	bl	8004758 <SX1278_LoRaEntryRx>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	4a05      	ldr	r2, [pc, #20]	; (8004c60 <ugvMain+0x30>)
 8004c4c:	6013      	str	r3, [r2, #0]
//		{
//			transtmitPackage(&loraDataRx);
//			loraSendFlag = 0;
//		}

		HAL_Delay(1000);
 8004c4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c52:	f7fb ff83 	bl	8000b5c <HAL_Delay>
		loreRxTxMutex = LORA_RX_STATUS;
 8004c56:	e7ef      	b.n	8004c38 <ugvMain+0x8>
 8004c58:	20000360 	.word	0x20000360
 8004c5c:	20000388 	.word	0x20000388
 8004c60:	20000364 	.word	0x20000364

08004c64 <systemInitialize>:
/**
 * @brief initialize peripheral and drivers
 * @return none
 */
static void systemInitialize()
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
	init_PEC15_Table();
 8004c68:	f7ff ff76 	bl	8004b58 <init_PEC15_Table>
	loraInit(&SX1278_hw, &SX1278);
 8004c6c:	4902      	ldr	r1, [pc, #8]	; (8004c78 <systemInitialize+0x14>)
 8004c6e:	4803      	ldr	r0, [pc, #12]	; (8004c7c <systemInitialize+0x18>)
 8004c70:	f000 f806 	bl	8004c80 <loraInit>
}
 8004c74:	bf00      	nop
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	20000388 	.word	0x20000388
 8004c7c:	20000368 	.word	0x20000368

08004c80 <loraInit>:
 * @param[in] lora hardware global variable
 * @param[in] lora global variable
 * @return 1 if success else 0(timeout)
 */
static int loraInit(SX1278_hw_t *sx1278Hw, SX1278_t *sx1278)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b08a      	sub	sp, #40	; 0x28
 8004c84:	af06      	add	r7, sp, #24
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
	int ret;

	sx1278Hw->dio0.port = DIO0_GPIO_Port;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a1c      	ldr	r2, [pc, #112]	; (8004d00 <loraInit+0x80>)
 8004c8e:	60da      	str	r2, [r3, #12]
	sx1278Hw->dio0.pin = DIO0_Pin;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	609a      	str	r2, [r3, #8]
	sx1278Hw->nss.port = NSS_GPIO_Port;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004c9c:	615a      	str	r2, [r3, #20]
	sx1278Hw->nss.pin = NSS_Pin;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2210      	movs	r2, #16
 8004ca2:	611a      	str	r2, [r3, #16]
	sx1278Hw->reset.port = GPIOB;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a16      	ldr	r2, [pc, #88]	; (8004d00 <loraInit+0x80>)
 8004ca8:	605a      	str	r2, [r3, #4]
	sx1278Hw->reset.pin = GPIO_PIN_1;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2202      	movs	r2, #2
 8004cae:	601a      	str	r2, [r3, #0]
	sx1278Hw->spi = &hspi1;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a14      	ldr	r2, [pc, #80]	; (8004d04 <loraInit+0x84>)
 8004cb4:	619a      	str	r2, [r3, #24]

	sx1278->hw = sx1278Hw;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	601a      	str	r2, [r3, #0]

	SX1278_init(sx1278, 434000000, SX1278_POWER_11DBM, SX1278_LORA_SF_7,
 8004cbc:	230a      	movs	r3, #10
 8004cbe:	9305      	str	r3, [sp, #20]
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	9304      	str	r3, [sp, #16]
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	9303      	str	r3, [sp, #12]
 8004cc8:	2307      	movs	r3, #7
 8004cca:	9302      	str	r3, [sp, #8]
 8004ccc:	2301      	movs	r3, #1
 8004cce:	9301      	str	r3, [sp, #4]
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	9300      	str	r3, [sp, #0]
 8004cd4:	a308      	add	r3, pc, #32	; (adr r3, 8004cf8 <loraInit+0x78>)
 8004cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cda:	6838      	ldr	r0, [r7, #0]
 8004cdc:	f7ff fe24 	bl	8004928 <SX1278_init>
	SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);

	ret = SX1278_LoRaTxPacket(sx1278, loraTx,
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	2208      	movs	r2, #8
 8004ce4:	4908      	ldr	r1, [pc, #32]	; (8004d08 <loraInit+0x88>)
 8004ce6:	6838      	ldr	r0, [r7, #0]
 8004ce8:	f7ff fddf 	bl	80048aa <SX1278_LoRaTxPacket>
 8004cec:	60f8      	str	r0, [r7, #12]
			8, LORA_TIMEOUT);

	return ret;
 8004cee:	68fb      	ldr	r3, [r7, #12]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	19de5080 	.word	0x19de5080
 8004cfc:	00000000 	.word	0x00000000
 8004d00:	48000400 	.word	0x48000400
 8004d04:	2000002c 	.word	0x2000002c
 8004d08:	200004a0 	.word	0x200004a0

08004d0c <loraDioCallBack>:
/**
 * @brief lora transmit and receive callback
 * @return none
 */
void loraDioCallBack()
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
	if(loreRxTxMutex == LORA_TX_STATUS)
 8004d12:	4b1a      	ldr	r3, [pc, #104]	; (8004d7c <loraDioCallBack+0x70>)
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d02b      	beq.n	8004d72 <loraDioCallBack+0x66>
		//		ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) txMsg,
		//								  8, LORA_TIMEOUT);
	}
	else
	{
		ret = SX1278_available(&SX1278);
 8004d1a:	4819      	ldr	r0, [pc, #100]	; (8004d80 <loraDioCallBack+0x74>)
 8004d1c:	f7ff fe31 	bl	8004982 <SX1278_available>
 8004d20:	4603      	mov	r3, r0
 8004d22:	461a      	mov	r2, r3
 8004d24:	4b17      	ldr	r3, [pc, #92]	; (8004d84 <loraDioCallBack+0x78>)
 8004d26:	601a      	str	r2, [r3, #0]

		SX1278_read(&SX1278, (uint8_t*)&loraDataRx, ret);
 8004d28:	4b16      	ldr	r3, [pc, #88]	; (8004d84 <loraDioCallBack+0x78>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	461a      	mov	r2, r3
 8004d30:	4915      	ldr	r1, [pc, #84]	; (8004d88 <loraDioCallBack+0x7c>)
 8004d32:	4813      	ldr	r0, [pc, #76]	; (8004d80 <loraDioCallBack+0x74>)
 8004d34:	f7ff fe31 	bl	800499a <SX1278_read>

		uint16_t crc = AE_pec15((uint8_t*)&loraDataRx, (sizeof(LoraData) - 4));
 8004d38:	2130      	movs	r1, #48	; 0x30
 8004d3a:	4813      	ldr	r0, [pc, #76]	; (8004d88 <loraDioCallBack+0x7c>)
 8004d3c:	f7ff ff44 	bl	8004bc8 <AE_pec15>
 8004d40:	4603      	mov	r3, r0
 8004d42:	80fb      	strh	r3, [r7, #6]
		if(crc == (loraDataRx.crcLsb << 0 | loraDataRx.crcMsb << 8))
 8004d44:	88fa      	ldrh	r2, [r7, #6]
 8004d46:	4b10      	ldr	r3, [pc, #64]	; (8004d88 <loraDioCallBack+0x7c>)
 8004d48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	4b0e      	ldr	r3, [pc, #56]	; (8004d88 <loraDioCallBack+0x7c>)
 8004d50:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004d54:	021b      	lsls	r3, r3, #8
 8004d56:	430b      	orrs	r3, r1
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d10a      	bne.n	8004d72 <loraDioCallBack+0x66>
		{
			loraDataRx.carriage = '\r';
 8004d5c:	4b0a      	ldr	r3, [pc, #40]	; (8004d88 <loraDioCallBack+0x7c>)
 8004d5e:	220d      	movs	r2, #13
 8004d60:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			loraDataRx.newline = '\n';
 8004d64:	4b08      	ldr	r3, [pc, #32]	; (8004d88 <loraDioCallBack+0x7c>)
 8004d66:	220a      	movs	r2, #10
 8004d68:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

			transtmitPackage(&loraDataRx);
 8004d6c:	4806      	ldr	r0, [pc, #24]	; (8004d88 <loraDioCallBack+0x7c>)
 8004d6e:	f000 f80d 	bl	8004d8c <transtmitPackage>
		}
	}
}
 8004d72:	bf00      	nop
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	20000360 	.word	0x20000360
 8004d80:	20000388 	.word	0x20000388
 8004d84:	20000364 	.word	0x20000364
 8004d88:	200004bc 	.word	0x200004bc

08004d8c <transtmitPackage>:
/**
 * @brief update the values and trasmit to pc
 */

void transtmitPackage(LoraData * loraDat)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b092      	sub	sp, #72	; 0x48
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
	uint8_t dataBuffer[52];
	uint32_t u32TempVar;

	dataBuffer[0] = (loraDat->azimuth >> 0) & 0xFF;			//!< azimuth lsb
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	881b      	ldrh	r3, [r3, #0]
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	733b      	strb	r3, [r7, #12]
	dataBuffer[1] = (loraDat->azimuth >> 8) & 0xFF;			//!< azimuth msb
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	881b      	ldrh	r3, [r3, #0]
 8004da0:	0a1b      	lsrs	r3, r3, #8
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	737b      	strb	r3, [r7, #13]
	dataBuffer[2] = loraDat->latitudeDegree;				//!< latitude degree
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	789b      	ldrb	r3, [r3, #2]
 8004dac:	73bb      	strb	r3, [r7, #14]
	dataBuffer[3] = loraDat->latitudeMinute;				//!< latitude minute
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	78db      	ldrb	r3, [r3, #3]
 8004db2:	73fb      	strb	r3, [r7, #15]

	u32TempVar = *((uint32_t*)&loraDat->latitudeSecond);	//!< latitude second
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	3304      	adds	r3, #4
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	647b      	str	r3, [r7, #68]	; 0x44
	dataBuffer[4] = (u32TempVar >> 0) & 0xFF;
 8004dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	743b      	strb	r3, [r7, #16]
	dataBuffer[5] = (u32TempVar >> 8) & 0xFF;
 8004dc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dc4:	0a1b      	lsrs	r3, r3, #8
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	747b      	strb	r3, [r7, #17]
	dataBuffer[6] = (u32TempVar >> 16) & 0xFF;
 8004dca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dcc:	0c1b      	lsrs	r3, r3, #16
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	74bb      	strb	r3, [r7, #18]
	dataBuffer[7] = (u32TempVar >> 24) & 0xFF;
 8004dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dd4:	0e1b      	lsrs	r3, r3, #24
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	74fb      	strb	r3, [r7, #19]

	dataBuffer[8] = loraDat->longitudeDegree;				//!< longitude degree
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	7a1b      	ldrb	r3, [r3, #8]
 8004dde:	753b      	strb	r3, [r7, #20]
	dataBuffer[9] = loraDat->longitudeMinute;				//!< longitude minute
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	7a5b      	ldrb	r3, [r3, #9]
 8004de4:	757b      	strb	r3, [r7, #21]
	dataBuffer[10] = loraDat->numberOfSatellite;			//!< number of satellite
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	7a9b      	ldrb	r3, [r3, #10]
 8004dea:	75bb      	strb	r3, [r7, #22]
	dataBuffer[11] = loraDat->second;						//!< gps second
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	7adb      	ldrb	r3, [r3, #11]
 8004df0:	75fb      	strb	r3, [r7, #23]

	u32TempVar = *((uint32_t*)&loraDat->longitudeSecond);	//!< longitude second
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	330c      	adds	r3, #12
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	647b      	str	r3, [r7, #68]	; 0x44
	dataBuffer[12] = (u32TempVar >> 0) & 0xFF;
 8004dfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	763b      	strb	r3, [r7, #24]
	dataBuffer[13] = (u32TempVar >> 8) & 0xFF;
 8004e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e02:	0a1b      	lsrs	r3, r3, #8
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	767b      	strb	r3, [r7, #25]
	dataBuffer[14] = (u32TempVar >> 16) & 0xFF;
 8004e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e0a:	0c1b      	lsrs	r3, r3, #16
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	76bb      	strb	r3, [r7, #26]
	dataBuffer[15] = (u32TempVar >> 24) & 0xFF;
 8004e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e12:	0e1b      	lsrs	r3, r3, #24
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	76fb      	strb	r3, [r7, #27]

	u32TempVar = *((uint32_t*)&loraDat->speed);				//!< gps speed
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	3310      	adds	r3, #16
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	647b      	str	r3, [r7, #68]	; 0x44
	dataBuffer[16] = (u32TempVar >> 0) & 0xFF;
 8004e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	773b      	strb	r3, [r7, #28]
	dataBuffer[17] = (u32TempVar >> 8) & 0xFF;
 8004e26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e28:	0a1b      	lsrs	r3, r3, #8
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	777b      	strb	r3, [r7, #29]
	dataBuffer[18] = (u32TempVar >> 16) & 0xFF;
 8004e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e30:	0c1b      	lsrs	r3, r3, #16
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	77bb      	strb	r3, [r7, #30]
	dataBuffer[19] = (u32TempVar >> 24) & 0xFF;
 8004e36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e38:	0e1b      	lsrs	r3, r3, #24
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	77fb      	strb	r3, [r7, #31]

	u32TempVar = *((uint32_t*)&loraDat->Ax);				//!< mpu accelartion x
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	3314      	adds	r3, #20
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	647b      	str	r3, [r7, #68]	; 0x44
	dataBuffer[20] = (u32TempVar >> 0) & 0xFF;
 8004e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	f887 3020 	strb.w	r3, [r7, #32]
	dataBuffer[21] = (u32TempVar >> 8) & 0xFF;
 8004e4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e50:	0a1b      	lsrs	r3, r3, #8
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	dataBuffer[22] = (u32TempVar >> 16) & 0xFF;
 8004e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e5a:	0c1b      	lsrs	r3, r3, #16
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	dataBuffer[23] = (u32TempVar >> 24) & 0xFF;
 8004e62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e64:	0e1b      	lsrs	r3, r3, #24
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	u32TempVar = *((uint32_t*)&loraDat->Ay);				//!< MPU acceleration y
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	3318      	adds	r3, #24
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	647b      	str	r3, [r7, #68]	; 0x44
	dataBuffer[24] = (u32TempVar >> 0) & 0xFF;
 8004e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	dataBuffer[25] = (u32TempVar >> 8) & 0xFF;
 8004e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e7e:	0a1b      	lsrs	r3, r3, #8
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	dataBuffer[26] = (u32TempVar >> 16) & 0xFF;
 8004e86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e88:	0c1b      	lsrs	r3, r3, #16
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	dataBuffer[27] = (u32TempVar >> 24) & 0xFF;
 8004e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e92:	0e1b      	lsrs	r3, r3, #24
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	u32TempVar = *((uint32_t*)&loraDat->Temperature);		//!< MPU temperature
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	331c      	adds	r3, #28
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	647b      	str	r3, [r7, #68]	; 0x44
	dataBuffer[28] = (u32TempVar >> 0) & 0xFF;
 8004ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	dataBuffer[29] = (u32TempVar >> 8) & 0xFF;
 8004eaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eac:	0a1b      	lsrs	r3, r3, #8
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	dataBuffer[30] = (u32TempVar >> 16) & 0xFF;
 8004eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eb6:	0c1b      	lsrs	r3, r3, #16
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	dataBuffer[31] = (u32TempVar >> 24) & 0xFF;
 8004ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ec0:	0e1b      	lsrs	r3, r3, #24
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	u32TempVar = *((uint32_t*)&loraDat->KalmanAngleX);		//!< MPU kalman x angle
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3320      	adds	r3, #32
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	647b      	str	r3, [r7, #68]	; 0x44
	dataBuffer[32] = (u32TempVar >> 0) & 0xFF;
 8004ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	dataBuffer[33] = (u32TempVar >> 8) & 0xFF;
 8004ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eda:	0a1b      	lsrs	r3, r3, #8
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	dataBuffer[34] = (u32TempVar >> 16) & 0xFF;
 8004ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ee4:	0c1b      	lsrs	r3, r3, #16
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	dataBuffer[35] = (u32TempVar >> 24) & 0xFF;
 8004eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eee:	0e1b      	lsrs	r3, r3, #24
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	u32TempVar = *((uint32_t*)&loraDat->KalmanAngleY);		//!< MPU kalman y angle
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	3324      	adds	r3, #36	; 0x24
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	647b      	str	r3, [r7, #68]	; 0x44
	dataBuffer[36] = (u32TempVar >> 0) & 0xFF;
 8004efe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	dataBuffer[37] = (u32TempVar >> 8) & 0xFF;
 8004f06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f08:	0a1b      	lsrs	r3, r3, #8
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	dataBuffer[38] = (u32TempVar >> 16) & 0xFF;
 8004f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f12:	0c1b      	lsrs	r3, r3, #16
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	dataBuffer[39] = (u32TempVar >> 24) & 0xFF;
 8004f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f1c:	0e1b      	lsrs	r3, r3, #24
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	dataBuffer[40] = loraDat->minute;						//!< gps minute
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f2a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	dataBuffer[41] = loraDat->hour;							//!< gps hour
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004f34:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	dataBuffer[42] = loraDat->day;							//!< gps day
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004f3e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	dataBuffer[43] = loraDat->month;						//!< gps month
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004f48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	dataBuffer[44] = loraDat->locationLat;					//!< gps latitude location
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004f52:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	dataBuffer[45] = loraDat->locationLong;					//!< gps longitude location
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004f5c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	dataBuffer[46] = loraDat->ledState;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004f66:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	dataBuffer[47] = loraDat->gpsState;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004f70:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	uint16_t pec = AE_pec15((uint8_t*)dataBuffer, 48);
 8004f74:	f107 030c 	add.w	r3, r7, #12
 8004f78:	2130      	movs	r1, #48	; 0x30
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7ff fe24 	bl	8004bc8 <AE_pec15>
 8004f80:	4603      	mov	r3, r0
 8004f82:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	dataBuffer[48] = (pec >> 0) & 0xFF;
 8004f86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	dataBuffer[49] = (pec >> 8) & 0xFF;
 8004f90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004f94:	0a1b      	lsrs	r3, r3, #8
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	dataBuffer[50] = loraDat->carriage;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004fa4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	dataBuffer[51] = loraDat->newline;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004fae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	HAL_UART_Transmit(&huart2, dataBuffer, sizeof(dataBuffer), 52);
 8004fb2:	f107 010c 	add.w	r1, r7, #12
 8004fb6:	2334      	movs	r3, #52	; 0x34
 8004fb8:	2234      	movs	r2, #52	; 0x34
 8004fba:	4803      	ldr	r0, [pc, #12]	; (8004fc8 <transtmitPackage+0x23c>)
 8004fbc:	f7fe faac 	bl	8003518 <HAL_UART_Transmit>
}
 8004fc0:	bf00      	nop
 8004fc2:	3748      	adds	r7, #72	; 0x48
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	20000090 	.word	0x20000090

08004fcc <memset>:
 8004fcc:	4402      	add	r2, r0
 8004fce:	4603      	mov	r3, r0
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d100      	bne.n	8004fd6 <memset+0xa>
 8004fd4:	4770      	bx	lr
 8004fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8004fda:	e7f9      	b.n	8004fd0 <memset+0x4>

08004fdc <__libc_init_array>:
 8004fdc:	b570      	push	{r4, r5, r6, lr}
 8004fde:	4d0d      	ldr	r5, [pc, #52]	; (8005014 <__libc_init_array+0x38>)
 8004fe0:	4c0d      	ldr	r4, [pc, #52]	; (8005018 <__libc_init_array+0x3c>)
 8004fe2:	1b64      	subs	r4, r4, r5
 8004fe4:	10a4      	asrs	r4, r4, #2
 8004fe6:	2600      	movs	r6, #0
 8004fe8:	42a6      	cmp	r6, r4
 8004fea:	d109      	bne.n	8005000 <__libc_init_array+0x24>
 8004fec:	4d0b      	ldr	r5, [pc, #44]	; (800501c <__libc_init_array+0x40>)
 8004fee:	4c0c      	ldr	r4, [pc, #48]	; (8005020 <__libc_init_array+0x44>)
 8004ff0:	f000 f826 	bl	8005040 <_init>
 8004ff4:	1b64      	subs	r4, r4, r5
 8004ff6:	10a4      	asrs	r4, r4, #2
 8004ff8:	2600      	movs	r6, #0
 8004ffa:	42a6      	cmp	r6, r4
 8004ffc:	d105      	bne.n	800500a <__libc_init_array+0x2e>
 8004ffe:	bd70      	pop	{r4, r5, r6, pc}
 8005000:	f855 3b04 	ldr.w	r3, [r5], #4
 8005004:	4798      	blx	r3
 8005006:	3601      	adds	r6, #1
 8005008:	e7ee      	b.n	8004fe8 <__libc_init_array+0xc>
 800500a:	f855 3b04 	ldr.w	r3, [r5], #4
 800500e:	4798      	blx	r3
 8005010:	3601      	adds	r6, #1
 8005012:	e7f2      	b.n	8004ffa <__libc_init_array+0x1e>
 8005014:	080050b8 	.word	0x080050b8
 8005018:	080050b8 	.word	0x080050b8
 800501c:	080050b8 	.word	0x080050b8
 8005020:	080050bc 	.word	0x080050bc

08005024 <memcpy>:
 8005024:	440a      	add	r2, r1
 8005026:	4291      	cmp	r1, r2
 8005028:	f100 33ff 	add.w	r3, r0, #4294967295
 800502c:	d100      	bne.n	8005030 <memcpy+0xc>
 800502e:	4770      	bx	lr
 8005030:	b510      	push	{r4, lr}
 8005032:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005036:	f803 4f01 	strb.w	r4, [r3, #1]!
 800503a:	4291      	cmp	r1, r2
 800503c:	d1f9      	bne.n	8005032 <memcpy+0xe>
 800503e:	bd10      	pop	{r4, pc}

08005040 <_init>:
 8005040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005042:	bf00      	nop
 8005044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005046:	bc08      	pop	{r3}
 8005048:	469e      	mov	lr, r3
 800504a:	4770      	bx	lr

0800504c <_fini>:
 800504c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800504e:	bf00      	nop
 8005050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005052:	bc08      	pop	{r3}
 8005054:	469e      	mov	lr, r3
 8005056:	4770      	bx	lr
